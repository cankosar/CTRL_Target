
CTRL_target.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  080091d8  080091d8  000191d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b50  08009b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009b58  08009b58  00019b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009b5c  08009b5c  00019b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000228  20000000  08009b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001280  20000228  08009d88  00020228  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200014a8  08009d88  000214a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024773  00000000  00000000  00020256  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003fa9  00000000  00000000  000449c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009803  00000000  00000000  00048972  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d98  00000000  00000000  00052178  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001278  00000000  00000000  00052f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008390  00000000  00000000  00054188  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005594  00000000  00000000  0005c518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00061aac  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ac8  00000000  00000000  00061b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000228 	.word	0x20000228
 800021c:	00000000 	.word	0x00000000
 8000220:	080091bc 	.word	0x080091bc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000022c 	.word	0x2000022c
 800023c:	080091bc 	.word	0x080091bc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <HAL_InitTick+0x3c>)
{
 8000604:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_InitTick+0x40>)
 8000608:	7818      	ldrb	r0, [r3, #0]
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000612:	6810      	ldr	r0, [r2, #0]
 8000614:	fbb0 f0f3 	udiv	r0, r0, r3
 8000618:	f000 f89c 	bl	8000754 <HAL_SYSTICK_Config>
 800061c:	4604      	mov	r4, r0
 800061e:	b958      	cbnz	r0, 8000638 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000620:	2d0f      	cmp	r5, #15
 8000622:	d809      	bhi.n	8000638 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	4602      	mov	r2, r0
 8000626:	4629      	mov	r1, r5
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 f84e 	bl	80006cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_InitTick+0x44>)
 8000632:	4620      	mov	r0, r4
 8000634:	601d      	str	r5, [r3, #0]
 8000636:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000638:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800063a:	bd38      	pop	{r3, r4, r5, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	20000020 	.word	0x20000020
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_Init>:
{
 8000648:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064a:	2003      	movs	r0, #3
 800064c:	f000 f82c 	bl	80006a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ffd5 	bl	8000600 <HAL_InitTick>
  HAL_MspInit();
 8000656:	f003 ff11 	bl	800447c <HAL_MspInit>
}
 800065a:	2000      	movs	r0, #0
 800065c:	bd08      	pop	{r3, pc}
	...

08000660 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000660:	4a03      	ldr	r2, [pc, #12]	; (8000670 <HAL_IncTick+0x10>)
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_IncTick+0x14>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	440b      	add	r3, r1
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000254 	.word	0x20000254
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <HAL_GetTick+0x8>)
 800067a:	6818      	ldr	r0, [r3, #0]
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000254 	.word	0x20000254

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b538      	push	{r3, r4, r5, lr}
 8000686:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff fff6 	bl	8000678 <HAL_GetTick>
 800068c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000690:	bf1e      	ittt	ne
 8000692:	4b04      	ldrne	r3, [pc, #16]	; (80006a4 <HAL_Delay+0x20>)
 8000694:	781b      	ldrbne	r3, [r3, #0]
 8000696:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000698:	f7ff ffee 	bl	8000678 <HAL_GetTick>
 800069c:	1b40      	subs	r0, r0, r5
 800069e:	4284      	cmp	r4, r0
 80006a0:	d8fa      	bhi.n	8000698 <HAL_Delay+0x14>
  {
  }
}
 80006a2:	bd38      	pop	{r3, r4, r5, pc}
 80006a4:	20000000 	.word	0x20000000

080006a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006aa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006b6:	041b      	lsls	r3, r3, #16
 80006b8:	0c1b      	lsrs	r3, r3, #16
 80006ba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006c4:	60d3      	str	r3, [r2, #12]
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	68dc      	ldr	r4, [r3, #12]
 80006d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	2b04      	cmp	r3, #4
 80006de:	bf28      	it	cs
 80006e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e8:	bf8c      	ite	hi
 80006ea:	3c03      	subhi	r4, #3
 80006ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ee:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80006f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80006f8:	ea01 0103 	and.w	r1, r1, r3
 80006fc:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	fa05 f404 	lsl.w	r4, r5, r4
 8000704:	f104 34ff 	add.w	r4, r4, #4294967295
 8000708:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	ea42 0201 	orr.w	r2, r2, r1
 8000710:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000714:	da05      	bge.n	8000722 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	f000 000f 	and.w	r0, r0, #15
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_NVIC_SetPriority+0x6c>)
 800071e:	541a      	strb	r2, [r3, r0]
 8000720:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800072c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00
 8000738:	e000ed14 	.word	0xe000ed14

0800073c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800073c:	0942      	lsrs	r2, r0, #5
 800073e:	2301      	movs	r3, #1
 8000740:	f000 001f 	and.w	r0, r0, #31
 8000744:	fa03 f000 	lsl.w	r0, r3, r0
 8000748:	4b01      	ldr	r3, [pc, #4]	; (8000750 <HAL_NVIC_EnableIRQ+0x14>)
 800074a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100

08000754 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	3801      	subs	r0, #1
 8000756:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800075a:	d20a      	bcs.n	8000772 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	21f0      	movs	r1, #240	; 0xf0
 8000760:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000772:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000782:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	bf0c      	ite	eq
 8000788:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800078c:	f022 0204 	bicne.w	r2, r2, #4
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	4770      	bx	lr
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000798:	4770      	bx	lr

0800079a <HAL_SYSTICK_IRQHandler>:
{
 800079a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800079c:	f7ff fffc 	bl	8000798 <HAL_SYSTICK_Callback>
 80007a0:	bd08      	pop	{r3, pc}
	...

080007a4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80007a4:	6803      	ldr	r3, [r0, #0]
 80007a6:	2118      	movs	r1, #24
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80007ae:	3a10      	subs	r2, #16
 80007b0:	f023 0303 	bic.w	r3, r3, #3
 80007b4:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007b8:	4904      	ldr	r1, [pc, #16]	; (80007cc <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80007ba:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007bc:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80007be:	bf88      	it	hi
 80007c0:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007c2:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80007c4:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80007c6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	080091d8 	.word	0x080091d8

080007d0 <HAL_DMA_Init>:
{
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007d4:	f7ff ff50 	bl	8000678 <HAL_GetTick>
 80007d8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80007da:	2c00      	cmp	r4, #0
 80007dc:	d071      	beq.n	80008c2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80007de:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80007e0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80007e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80007ec:	6813      	ldr	r3, [r2, #0]
 80007ee:	f023 0301 	bic.w	r3, r3, #1
 80007f2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007f4:	6821      	ldr	r1, [r4, #0]
 80007f6:	680b      	ldr	r3, [r1, #0]
 80007f8:	07d8      	lsls	r0, r3, #31
 80007fa:	d43c      	bmi.n	8000876 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80007fc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007fe:	4d32      	ldr	r5, [pc, #200]	; (80008c8 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000800:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000802:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000804:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000806:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000808:	4313      	orrs	r3, r2
 800080a:	68e2      	ldr	r2, [r4, #12]
 800080c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800080e:	6922      	ldr	r2, [r4, #16]
 8000810:	4313      	orrs	r3, r2
 8000812:	6962      	ldr	r2, [r4, #20]
 8000814:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000816:	69e2      	ldr	r2, [r4, #28]
 8000818:	4303      	orrs	r3, r0
 800081a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800081c:	6a22      	ldr	r2, [r4, #32]
 800081e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000820:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000822:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000824:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000828:	bf01      	itttt	eq
 800082a:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 800082c:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800082e:	4335      	orreq	r5, r6
 8000830:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000832:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8000834:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000836:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000838:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800083c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000840:	d10b      	bne.n	800085a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000842:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000844:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000846:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000848:	b13d      	cbz	r5, 800085a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800084a:	b9f8      	cbnz	r0, 800088c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800084c:	2a01      	cmp	r2, #1
 800084e:	d02d      	beq.n	80008ac <HAL_DMA_Init+0xdc>
 8000850:	d301      	bcc.n	8000856 <HAL_DMA_Init+0x86>
 8000852:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000854:	d101      	bne.n	800085a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000856:	01ea      	lsls	r2, r5, #7
 8000858:	d42b      	bmi.n	80008b2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800085a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800085c:	4620      	mov	r0, r4
 800085e:	f7ff ffa1 	bl	80007a4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000862:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000864:	233f      	movs	r3, #63	; 0x3f
 8000866:	4093      	lsls	r3, r2
 8000868:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800086a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800086c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800086e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000870:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000874:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000876:	f7ff feff 	bl	8000678 <HAL_GetTick>
 800087a:	1b40      	subs	r0, r0, r5
 800087c:	2805      	cmp	r0, #5
 800087e:	d9b9      	bls.n	80007f4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000880:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000882:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000884:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000886:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800088a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800088c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000890:	d113      	bne.n	80008ba <HAL_DMA_Init+0xea>
    switch (tmp)
 8000892:	2a03      	cmp	r2, #3
 8000894:	d8e1      	bhi.n	800085a <HAL_DMA_Init+0x8a>
 8000896:	a001      	add	r0, pc, #4	; (adr r0, 800089c <HAL_DMA_Init+0xcc>)
 8000898:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800089c:	080008b3 	.word	0x080008b3
 80008a0:	08000857 	.word	0x08000857
 80008a4:	080008b3 	.word	0x080008b3
 80008a8:	080008ad 	.word	0x080008ad
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80008ac:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80008b0:	d1d3      	bne.n	800085a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008b2:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80008b4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008b6:	6563      	str	r3, [r4, #84]	; 0x54
 80008b8:	e7e5      	b.n	8000886 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80008ba:	2a02      	cmp	r2, #2
 80008bc:	d9f9      	bls.n	80008b2 <HAL_DMA_Init+0xe2>
 80008be:	2a03      	cmp	r2, #3
 80008c0:	e7c8      	b.n	8000854 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80008c2:	2001      	movs	r0, #1
 80008c4:	bd70      	pop	{r4, r5, r6, pc}
 80008c6:	bf00      	nop
 80008c8:	e010803f 	.word	0xe010803f

080008cc <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008cc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d003      	beq.n	80008dc <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80008d8:	2001      	movs	r0, #1
 80008da:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80008dc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80008de:	2305      	movs	r3, #5
 80008e0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 80008e4:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	f023 0301 	bic.w	r3, r3, #1
 80008ec:	6013      	str	r3, [r2, #0]
}
 80008ee:	4770      	bx	lr

080008f0 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 80008f0:	2300      	movs	r3, #0
{
 80008f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80008f4:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80008f6:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80008f8:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <HAL_DMA_IRQHandler+0x170>)
{
 80008fa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80008fc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 80008fe:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000900:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000902:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000904:	409a      	lsls	r2, r3
 8000906:	4216      	tst	r6, r2
 8000908:	d00c      	beq.n	8000924 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800090a:	6801      	ldr	r1, [r0, #0]
 800090c:	6808      	ldr	r0, [r1, #0]
 800090e:	0740      	lsls	r0, r0, #29
 8000910:	d508      	bpl.n	8000924 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000912:	6808      	ldr	r0, [r1, #0]
 8000914:	f020 0004 	bic.w	r0, r0, #4
 8000918:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800091a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800091c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800091e:	f042 0201 	orr.w	r2, r2, #1
 8000922:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000924:	2201      	movs	r2, #1
 8000926:	409a      	lsls	r2, r3
 8000928:	4216      	tst	r6, r2
 800092a:	d008      	beq.n	800093e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800092c:	6821      	ldr	r1, [r4, #0]
 800092e:	6949      	ldr	r1, [r1, #20]
 8000930:	0609      	lsls	r1, r1, #24
 8000932:	d504      	bpl.n	800093e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000934:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000936:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000938:	f042 0202 	orr.w	r2, r2, #2
 800093c:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800093e:	2204      	movs	r2, #4
 8000940:	409a      	lsls	r2, r3
 8000942:	4216      	tst	r6, r2
 8000944:	d008      	beq.n	8000958 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000946:	6821      	ldr	r1, [r4, #0]
 8000948:	6809      	ldr	r1, [r1, #0]
 800094a:	0788      	lsls	r0, r1, #30
 800094c:	d504      	bpl.n	8000958 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800094e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000950:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000952:	f042 0204 	orr.w	r2, r2, #4
 8000956:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000958:	2210      	movs	r2, #16
 800095a:	409a      	lsls	r2, r3
 800095c:	4216      	tst	r6, r2
 800095e:	d010      	beq.n	8000982 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000960:	6823      	ldr	r3, [r4, #0]
 8000962:	6819      	ldr	r1, [r3, #0]
 8000964:	0709      	lsls	r1, r1, #28
 8000966:	d50c      	bpl.n	8000982 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000968:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	0350      	lsls	r0, r2, #13
 800096e:	d535      	bpl.n	80009dc <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	0319      	lsls	r1, r3, #12
 8000974:	d401      	bmi.n	800097a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000978:	e000      	b.n	800097c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800097a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800097c:	b10b      	cbz	r3, 8000982 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800097e:	4620      	mov	r0, r4
 8000980:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000982:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000984:	2220      	movs	r2, #32
 8000986:	408a      	lsls	r2, r1
 8000988:	4216      	tst	r6, r2
 800098a:	d038      	beq.n	80009fe <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	06c6      	lsls	r6, r0, #27
 8000992:	d534      	bpl.n	80009fe <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000994:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000996:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800099a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800099c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800099e:	d125      	bne.n	80009ec <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009a0:	f022 0216 	bic.w	r2, r2, #22
 80009a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009a6:	695a      	ldr	r2, [r3, #20]
 80009a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009ac:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009b0:	b90a      	cbnz	r2, 80009b6 <HAL_DMA_IRQHandler+0xc6>
 80009b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009b4:	b11a      	cbz	r2, 80009be <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	f022 0208 	bic.w	r2, r2, #8
 80009bc:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009be:	233f      	movs	r3, #63	; 0x3f
 80009c0:	408b      	lsls	r3, r1
 80009c2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80009c4:	2300      	movs	r3, #0
 80009c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80009ca:	2301      	movs	r3, #1
 80009cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80009d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80009d2:	b10b      	cbz	r3, 80009d8 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80009d4:	4620      	mov	r0, r4
 80009d6:	4798      	blx	r3
}
 80009d8:	b003      	add	sp, #12
 80009da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	05d2      	lsls	r2, r2, #23
 80009e0:	d4c9      	bmi.n	8000976 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	f022 0208 	bic.w	r2, r2, #8
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	e7c4      	b.n	8000976 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009ec:	0350      	lsls	r0, r2, #13
 80009ee:	d528      	bpl.n	8000a42 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	0319      	lsls	r1, r3, #12
 80009f4:	d432      	bmi.n	8000a5c <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80009f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80009f8:	b10b      	cbz	r3, 80009fe <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80009fa:	4620      	mov	r0, r4
 80009fc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80009fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0e9      	beq.n	80009d8 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a06:	07da      	lsls	r2, r3, #31
 8000a08:	d519      	bpl.n	8000a3e <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a0a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000a0c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a0e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000a12:	6813      	ldr	r3, [r2, #0]
 8000a14:	f023 0301 	bic.w	r3, r3, #1
 8000a18:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000a1a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a1e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000a22:	9b01      	ldr	r3, [sp, #4]
 8000a24:	3301      	adds	r3, #1
 8000a26:	429f      	cmp	r7, r3
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	d302      	bcc.n	8000a32 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a2c:	6813      	ldr	r3, [r2, #0]
 8000a2e:	07db      	lsls	r3, r3, #31
 8000a30:	d4f7      	bmi.n	8000a22 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000a32:	2300      	movs	r3, #0
 8000a34:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000a3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a40:	e7c7      	b.n	80009d2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a48:	d108      	bne.n	8000a5c <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a4a:	6819      	ldr	r1, [r3, #0]
 8000a4c:	f021 0110 	bic.w	r1, r1, #16
 8000a50:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000a52:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000a54:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000a58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000a5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a5e:	e7cb      	b.n	80009f8 <HAL_DMA_IRQHandler+0x108>
 8000a60:	20000020 	.word	0x20000020

08000a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a68:	680b      	ldr	r3, [r1, #0]
{
 8000a6a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000c30 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a70:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a72:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a74:	4a6c      	ldr	r2, [pc, #432]	; (8000c28 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a76:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000c34 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000a7a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7e:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000a80:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a84:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000a88:	45b6      	cmp	lr, r6
 8000a8a:	f040 80b3 	bne.w	8000bf4 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a8e:	684c      	ldr	r4, [r1, #4]
 8000a90:	f024 0710 	bic.w	r7, r4, #16
 8000a94:	2f02      	cmp	r7, #2
 8000a96:	d116      	bne.n	8000ac6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000a98:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a9c:	f003 0b07 	and.w	fp, r3, #7
 8000aa0:	f04f 0c0f 	mov.w	ip, #15
 8000aa4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000aa8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000aac:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ab0:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ab4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ab8:	690d      	ldr	r5, [r1, #16]
 8000aba:	fa05 f50b 	lsl.w	r5, r5, fp
 8000abe:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000ac2:	f8ca 5020 	str.w	r5, [sl, #32]
 8000ac6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000aca:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000acc:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ad0:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ad4:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ada:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ade:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae0:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ae2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ae6:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000aea:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aee:	d811      	bhi.n	8000b14 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000af0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000af2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000af6:	68cf      	ldr	r7, [r1, #12]
 8000af8:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000afc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000b00:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b02:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b04:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b08:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000b0c:	409f      	lsls	r7, r3
 8000b0e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000b12:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b14:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b16:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b18:	688f      	ldr	r7, [r1, #8]
 8000b1a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000b1e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000b20:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b22:	00e5      	lsls	r5, r4, #3
 8000b24:	d566      	bpl.n	8000bf4 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000b2a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b2e:	f003 0e03 	and.w	lr, r3, #3
 8000b32:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000b3a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b3e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000b46:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000b4a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000b4e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000b52:	9503      	str	r5, [sp, #12]
 8000b54:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b56:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000b5a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b5e:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b62:	4d32      	ldr	r5, [pc, #200]	; (8000c2c <HAL_GPIO_Init+0x1c8>)
 8000b64:	42a8      	cmp	r0, r5
 8000b66:	d04c      	beq.n	8000c02 <HAL_GPIO_Init+0x19e>
 8000b68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b6c:	42a8      	cmp	r0, r5
 8000b6e:	d04a      	beq.n	8000c06 <HAL_GPIO_Init+0x1a2>
 8000b70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b74:	42a8      	cmp	r0, r5
 8000b76:	d048      	beq.n	8000c0a <HAL_GPIO_Init+0x1a6>
 8000b78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b7c:	42a8      	cmp	r0, r5
 8000b7e:	d046      	beq.n	8000c0e <HAL_GPIO_Init+0x1aa>
 8000b80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b84:	42a8      	cmp	r0, r5
 8000b86:	d044      	beq.n	8000c12 <HAL_GPIO_Init+0x1ae>
 8000b88:	4548      	cmp	r0, r9
 8000b8a:	d044      	beq.n	8000c16 <HAL_GPIO_Init+0x1b2>
 8000b8c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000b90:	42a8      	cmp	r0, r5
 8000b92:	d042      	beq.n	8000c1a <HAL_GPIO_Init+0x1b6>
 8000b94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b98:	42a8      	cmp	r0, r5
 8000b9a:	d040      	beq.n	8000c1e <HAL_GPIO_Init+0x1ba>
 8000b9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ba0:	42a8      	cmp	r0, r5
 8000ba2:	d03e      	beq.n	8000c22 <HAL_GPIO_Init+0x1be>
 8000ba4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ba8:	42a8      	cmp	r0, r5
 8000baa:	bf14      	ite	ne
 8000bac:	250a      	movne	r5, #10
 8000bae:	2509      	moveq	r5, #9
 8000bb0:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bb8:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bbc:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bbe:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000bc2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bc4:	bf0c      	ite	eq
 8000bc6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bc8:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bca:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000bce:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000bd0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bd2:	bf0c      	ite	eq
 8000bd4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bd6:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000bdc:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000bde:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000be0:	bf0c      	ite	eq
 8000be2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000be4:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be6:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000be8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000bea:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000bec:	bf54      	ite	pl
 8000bee:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000bf0:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000bf2:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	2b10      	cmp	r3, #16
 8000bf8:	f47f af3f 	bne.w	8000a7a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000bfc:	b005      	add	sp, #20
 8000bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c02:	2500      	movs	r5, #0
 8000c04:	e7d4      	b.n	8000bb0 <HAL_GPIO_Init+0x14c>
 8000c06:	2501      	movs	r5, #1
 8000c08:	e7d2      	b.n	8000bb0 <HAL_GPIO_Init+0x14c>
 8000c0a:	2502      	movs	r5, #2
 8000c0c:	e7d0      	b.n	8000bb0 <HAL_GPIO_Init+0x14c>
 8000c0e:	2503      	movs	r5, #3
 8000c10:	e7ce      	b.n	8000bb0 <HAL_GPIO_Init+0x14c>
 8000c12:	2504      	movs	r5, #4
 8000c14:	e7cc      	b.n	8000bb0 <HAL_GPIO_Init+0x14c>
 8000c16:	2505      	movs	r5, #5
 8000c18:	e7ca      	b.n	8000bb0 <HAL_GPIO_Init+0x14c>
 8000c1a:	2506      	movs	r5, #6
 8000c1c:	e7c8      	b.n	8000bb0 <HAL_GPIO_Init+0x14c>
 8000c1e:	2507      	movs	r5, #7
 8000c20:	e7c6      	b.n	8000bb0 <HAL_GPIO_Init+0x14c>
 8000c22:	2508      	movs	r5, #8
 8000c24:	e7c4      	b.n	8000bb0 <HAL_GPIO_Init+0x14c>
 8000c26:	bf00      	nop
 8000c28:	40013c00 	.word	0x40013c00
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40021400 	.word	0x40021400

08000c38 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c38:	6903      	ldr	r3, [r0, #16]
 8000c3a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000c3c:	bf14      	ite	ne
 8000c3e:	2001      	movne	r0, #1
 8000c40:	2000      	moveq	r0, #0
 8000c42:	4770      	bx	lr

08000c44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c44:	b10a      	cbz	r2, 8000c4a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c46:	6181      	str	r1, [r0, #24]
 8000c48:	4770      	bx	lr
 8000c4a:	0409      	lsls	r1, r1, #16
 8000c4c:	e7fb      	b.n	8000c46 <HAL_GPIO_WritePin+0x2>
	...

08000c50 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c50:	4a02      	ldr	r2, [pc, #8]	; (8000c5c <HAL_PWR_EnableBkUpAccess+0xc>)
 8000c52:	6813      	ldr	r3, [r2, #0]
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4770      	bx	lr
 8000c5c:	40007000 	.word	0x40007000

08000c60 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8000c60:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Enable Backup regulator */
  PWR->CSR1 |= PWR_CSR1_BRE;
 8000c62:	4c0c      	ldr	r4, [pc, #48]	; (8000c94 <HAL_PWREx_EnableBkUpReg+0x34>)
 8000c64:	6863      	ldr	r3, [r4, #4]
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6063      	str	r3, [r4, #4]
    
  /* Workaround for the following hardware bug: */
  /* Id 19: PWR : No STANDBY wake-up when Back-up RAM enabled (ref. Errata Sheet p23) */
  PWR->CSR1 |= PWR_CSR1_EIWUP;
 8000c6c:	6863      	ldr	r3, [r4, #4]
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c72:	6063      	str	r3, [r4, #4]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c74:	f7ff fd00 	bl	8000678 <HAL_GetTick>
 8000c78:	4605      	mov	r5, r0

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8000c7a:	6863      	ldr	r3, [r4, #4]
 8000c7c:	071b      	lsls	r3, r3, #28
 8000c7e:	d501      	bpl.n	8000c84 <HAL_PWREx_EnableBkUpReg+0x24>
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    } 
  }
  return HAL_OK;
 8000c80:	2000      	movs	r0, #0
 8000c82:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8000c84:	f7ff fcf8 	bl	8000678 <HAL_GetTick>
 8000c88:	1b40      	subs	r0, r0, r5
 8000c8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c8e:	d9f4      	bls.n	8000c7a <HAL_PWREx_EnableBkUpReg+0x1a>
      return HAL_TIMEOUT;
 8000c90:	2003      	movs	r0, #3
}
 8000c92:	bd38      	pop	{r3, r4, r5, pc}
 8000c94:	40007000 	.word	0x40007000

08000c98 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000c9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c9e:	4c19      	ldr	r4, [pc, #100]	; (8000d04 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cb8:	f7ff fcde 	bl	8000678 <HAL_GetTick>
 8000cbc:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cbe:	6863      	ldr	r3, [r4, #4]
 8000cc0:	03da      	lsls	r2, r3, #15
 8000cc2:	d50c      	bpl.n	8000cde <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000cc4:	6823      	ldr	r3, [r4, #0]
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cca:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ccc:	f7ff fcd4 	bl	8000678 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000cd0:	4c0c      	ldr	r4, [pc, #48]	; (8000d04 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000cd2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000cd4:	6863      	ldr	r3, [r4, #4]
 8000cd6:	039b      	lsls	r3, r3, #14
 8000cd8:	d50a      	bpl.n	8000cf0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000cda:	2000      	movs	r0, #0
 8000cdc:	e006      	b.n	8000cec <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cde:	f7ff fccb 	bl	8000678 <HAL_GetTick>
 8000ce2:	1b40      	subs	r0, r0, r5
 8000ce4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ce8:	d9e9      	bls.n	8000cbe <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000cea:	2003      	movs	r0, #3
}
 8000cec:	b003      	add	sp, #12
 8000cee:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cf0:	f7ff fcc2 	bl	8000678 <HAL_GetTick>
 8000cf4:	1b40      	subs	r0, r0, r5
 8000cf6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000cfa:	d9eb      	bls.n	8000cd4 <HAL_PWREx_EnableOverDrive+0x3c>
 8000cfc:	e7f5      	b.n	8000cea <HAL_PWREx_EnableOverDrive+0x52>
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40007000 	.word	0x40007000

08000d08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	b918      	cbnz	r0, 8000d18 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000d10:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000d12:	b002      	add	sp, #8
 8000d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d18:	6803      	ldr	r3, [r0, #0]
 8000d1a:	07d8      	lsls	r0, r3, #31
 8000d1c:	d410      	bmi.n	8000d40 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	0799      	lsls	r1, r3, #30
 8000d22:	d45e      	bmi.n	8000de2 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	0719      	lsls	r1, r3, #28
 8000d28:	f100 80a3 	bmi.w	8000e72 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d2c:	6823      	ldr	r3, [r4, #0]
 8000d2e:	075a      	lsls	r2, r3, #29
 8000d30:	f100 80c4 	bmi.w	8000ebc <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d34:	69a2      	ldr	r2, [r4, #24]
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	f040 812e 	bne.w	8000f98 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	e7e8      	b.n	8000d12 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d40:	4b93      	ldr	r3, [pc, #588]	; (8000f90 <HAL_RCC_OscConfig+0x288>)
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	f002 020c 	and.w	r2, r2, #12
 8000d48:	2a04      	cmp	r2, #4
 8000d4a:	d007      	beq.n	8000d5c <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	f002 020c 	and.w	r2, r2, #12
 8000d52:	2a08      	cmp	r2, #8
 8000d54:	d10a      	bne.n	8000d6c <HAL_RCC_OscConfig+0x64>
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	025a      	lsls	r2, r3, #9
 8000d5a:	d507      	bpl.n	8000d6c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	4b8c      	ldr	r3, [pc, #560]	; (8000f90 <HAL_RCC_OscConfig+0x288>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	039b      	lsls	r3, r3, #14
 8000d62:	d5dc      	bpl.n	8000d1e <HAL_RCC_OscConfig+0x16>
 8000d64:	6863      	ldr	r3, [r4, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1d9      	bne.n	8000d1e <HAL_RCC_OscConfig+0x16>
 8000d6a:	e7d1      	b.n	8000d10 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6c:	6863      	ldr	r3, [r4, #4]
 8000d6e:	4d88      	ldr	r5, [pc, #544]	; (8000f90 <HAL_RCC_OscConfig+0x288>)
 8000d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d74:	d111      	bne.n	8000d9a <HAL_RCC_OscConfig+0x92>
 8000d76:	682b      	ldr	r3, [r5, #0]
 8000d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fc7b 	bl	8000678 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d82:	4d83      	ldr	r5, [pc, #524]	; (8000f90 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000d84:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d86:	682b      	ldr	r3, [r5, #0]
 8000d88:	039f      	lsls	r7, r3, #14
 8000d8a:	d4c8      	bmi.n	8000d1e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8c:	f7ff fc74 	bl	8000678 <HAL_GetTick>
 8000d90:	1b80      	subs	r0, r0, r6
 8000d92:	2864      	cmp	r0, #100	; 0x64
 8000d94:	d9f7      	bls.n	8000d86 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000d96:	2003      	movs	r0, #3
 8000d98:	e7bb      	b.n	8000d12 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9a:	b99b      	cbnz	r3, 8000dc4 <HAL_RCC_OscConfig+0xbc>
 8000d9c:	682b      	ldr	r3, [r5, #0]
 8000d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da2:	602b      	str	r3, [r5, #0]
 8000da4:	682b      	ldr	r3, [r5, #0]
 8000da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000daa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dac:	f7ff fc64 	bl	8000678 <HAL_GetTick>
 8000db0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db2:	682b      	ldr	r3, [r5, #0]
 8000db4:	0398      	lsls	r0, r3, #14
 8000db6:	d5b2      	bpl.n	8000d1e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fc5e 	bl	8000678 <HAL_GetTick>
 8000dbc:	1b80      	subs	r0, r0, r6
 8000dbe:	2864      	cmp	r0, #100	; 0x64
 8000dc0:	d9f7      	bls.n	8000db2 <HAL_RCC_OscConfig+0xaa>
 8000dc2:	e7e8      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dc8:	682b      	ldr	r3, [r5, #0]
 8000dca:	d103      	bne.n	8000dd4 <HAL_RCC_OscConfig+0xcc>
 8000dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd0:	602b      	str	r3, [r5, #0]
 8000dd2:	e7d0      	b.n	8000d76 <HAL_RCC_OscConfig+0x6e>
 8000dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd8:	602b      	str	r3, [r5, #0]
 8000dda:	682b      	ldr	r3, [r5, #0]
 8000ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de0:	e7cc      	b.n	8000d7c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000de2:	4b6b      	ldr	r3, [pc, #428]	; (8000f90 <HAL_RCC_OscConfig+0x288>)
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	f012 0f0c 	tst.w	r2, #12
 8000dea:	d007      	beq.n	8000dfc <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	f002 020c 	and.w	r2, r2, #12
 8000df2:	2a08      	cmp	r2, #8
 8000df4:	d111      	bne.n	8000e1a <HAL_RCC_OscConfig+0x112>
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	0259      	lsls	r1, r3, #9
 8000dfa:	d40e      	bmi.n	8000e1a <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfc:	4b64      	ldr	r3, [pc, #400]	; (8000f90 <HAL_RCC_OscConfig+0x288>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	0792      	lsls	r2, r2, #30
 8000e02:	d502      	bpl.n	8000e0a <HAL_RCC_OscConfig+0x102>
 8000e04:	68e2      	ldr	r2, [r4, #12]
 8000e06:	2a01      	cmp	r2, #1
 8000e08:	d182      	bne.n	8000d10 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	6921      	ldr	r1, [r4, #16]
 8000e0e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e12:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000e16:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e18:	e784      	b.n	8000d24 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e1a:	68e3      	ldr	r3, [r4, #12]
 8000e1c:	4d5c      	ldr	r5, [pc, #368]	; (8000f90 <HAL_RCC_OscConfig+0x288>)
 8000e1e:	b1bb      	cbz	r3, 8000e50 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000e20:	682b      	ldr	r3, [r5, #0]
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e28:	f7ff fc26 	bl	8000678 <HAL_GetTick>
 8000e2c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2e:	682b      	ldr	r3, [r5, #0]
 8000e30:	079f      	lsls	r7, r3, #30
 8000e32:	d507      	bpl.n	8000e44 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e34:	682b      	ldr	r3, [r5, #0]
 8000e36:	6922      	ldr	r2, [r4, #16]
 8000e38:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e3c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e40:	602b      	str	r3, [r5, #0]
 8000e42:	e76f      	b.n	8000d24 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e44:	f7ff fc18 	bl	8000678 <HAL_GetTick>
 8000e48:	1b80      	subs	r0, r0, r6
 8000e4a:	2802      	cmp	r0, #2
 8000e4c:	d9ef      	bls.n	8000e2e <HAL_RCC_OscConfig+0x126>
 8000e4e:	e7a2      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000e50:	682b      	ldr	r3, [r5, #0]
 8000e52:	f023 0301 	bic.w	r3, r3, #1
 8000e56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e58:	f7ff fc0e 	bl	8000678 <HAL_GetTick>
 8000e5c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e5e:	682b      	ldr	r3, [r5, #0]
 8000e60:	0798      	lsls	r0, r3, #30
 8000e62:	f57f af5f 	bpl.w	8000d24 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e66:	f7ff fc07 	bl	8000678 <HAL_GetTick>
 8000e6a:	1b80      	subs	r0, r0, r6
 8000e6c:	2802      	cmp	r0, #2
 8000e6e:	d9f6      	bls.n	8000e5e <HAL_RCC_OscConfig+0x156>
 8000e70:	e791      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e72:	6963      	ldr	r3, [r4, #20]
 8000e74:	4d46      	ldr	r5, [pc, #280]	; (8000f90 <HAL_RCC_OscConfig+0x288>)
 8000e76:	b183      	cbz	r3, 8000e9a <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000e78:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000e80:	f7ff fbfa 	bl	8000678 <HAL_GetTick>
 8000e84:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e86:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e88:	079b      	lsls	r3, r3, #30
 8000e8a:	f53f af4f 	bmi.w	8000d2c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e8e:	f7ff fbf3 	bl	8000678 <HAL_GetTick>
 8000e92:	1b80      	subs	r0, r0, r6
 8000e94:	2802      	cmp	r0, #2
 8000e96:	d9f6      	bls.n	8000e86 <HAL_RCC_OscConfig+0x17e>
 8000e98:	e77d      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000e9a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fbe9 	bl	8000678 <HAL_GetTick>
 8000ea6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000eaa:	079f      	lsls	r7, r3, #30
 8000eac:	f57f af3e 	bpl.w	8000d2c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fbe2 	bl	8000678 <HAL_GetTick>
 8000eb4:	1b80      	subs	r0, r0, r6
 8000eb6:	2802      	cmp	r0, #2
 8000eb8:	d9f6      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x1a0>
 8000eba:	e76c      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <HAL_RCC_OscConfig+0x288>)
 8000ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec0:	00d0      	lsls	r0, r2, #3
 8000ec2:	d427      	bmi.n	8000f14 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000ec6:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ed8:	4d2e      	ldr	r5, [pc, #184]	; (8000f94 <HAL_RCC_OscConfig+0x28c>)
 8000eda:	682b      	ldr	r3, [r5, #0]
 8000edc:	05d9      	lsls	r1, r3, #23
 8000ede:	d51b      	bpl.n	8000f18 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee0:	68a3      	ldr	r3, [r4, #8]
 8000ee2:	4d2b      	ldr	r5, [pc, #172]	; (8000f90 <HAL_RCC_OscConfig+0x288>)
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d127      	bne.n	8000f38 <HAL_RCC_OscConfig+0x230>
 8000ee8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef0:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ef4:	f7ff fbc0 	bl	8000678 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef8:	4f25      	ldr	r7, [pc, #148]	; (8000f90 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000efa:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000efe:	079b      	lsls	r3, r3, #30
 8000f00:	d53f      	bpl.n	8000f82 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	f43f af16 	beq.w	8000d34 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f08:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <HAL_RCC_OscConfig+0x288>)
 8000f0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	e70f      	b.n	8000d34 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8000f14:	2600      	movs	r6, #0
 8000f16:	e7df      	b.n	8000ed8 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000f20:	f7ff fbaa 	bl	8000678 <HAL_GetTick>
 8000f24:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f26:	682b      	ldr	r3, [r5, #0]
 8000f28:	05da      	lsls	r2, r3, #23
 8000f2a:	d4d9      	bmi.n	8000ee0 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f2c:	f7ff fba4 	bl	8000678 <HAL_GetTick>
 8000f30:	1bc0      	subs	r0, r0, r7
 8000f32:	2864      	cmp	r0, #100	; 0x64
 8000f34:	d9f7      	bls.n	8000f26 <HAL_RCC_OscConfig+0x21e>
 8000f36:	e72e      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f38:	b9ab      	cbnz	r3, 8000f66 <HAL_RCC_OscConfig+0x25e>
 8000f3a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f3c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	672b      	str	r3, [r5, #112]	; 0x70
 8000f46:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f48:	f023 0304 	bic.w	r3, r3, #4
 8000f4c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fb93 	bl	8000678 <HAL_GetTick>
 8000f52:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f56:	0798      	lsls	r0, r3, #30
 8000f58:	d5d3      	bpl.n	8000f02 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f5a:	f7ff fb8d 	bl	8000678 <HAL_GetTick>
 8000f5e:	1bc0      	subs	r0, r0, r7
 8000f60:	4540      	cmp	r0, r8
 8000f62:	d9f7      	bls.n	8000f54 <HAL_RCC_OscConfig+0x24c>
 8000f64:	e717      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f6a:	d103      	bne.n	8000f74 <HAL_RCC_OscConfig+0x26c>
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	672b      	str	r3, [r5, #112]	; 0x70
 8000f72:	e7b9      	b.n	8000ee8 <HAL_RCC_OscConfig+0x1e0>
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	672b      	str	r3, [r5, #112]	; 0x70
 8000f7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f7c:	f023 0304 	bic.w	r3, r3, #4
 8000f80:	e7b5      	b.n	8000eee <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f82:	f7ff fb79 	bl	8000678 <HAL_GetTick>
 8000f86:	eba0 0008 	sub.w	r0, r0, r8
 8000f8a:	42a8      	cmp	r0, r5
 8000f8c:	d9b6      	bls.n	8000efc <HAL_RCC_OscConfig+0x1f4>
 8000f8e:	e702      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f98:	4d24      	ldr	r5, [pc, #144]	; (800102c <HAL_RCC_OscConfig+0x324>)
 8000f9a:	68ab      	ldr	r3, [r5, #8]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	f43f aeb5 	beq.w	8000d10 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8000fa6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fa8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fae:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb0:	d12f      	bne.n	8001012 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fb61 	bl	8000678 <HAL_GetTick>
 8000fb6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fb8:	682b      	ldr	r3, [r5, #0]
 8000fba:	0199      	lsls	r1, r3, #6
 8000fbc:	d423      	bmi.n	8001006 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fbe:	6a22      	ldr	r2, [r4, #32]
 8000fc0:	69e3      	ldr	r3, [r4, #28]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fc6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000fca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000fcc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000fd0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000fd2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000fd6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd8:	4c14      	ldr	r4, [pc, #80]	; (800102c <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fda:	0852      	lsrs	r2, r2, #1
 8000fdc:	3a01      	subs	r2, #1
 8000fde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fe2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fe4:	682b      	ldr	r3, [r5, #0]
 8000fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fec:	f7ff fb44 	bl	8000678 <HAL_GetTick>
 8000ff0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	019a      	lsls	r2, r3, #6
 8000ff6:	f53f aea1 	bmi.w	8000d3c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ffa:	f7ff fb3d 	bl	8000678 <HAL_GetTick>
 8000ffe:	1b40      	subs	r0, r0, r5
 8001000:	2802      	cmp	r0, #2
 8001002:	d9f6      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x2ea>
 8001004:	e6c7      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001006:	f7ff fb37 	bl	8000678 <HAL_GetTick>
 800100a:	1b80      	subs	r0, r0, r6
 800100c:	2802      	cmp	r0, #2
 800100e:	d9d3      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x2b0>
 8001010:	e6c1      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001012:	f7ff fb31 	bl	8000678 <HAL_GetTick>
 8001016:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001018:	682b      	ldr	r3, [r5, #0]
 800101a:	019b      	lsls	r3, r3, #6
 800101c:	f57f ae8e 	bpl.w	8000d3c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001020:	f7ff fb2a 	bl	8000678 <HAL_GetTick>
 8001024:	1b00      	subs	r0, r0, r4
 8001026:	2802      	cmp	r0, #2
 8001028:	d9f6      	bls.n	8001018 <HAL_RCC_OscConfig+0x310>
 800102a:	e6b4      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001030:	4913      	ldr	r1, [pc, #76]	; (8001080 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001032:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001034:	688b      	ldr	r3, [r1, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b04      	cmp	r3, #4
 800103c:	d003      	beq.n	8001046 <HAL_RCC_GetSysClockFreq+0x16>
 800103e:	2b08      	cmp	r3, #8
 8001040:	d003      	beq.n	800104a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001042:	4810      	ldr	r0, [pc, #64]	; (8001084 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001044:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001046:	4810      	ldr	r0, [pc, #64]	; (8001088 <HAL_RCC_GetSysClockFreq+0x58>)
 8001048:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800104a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800104c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800104e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001050:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001054:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001058:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800105c:	bf1a      	itte	ne
 800105e:	480a      	ldrne	r0, [pc, #40]	; (8001088 <HAL_RCC_GetSysClockFreq+0x58>)
 8001060:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001062:	4808      	ldreq	r0, [pc, #32]	; (8001084 <HAL_RCC_GetSysClockFreq+0x54>)
 8001064:	fba1 0100 	umull	r0, r1, r1, r0
 8001068:	f7ff f942 	bl	80002f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HAL_RCC_GetSysClockFreq+0x50>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001074:	3301      	adds	r3, #1
 8001076:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001078:	fbb0 f0f3 	udiv	r0, r0, r3
 800107c:	bd08      	pop	{r3, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	00f42400 	.word	0x00f42400
 8001088:	007a1200 	.word	0x007a1200

0800108c <HAL_RCC_ClockConfig>:
{
 800108c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001090:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001092:	4604      	mov	r4, r0
 8001094:	b910      	cbnz	r0, 800109c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
 8001098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800109c:	4a46      	ldr	r2, [pc, #280]	; (80011b8 <HAL_RCC_ClockConfig+0x12c>)
 800109e:	6813      	ldr	r3, [r2, #0]
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	428b      	cmp	r3, r1
 80010a6:	d328      	bcc.n	80010fa <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a8:	6821      	ldr	r1, [r4, #0]
 80010aa:	078f      	lsls	r7, r1, #30
 80010ac:	d430      	bmi.n	8001110 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ae:	07c8      	lsls	r0, r1, #31
 80010b0:	d443      	bmi.n	800113a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010b2:	4a41      	ldr	r2, [pc, #260]	; (80011b8 <HAL_RCC_ClockConfig+0x12c>)
 80010b4:	6813      	ldr	r3, [r2, #0]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	429d      	cmp	r5, r3
 80010bc:	d367      	bcc.n	800118e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010be:	6822      	ldr	r2, [r4, #0]
 80010c0:	0751      	lsls	r1, r2, #29
 80010c2:	d470      	bmi.n	80011a6 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c4:	0713      	lsls	r3, r2, #28
 80010c6:	d507      	bpl.n	80010d8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010c8:	4a3c      	ldr	r2, [pc, #240]	; (80011bc <HAL_RCC_ClockConfig+0x130>)
 80010ca:	6921      	ldr	r1, [r4, #16]
 80010cc:	6893      	ldr	r3, [r2, #8]
 80010ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010d6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010d8:	f7ff ffaa 	bl	8001030 <HAL_RCC_GetSysClockFreq>
 80010dc:	4b37      	ldr	r3, [pc, #220]	; (80011bc <HAL_RCC_ClockConfig+0x130>)
 80010de:	4a38      	ldr	r2, [pc, #224]	; (80011c0 <HAL_RCC_ClockConfig+0x134>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010e6:	5cd3      	ldrb	r3, [r2, r3]
 80010e8:	40d8      	lsrs	r0, r3
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <HAL_RCC_ClockConfig+0x138>)
 80010ec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff fa86 	bl	8000600 <HAL_InitTick>
  return HAL_OK;
 80010f4:	2000      	movs	r0, #0
 80010f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	6813      	ldr	r3, [r2, #0]
 80010fc:	f023 030f 	bic.w	r3, r3, #15
 8001100:	430b      	orrs	r3, r1
 8001102:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001104:	6813      	ldr	r3, [r2, #0]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	4299      	cmp	r1, r3
 800110c:	d1c3      	bne.n	8001096 <HAL_RCC_ClockConfig+0xa>
 800110e:	e7cb      	b.n	80010a8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001110:	f011 0f04 	tst.w	r1, #4
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <HAL_RCC_ClockConfig+0x130>)
 8001116:	d003      	beq.n	8001120 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800111e:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001120:	070e      	lsls	r6, r1, #28
 8001122:	d503      	bpl.n	800112c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800112a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	68a0      	ldr	r0, [r4, #8]
 8001130:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001134:	4302      	orrs	r2, r0
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	e7b9      	b.n	80010ae <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113a:	6861      	ldr	r1, [r4, #4]
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_RCC_ClockConfig+0x130>)
 800113e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001140:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001142:	d11c      	bne.n	800117e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001144:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001148:	d0a5      	beq.n	8001096 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800114a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800114c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001150:	4e1a      	ldr	r6, [pc, #104]	; (80011bc <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001152:	f022 0203 	bic.w	r2, r2, #3
 8001156:	430a      	orrs	r2, r1
 8001158:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800115a:	f7ff fa8d 	bl	8000678 <HAL_GetTick>
 800115e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001160:	68b3      	ldr	r3, [r6, #8]
 8001162:	6862      	ldr	r2, [r4, #4]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800116c:	d0a1      	beq.n	80010b2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800116e:	f7ff fa83 	bl	8000678 <HAL_GetTick>
 8001172:	1bc0      	subs	r0, r0, r7
 8001174:	4540      	cmp	r0, r8
 8001176:	d9f3      	bls.n	8001160 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001178:	2003      	movs	r0, #3
}
 800117a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800117e:	2902      	cmp	r1, #2
 8001180:	d102      	bne.n	8001188 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001182:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001186:	e7df      	b.n	8001148 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	f012 0f02 	tst.w	r2, #2
 800118c:	e7dc      	b.n	8001148 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118e:	6813      	ldr	r3, [r2, #0]
 8001190:	f023 030f 	bic.w	r3, r3, #15
 8001194:	432b      	orrs	r3, r5
 8001196:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001198:	6813      	ldr	r3, [r2, #0]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	429d      	cmp	r5, r3
 80011a0:	f47f af79 	bne.w	8001096 <HAL_RCC_ClockConfig+0xa>
 80011a4:	e78b      	b.n	80010be <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a6:	4905      	ldr	r1, [pc, #20]	; (80011bc <HAL_RCC_ClockConfig+0x130>)
 80011a8:	68e0      	ldr	r0, [r4, #12]
 80011aa:	688b      	ldr	r3, [r1, #8]
 80011ac:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80011b0:	4303      	orrs	r3, r0
 80011b2:	608b      	str	r3, [r1, #8]
 80011b4:	e786      	b.n	80010c4 <HAL_RCC_ClockConfig+0x38>
 80011b6:	bf00      	nop
 80011b8:	40023c00 	.word	0x40023c00
 80011bc:	40023800 	.word	0x40023800
 80011c0:	08009634 	.word	0x08009634
 80011c4:	20000020 	.word	0x20000020

080011c8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80011c8:	4b01      	ldr	r3, [pc, #4]	; (80011d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000020 	.word	0x20000020

080011d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80011d8:	6802      	ldr	r2, [r0, #0]
{
 80011da:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80011dc:	f012 0601 	ands.w	r6, r2, #1
 80011e0:	d00b      	beq.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80011e2:	4bba      	ldr	r3, [pc, #744]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80011e4:	6899      	ldr	r1, [r3, #8]
 80011e6:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80011ea:	6099      	str	r1, [r3, #8]
 80011ec:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80011ee:	6899      	ldr	r1, [r3, #8]
 80011f0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80011f2:	fab6 f686 	clz	r6, r6
 80011f6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80011f8:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80011fa:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80011fe:	d012      	beq.n	8001226 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001200:	49b2      	ldr	r1, [pc, #712]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001202:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001204:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001208:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800120c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001210:	bf08      	it	eq
 8001212:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001214:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001218:	bf16      	itet	ne
 800121a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800121e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001220:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001222:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001226:	02d7      	lsls	r7, r2, #11
 8001228:	d510      	bpl.n	800124c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800122a:	48a8      	ldr	r0, [pc, #672]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800122c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800122e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001232:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001236:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800123a:	ea43 0301 	orr.w	r3, r3, r1
 800123e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001242:	f000 81a9 	beq.w	8001598 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001246:	2900      	cmp	r1, #0
 8001248:	bf08      	it	eq
 800124a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800124c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001250:	bf18      	it	ne
 8001252:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001254:	0690      	lsls	r0, r2, #26
 8001256:	d531      	bpl.n	80012bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	4b9c      	ldr	r3, [pc, #624]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800125a:	4f9d      	ldr	r7, [pc, #628]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800125e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001262:	641a      	str	r2, [r3, #64]	; 0x40
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001274:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001276:	f7ff f9ff 	bl	8000678 <HAL_GetTick>
 800127a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	05d9      	lsls	r1, r3, #23
 8001280:	f140 818c 	bpl.w	800159c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001284:	4f91      	ldr	r7, [pc, #580]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001286:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001288:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800128c:	f040 8191 	bne.w	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001290:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001292:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001296:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800129a:	4a8c      	ldr	r2, [pc, #560]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800129c:	f040 81af 	bne.w	80015fe <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80012a0:	6891      	ldr	r1, [r2, #8]
 80012a2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80012a6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80012aa:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80012ae:	4301      	orrs	r1, r0
 80012b0:	6091      	str	r1, [r2, #8]
 80012b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80012b8:	430b      	orrs	r3, r1
 80012ba:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	06df      	lsls	r7, r3, #27
 80012c0:	d50c      	bpl.n	80012dc <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80012c2:	4a82      	ldr	r2, [pc, #520]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80012c4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80012c8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80012cc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80012d0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80012d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80012d6:	4301      	orrs	r1, r0
 80012d8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80012dc:	0458      	lsls	r0, r3, #17
 80012de:	d508      	bpl.n	80012f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012e0:	497a      	ldr	r1, [pc, #488]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80012e2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80012e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012e8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80012ec:	4302      	orrs	r2, r0
 80012ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80012f2:	0419      	lsls	r1, r3, #16
 80012f4:	d508      	bpl.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80012f6:	4975      	ldr	r1, [pc, #468]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80012f8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80012fa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012fe:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001302:	4302      	orrs	r2, r0
 8001304:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001308:	03da      	lsls	r2, r3, #15
 800130a:	d508      	bpl.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800130c:	496f      	ldr	r1, [pc, #444]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800130e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001310:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001314:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001318:	4302      	orrs	r2, r0
 800131a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800131e:	039f      	lsls	r7, r3, #14
 8001320:	d508      	bpl.n	8001334 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001322:	496a      	ldr	r1, [pc, #424]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001324:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001326:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800132a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800132e:	4302      	orrs	r2, r0
 8001330:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001334:	0658      	lsls	r0, r3, #25
 8001336:	d508      	bpl.n	800134a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001338:	4964      	ldr	r1, [pc, #400]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800133a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800133c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001340:	f022 0203 	bic.w	r2, r2, #3
 8001344:	4302      	orrs	r2, r0
 8001346:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800134a:	0619      	lsls	r1, r3, #24
 800134c:	d508      	bpl.n	8001360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800134e:	495f      	ldr	r1, [pc, #380]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001350:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001352:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001356:	f022 020c 	bic.w	r2, r2, #12
 800135a:	4302      	orrs	r2, r0
 800135c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001360:	05da      	lsls	r2, r3, #23
 8001362:	d508      	bpl.n	8001376 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001364:	4959      	ldr	r1, [pc, #356]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001366:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001368:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800136c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001370:	4302      	orrs	r2, r0
 8001372:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001376:	059f      	lsls	r7, r3, #22
 8001378:	d508      	bpl.n	800138c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800137a:	4954      	ldr	r1, [pc, #336]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800137c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800137e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001382:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001386:	4302      	orrs	r2, r0
 8001388:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800138c:	0558      	lsls	r0, r3, #21
 800138e:	d508      	bpl.n	80013a2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001390:	494e      	ldr	r1, [pc, #312]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001392:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001394:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001398:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800139c:	4302      	orrs	r2, r0
 800139e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80013a2:	0519      	lsls	r1, r3, #20
 80013a4:	d508      	bpl.n	80013b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80013a6:	4949      	ldr	r1, [pc, #292]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80013b2:	4302      	orrs	r2, r0
 80013b4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80013b8:	04da      	lsls	r2, r3, #19
 80013ba:	d508      	bpl.n	80013ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80013bc:	4943      	ldr	r1, [pc, #268]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013be:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80013c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80013c8:	4302      	orrs	r2, r0
 80013ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80013ce:	049f      	lsls	r7, r3, #18
 80013d0:	d508      	bpl.n	80013e4 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80013d2:	493e      	ldr	r1, [pc, #248]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013d4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80013d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80013de:	4302      	orrs	r2, r0
 80013e0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80013e4:	0258      	lsls	r0, r3, #9
 80013e6:	d508      	bpl.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80013e8:	4938      	ldr	r1, [pc, #224]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013ea:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80013ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013f0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80013f4:	4302      	orrs	r2, r0
 80013f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80013fa:	0299      	lsls	r1, r3, #10
 80013fc:	d50c      	bpl.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80013fe:	4833      	ldr	r0, [pc, #204]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001400:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001402:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001406:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800140a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800140e:	bf08      	it	eq
 8001410:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001412:	430a      	orrs	r2, r1
 8001414:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001418:	f013 0f08 	tst.w	r3, #8
 800141c:	bf18      	it	ne
 800141e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001420:	035a      	lsls	r2, r3, #13
 8001422:	d508      	bpl.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001424:	4929      	ldr	r1, [pc, #164]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001426:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001428:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800142c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001430:	4302      	orrs	r2, r0
 8001432:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001436:	021f      	lsls	r7, r3, #8
 8001438:	d509      	bpl.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800143a:	4924      	ldr	r1, [pc, #144]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800143c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001440:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001444:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001448:	4302      	orrs	r2, r0
 800144a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800144e:	0158      	lsls	r0, r3, #5
 8001450:	d509      	bpl.n	8001466 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001452:	491e      	ldr	r1, [pc, #120]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001454:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001458:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800145c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001460:	4302      	orrs	r2, r0
 8001462:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001466:	0119      	lsls	r1, r3, #4
 8001468:	d509      	bpl.n	800147e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800146a:	4918      	ldr	r1, [pc, #96]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800146c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001470:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001474:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001478:	4302      	orrs	r2, r0
 800147a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800147e:	00da      	lsls	r2, r3, #3
 8001480:	d509      	bpl.n	8001496 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001482:	4912      	ldr	r1, [pc, #72]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001484:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001488:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800148c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001490:	4302      	orrs	r2, r0
 8001492:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001496:	2e01      	cmp	r6, #1
 8001498:	f000 80b5 	beq.w	8001606 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800149c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014a0:	f000 80b1 	beq.w	8001606 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80014a4:	2d01      	cmp	r5, #1
 80014a6:	d175      	bne.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80014a8:	4d08      	ldr	r5, [pc, #32]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014aa:	682b      	ldr	r3, [r5, #0]
 80014ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b0:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014b2:	f7ff f8e1 	bl	8000678 <HAL_GetTick>
 80014b6:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80014b8:	682b      	ldr	r3, [r5, #0]
 80014ba:	009f      	lsls	r7, r3, #2
 80014bc:	f100 8127 	bmi.w	800170e <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80014c0:	6821      	ldr	r1, [r4, #0]
 80014c2:	030e      	lsls	r6, r1, #12
 80014c4:	d506      	bpl.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80014c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014c8:	b143      	cbz	r3, 80014dc <HAL_RCCEx_PeriphCLKConfig+0x308>
 80014ca:	e003      	b.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40007000 	.word	0x40007000
 80014d4:	02cd      	lsls	r5, r1, #11
 80014d6:	d51d      	bpl.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80014d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014da:	b9db      	cbnz	r3, 8001514 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80014dc:	4a93      	ldr	r2, [pc, #588]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80014de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80014e2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80014e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ea:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80014ee:	4303      	orrs	r3, r0
 80014f0:	6960      	ldr	r0, [r4, #20]
 80014f2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80014f6:	69a0      	ldr	r0, [r4, #24]
 80014f8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001500:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001504:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001506:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800150a:	3801      	subs	r0, #1
 800150c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001510:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001514:	0288      	lsls	r0, r1, #10
 8001516:	d515      	bpl.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001518:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800151a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800151e:	d111      	bne.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001520:	4a82      	ldr	r2, [pc, #520]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001522:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001526:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800152a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800152e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001532:	4303      	orrs	r3, r0
 8001534:	6960      	ldr	r0, [r4, #20]
 8001536:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800153a:	6a20      	ldr	r0, [r4, #32]
 800153c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001544:	070a      	lsls	r2, r1, #28
 8001546:	d519      	bpl.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001548:	4978      	ldr	r1, [pc, #480]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800154a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800154e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001552:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001556:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155a:	4313      	orrs	r3, r2
 800155c:	6962      	ldr	r2, [r4, #20]
 800155e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001562:	69e2      	ldr	r2, [r4, #28]
 8001564:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800156c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001570:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001572:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001576:	4313      	orrs	r3, r2
 8001578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800157c:	4c6b      	ldr	r4, [pc, #428]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001586:	f7ff f877 	bl	8000678 <HAL_GetTick>
 800158a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	f140 80c4 	bpl.w	800171c <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001594:	2000      	movs	r0, #0
 8001596:	e009      	b.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001598:	2601      	movs	r6, #1
 800159a:	e657      	b.n	800124c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159c:	f7ff f86c 	bl	8000678 <HAL_GetTick>
 80015a0:	eba0 0008 	sub.w	r0, r0, r8
 80015a4:	2864      	cmp	r0, #100	; 0x64
 80015a6:	f67f ae69 	bls.w	800127c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80015aa:	2003      	movs	r0, #3
}
 80015ac:	b003      	add	sp, #12
 80015ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015b4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80015b8:	4293      	cmp	r3, r2
 80015ba:	f43f ae69 	beq.w	8001290 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80015c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80015c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015ca:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80015ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015d2:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80015d4:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80015d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015d8:	07da      	lsls	r2, r3, #31
 80015da:	f57f ae59 	bpl.w	8001290 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80015de:	f7ff f84b 	bl	8000678 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80015e6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015ea:	079b      	lsls	r3, r3, #30
 80015ec:	f53f ae50 	bmi.w	8001290 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff f842 	bl	8000678 <HAL_GetTick>
 80015f4:	eba0 0008 	sub.w	r0, r0, r8
 80015f8:	4548      	cmp	r0, r9
 80015fa:	d9f5      	bls.n	80015e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80015fc:	e7d5      	b.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015fe:	6891      	ldr	r1, [r2, #8]
 8001600:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001604:	e654      	b.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001606:	4e49      	ldr	r6, [pc, #292]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001608:	6833      	ldr	r3, [r6, #0]
 800160a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800160e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001610:	f7ff f832 	bl	8000678 <HAL_GetTick>
 8001614:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001616:	6833      	ldr	r3, [r6, #0]
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	d472      	bmi.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800161c:	6822      	ldr	r2, [r4, #0]
 800161e:	07d7      	lsls	r7, r2, #31
 8001620:	d512      	bpl.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001622:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001624:	b983      	cbnz	r3, 8001648 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001626:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800162a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800162e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001632:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001636:	430b      	orrs	r3, r1
 8001638:	6861      	ldr	r1, [r4, #4]
 800163a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800163e:	68a1      	ldr	r1, [r4, #8]
 8001640:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001644:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001648:	0316      	lsls	r6, r2, #12
 800164a:	d503      	bpl.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800164c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800164e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001652:	d005      	beq.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001654:	02d0      	lsls	r0, r2, #11
 8001656:	d51e      	bpl.n	8001696 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001658:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800165a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800165e:	d11a      	bne.n	8001696 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001660:	4932      	ldr	r1, [pc, #200]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001662:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001666:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800166a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001672:	4303      	orrs	r3, r0
 8001674:	6860      	ldr	r0, [r4, #4]
 8001676:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800167a:	68e0      	ldr	r0, [r4, #12]
 800167c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001680:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001684:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800168a:	f020 001f 	bic.w	r0, r0, #31
 800168e:	3b01      	subs	r3, #1
 8001690:	4303      	orrs	r3, r0
 8001692:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001696:	01d1      	lsls	r1, r2, #7
 8001698:	d511      	bpl.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800169a:	4924      	ldr	r1, [pc, #144]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800169c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80016a0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80016a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80016a8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80016ac:	4303      	orrs	r3, r0
 80016ae:	6860      	ldr	r0, [r4, #4]
 80016b0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80016b4:	6920      	ldr	r0, [r4, #16]
 80016b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80016ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80016be:	0192      	lsls	r2, r2, #6
 80016c0:	d50d      	bpl.n	80016de <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80016c2:	6923      	ldr	r3, [r4, #16]
 80016c4:	6862      	ldr	r2, [r4, #4]
 80016c6:	041b      	lsls	r3, r3, #16
 80016c8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016cc:	68e2      	ldr	r2, [r4, #12]
 80016ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016d2:	68a2      	ldr	r2, [r4, #8]
 80016d4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80016de:	4e13      	ldr	r6, [pc, #76]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016e0:	6833      	ldr	r3, [r6, #0]
 80016e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016e6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80016e8:	f7fe ffc6 	bl	8000678 <HAL_GetTick>
 80016ec:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80016ee:	6833      	ldr	r3, [r6, #0]
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	f53f aed7 	bmi.w	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80016f6:	f7fe ffbf 	bl	8000678 <HAL_GetTick>
 80016fa:	1bc0      	subs	r0, r0, r7
 80016fc:	2864      	cmp	r0, #100	; 0x64
 80016fe:	d9f6      	bls.n	80016ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001700:	e753      	b.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001702:	f7fe ffb9 	bl	8000678 <HAL_GetTick>
 8001706:	1bc0      	subs	r0, r0, r7
 8001708:	2864      	cmp	r0, #100	; 0x64
 800170a:	d984      	bls.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800170c:	e74d      	b.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800170e:	f7fe ffb3 	bl	8000678 <HAL_GetTick>
 8001712:	1b80      	subs	r0, r0, r6
 8001714:	2864      	cmp	r0, #100	; 0x64
 8001716:	f67f aecf 	bls.w	80014b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800171a:	e746      	b.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800171c:	f7fe ffac 	bl	8000678 <HAL_GetTick>
 8001720:	1b40      	subs	r0, r0, r5
 8001722:	2864      	cmp	r0, #100	; 0x64
 8001724:	f67f af32 	bls.w	800158c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001728:	e73f      	b.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001730:	6803      	ldr	r3, [r0, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800173a:	6842      	ldr	r2, [r0, #4]
 800173c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001740:	d10a      	bne.n	8001758 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8001742:	6882      	ldr	r2, [r0, #8]
 8001744:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001748:	d002      	beq.n	8001750 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800174a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800174e:	d103      	bne.n	8001758 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001758:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800175a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800175e:	d109      	bne.n	8001774 <SPI_WaitFifoStateUntilTimeout.part.1+0x44>
        {
          SPI_RESET_CRC(hspi);
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001766:	0412      	lsls	r2, r2, #16
 8001768:	0c12      	lsrs	r2, r2, #16
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001772:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001774:	2301      	movs	r3, #1
 8001776:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800177a:	2300      	movs	r3, #0
 800177c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8001780:	2003      	movs	r0, #3
 8001782:	4770      	bx	lr

08001784 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	4605      	mov	r5, r0
 8001788:	460c      	mov	r4, r1
 800178a:	4616      	mov	r6, r2
  while ((hspi->Instance->SR & Flag) != State)
 800178c:	682b      	ldr	r3, [r5, #0]
 800178e:	6898      	ldr	r0, [r3, #8]
 8001790:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001794:	d100      	bne.n	8001798 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8001796:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001798:	1c62      	adds	r2, r4, #1
 800179a:	d0f8      	beq.n	800178e <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800179c:	b924      	cbnz	r4, 80017a8 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x24>
 800179e:	4628      	mov	r0, r5
}
 80017a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80017a4:	f7ff bfc4 	b.w	8001730 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80017a8:	f7fe ff66 	bl	8000678 <HAL_GetTick>
 80017ac:	1b80      	subs	r0, r0, r6
 80017ae:	4284      	cmp	r4, r0
 80017b0:	d8ec      	bhi.n	800178c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 80017b2:	e7f4      	b.n	800179e <SPI_WaitFlagStateUntilTimeout.constprop.10+0x1a>

080017b4 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80017b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017b6:	4606      	mov	r6, r0
 80017b8:	460c      	mov	r4, r1
 80017ba:	4615      	mov	r5, r2
 80017bc:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80017be:	6831      	ldr	r1, [r6, #0]
 80017c0:	6888      	ldr	r0, [r1, #8]
 80017c2:	4020      	ands	r0, r4
 80017c4:	d00e      	beq.n	80017e4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80017c6:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80017ca:	d105      	bne.n	80017d8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x24>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80017cc:	7b0a      	ldrb	r2, [r1, #12]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	f88d 2007 	strb.w	r2, [sp, #7]
      UNUSED(tmpreg);
 80017d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 80017d8:	1c6b      	adds	r3, r5, #1
 80017da:	d0f1      	beq.n	80017c0 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80017dc:	b925      	cbnz	r5, 80017e8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 80017de:	4630      	mov	r0, r6
 80017e0:	f7ff ffa6 	bl	8001730 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 80017e4:	b003      	add	sp, #12
 80017e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80017e8:	f7fe ff46 	bl	8000678 <HAL_GetTick>
 80017ec:	1bc0      	subs	r0, r0, r7
 80017ee:	4285      	cmp	r5, r0
 80017f0:	d8e5      	bhi.n	80017be <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 80017f2:	e7f4      	b.n	80017de <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

080017f4 <SPI_EndRxTxTransaction>:
  * @param hspi SPI handle
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80017f4:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80017f6:	4613      	mov	r3, r2
{
 80017f8:	460d      	mov	r5, r1
 80017fa:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80017fc:	460a      	mov	r2, r1
 80017fe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8001802:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001804:	f7ff ffd6 	bl	80017b4 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001808:	b128      	cbz	r0, 8001816 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800180a:	6e23      	ldr	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800180c:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800180e:	f043 0320 	orr.w	r3, r3, #32
 8001812:	6623      	str	r3, [r4, #96]	; 0x60
 8001814:	e00f      	b.n	8001836 <SPI_EndRxTxTransaction+0x42>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001816:	4632      	mov	r2, r6
 8001818:	4629      	mov	r1, r5
 800181a:	4620      	mov	r0, r4
 800181c:	f7ff ffb2 	bl	8001784 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001820:	2800      	cmp	r0, #0
 8001822:	d1f2      	bne.n	800180a <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001824:	4633      	mov	r3, r6
 8001826:	462a      	mov	r2, r5
 8001828:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff ffc1 	bl	80017b4 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001832:	2800      	cmp	r0, #0
 8001834:	d1e9      	bne.n	800180a <SPI_EndRxTxTransaction+0x16>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8001836:	bd70      	pop	{r4, r5, r6, pc}

08001838 <HAL_SPI_Init>:
{
 8001838:	b570      	push	{r4, r5, r6, lr}
 800183a:	4604      	mov	r4, r0
	printf("SPI Init\n");
 800183c:	482b      	ldr	r0, [pc, #172]	; (80018ec <HAL_SPI_Init+0xb4>)
 800183e:	f003 feb5 	bl	80055ac <puts>
  if (hspi == NULL)
 8001842:	2c00      	cmp	r4, #0
 8001844:	d04f      	beq.n	80018e6 <HAL_SPI_Init+0xae>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800184a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800184e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001852:	b923      	cbnz	r3, 800185e <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8001854:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001858:	4620      	mov	r0, r4
 800185a:	f002 fe55 	bl	8004508 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800185e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001860:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001862:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001864:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001868:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800186a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800186e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001878:	d932      	bls.n	80018e0 <HAL_SPI_Init+0xa8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800187a:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800187c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001880:	bf18      	it	ne
 8001882:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001884:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001886:	b92b      	cbnz	r3, 8001894 <HAL_SPI_Init+0x5c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001888:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800188c:	bf8c      	ite	hi
 800188e:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001890:	2301      	movls	r3, #1
 8001892:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001894:	68a6      	ldr	r6, [r4, #8]
 8001896:	6863      	ldr	r3, [r4, #4]
 8001898:	69a5      	ldr	r5, [r4, #24]
 800189a:	4333      	orrs	r3, r6
 800189c:	6926      	ldr	r6, [r4, #16]
 800189e:	4333      	orrs	r3, r6
 80018a0:	6966      	ldr	r6, [r4, #20]
 80018a2:	4333      	orrs	r3, r6
 80018a4:	69e6      	ldr	r6, [r4, #28]
 80018a6:	4333      	orrs	r3, r6
 80018a8:	6a26      	ldr	r6, [r4, #32]
 80018aa:	4333      	orrs	r3, r6
 80018ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80018ae:	4333      	orrs	r3, r6
 80018b0:	f405 7600 	and.w	r6, r5, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80018b4:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80018b6:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80018b8:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80018bc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80018be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018c0:	431a      	orrs	r2, r3
 80018c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80018c4:	431a      	orrs	r2, r3
 80018c6:	432a      	orrs	r2, r5
 80018c8:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018ca:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80018cc:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018ce:	69cb      	ldr	r3, [r1, #28]
 80018d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018d4:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80018d6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018d8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80018da:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80018de:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80018e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018e4:	e7cc      	b.n	8001880 <HAL_SPI_Init+0x48>
    return HAL_ERROR;
 80018e6:	2001      	movs	r0, #1
}
 80018e8:	bd70      	pop	{r4, r5, r6, pc}
 80018ea:	bf00      	nop
 80018ec:	080091f0 	.word	0x080091f0

080018f0 <HAL_SPI_Transmit>:
{
 80018f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80018f4:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80018f6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80018fa:	4604      	mov	r4, r0
 80018fc:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 80018fe:	2b01      	cmp	r3, #1
{
 8001900:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001902:	f000 8097 	beq.w	8001a34 <HAL_SPI_Transmit+0x144>
 8001906:	2301      	movs	r3, #1
 8001908:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800190c:	f7fe feb4 	bl	8000678 <HAL_GetTick>
 8001910:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001912:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001916:	b2c0      	uxtb	r0, r0
 8001918:	2801      	cmp	r0, #1
 800191a:	f040 8089 	bne.w	8001a30 <HAL_SPI_Transmit+0x140>
  if ((pData == NULL) || (Size == 0U))
 800191e:	2d00      	cmp	r5, #0
 8001920:	d060      	beq.n	80019e4 <HAL_SPI_Transmit+0xf4>
 8001922:	f1b8 0f00 	cmp.w	r8, #0
 8001926:	d05d      	beq.n	80019e4 <HAL_SPI_Transmit+0xf4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001928:	2303      	movs	r3, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800192a:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800192c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001930:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001934:	2300      	movs	r3, #0
 8001936:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001938:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800193a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 800193e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001942:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001946:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001948:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800194a:	68a3      	ldr	r3, [r4, #8]
 800194c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	d103      	bne.n	800195c <HAL_SPI_Transmit+0x6c>
    SPI_1LINE_TX(hspi);
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800195a:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	0652      	lsls	r2, r2, #25
 8001960:	d403      	bmi.n	800196a <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001968:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800196a:	68e3      	ldr	r3, [r4, #12]
 800196c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001970:	d81d      	bhi.n	80019ae <HAL_SPI_Transmit+0xbe>
    while (hspi->TxXferCount > 0U)
 8001972:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001974:	b29b      	uxth	r3, r3
 8001976:	b1f3      	cbz	r3, 80019b6 <HAL_SPI_Transmit+0xc6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	0792      	lsls	r2, r2, #30
 800197e:	d54a      	bpl.n	8001a16 <HAL_SPI_Transmit+0x126>
        if (hspi->TxXferCount > 1U)
 8001980:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001982:	b292      	uxth	r2, r2
 8001984:	2a01      	cmp	r2, #1
 8001986:	d93e      	bls.n	8001a06 <HAL_SPI_Transmit+0x116>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001988:	f835 2b02 	ldrh.w	r2, [r5], #2
 800198c:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800198e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001990:	3b02      	subs	r3, #2
 8001992:	b29b      	uxth	r3, r3
 8001994:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001996:	e7ec      	b.n	8001972 <HAL_SPI_Transmit+0x82>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	0790      	lsls	r0, r2, #30
 800199e:	d51f      	bpl.n	80019e0 <HAL_SPI_Transmit+0xf0>
        hspi->Instance->DR = *((uint16_t *)pData);
 80019a0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80019a4:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80019a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80019ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_SPI_Transmit+0xa8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80019b6:	463a      	mov	r2, r7
 80019b8:	4631      	mov	r1, r6
 80019ba:	4620      	mov	r0, r4
 80019bc:	f7ff ff1a 	bl	80017f4 <SPI_EndRxTxTransaction>
 80019c0:	2800      	cmp	r0, #0
 80019c2:	d132      	bne.n	8001a2a <HAL_SPI_Transmit+0x13a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019c4:	68a3      	ldr	r3, [r4, #8]
 80019c6:	b933      	cbnz	r3, 80019d6 <HAL_SPI_Transmit+0xe6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	9201      	str	r2, [sp, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019d6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80019d8:	3000      	adds	r0, #0
 80019da:	bf18      	it	ne
 80019dc:	2001      	movne	r0, #1
 80019de:	e001      	b.n	80019e4 <HAL_SPI_Transmit+0xf4>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80019e0:	b94e      	cbnz	r6, 80019f6 <HAL_SPI_Transmit+0x106>
          errorcode = HAL_TIMEOUT;
 80019e2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80019e4:	2301      	movs	r3, #1
 80019e6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80019ea:	2300      	movs	r3, #0
 80019ec:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80019f0:	b002      	add	sp, #8
 80019f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80019f6:	1c71      	adds	r1, r6, #1
 80019f8:	d0d9      	beq.n	80019ae <HAL_SPI_Transmit+0xbe>
 80019fa:	f7fe fe3d 	bl	8000678 <HAL_GetTick>
 80019fe:	1bc0      	subs	r0, r0, r7
 8001a00:	4286      	cmp	r6, r0
 8001a02:	d8d4      	bhi.n	80019ae <HAL_SPI_Transmit+0xbe>
 8001a04:	e7ed      	b.n	80019e2 <HAL_SPI_Transmit+0xf2>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001a06:	782a      	ldrb	r2, [r5, #0]
 8001a08:	3501      	adds	r5, #1
 8001a0a:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8001a0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001a14:	e7ad      	b.n	8001972 <HAL_SPI_Transmit+0x82>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001a16:	2e00      	cmp	r6, #0
 8001a18:	d0e3      	beq.n	80019e2 <HAL_SPI_Transmit+0xf2>
 8001a1a:	1c73      	adds	r3, r6, #1
 8001a1c:	d0a9      	beq.n	8001972 <HAL_SPI_Transmit+0x82>
 8001a1e:	f7fe fe2b 	bl	8000678 <HAL_GetTick>
 8001a22:	1bc0      	subs	r0, r0, r7
 8001a24:	4286      	cmp	r6, r0
 8001a26:	d8a4      	bhi.n	8001972 <HAL_SPI_Transmit+0x82>
 8001a28:	e7db      	b.n	80019e2 <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	6623      	str	r3, [r4, #96]	; 0x60
 8001a2e:	e7c9      	b.n	80019c4 <HAL_SPI_Transmit+0xd4>
    errorcode = HAL_BUSY;
 8001a30:	2002      	movs	r0, #2
 8001a32:	e7d7      	b.n	80019e4 <HAL_SPI_Transmit+0xf4>
  __HAL_LOCK(hspi);
 8001a34:	2002      	movs	r0, #2
 8001a36:	e7db      	b.n	80019f0 <HAL_SPI_Transmit+0x100>

08001a38 <HAL_SPI_ErrorCallback>:
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_SPI_IRQHandler>:
{
 8001a3c:	b530      	push	{r4, r5, lr}
 8001a3e:	4604      	mov	r4, r0
 8001a40:	b085      	sub	sp, #20
	printf("SPI IRQ Handler\n");
 8001a42:	4838      	ldr	r0, [pc, #224]	; (8001b24 <HAL_SPI_IRQHandler+0xe8>)
 8001a44:	f003 fdb2 	bl	80055ac <puts>
  uint32_t itsource = hspi->Instance->CR2;
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001a4c:	689a      	ldr	r2, [r3, #8]
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001a4e:	f002 0041 	and.w	r0, r2, #65	; 0x41
 8001a52:	2801      	cmp	r0, #1
 8001a54:	d106      	bne.n	8001a64 <HAL_SPI_IRQHandler+0x28>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001a56:	0648      	lsls	r0, r1, #25
 8001a58:	d504      	bpl.n	8001a64 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 8001a5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hspi->TxISR(hspi);
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4798      	blx	r3
}
 8001a60:	b005      	add	sp, #20
 8001a62:	bd30      	pop	{r4, r5, pc}
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001a64:	0795      	lsls	r5, r2, #30
 8001a66:	d503      	bpl.n	8001a70 <HAL_SPI_IRQHandler+0x34>
 8001a68:	0608      	lsls	r0, r1, #24
 8001a6a:	d501      	bpl.n	8001a70 <HAL_SPI_IRQHandler+0x34>
    hspi->TxISR(hspi);
 8001a6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a6e:	e7f5      	b.n	8001a5c <HAL_SPI_IRQHandler+0x20>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001a70:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8001a74:	d0f4      	beq.n	8001a60 <HAL_SPI_IRQHandler+0x24>
 8001a76:	068d      	lsls	r5, r1, #26
 8001a78:	d5f2      	bpl.n	8001a60 <HAL_SPI_IRQHandler+0x24>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8001a7a:	0650      	lsls	r0, r2, #25
 8001a7c:	d50e      	bpl.n	8001a9c <HAL_SPI_IRQHandler+0x60>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001a7e:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001a82:	2500      	movs	r5, #0
 8001a84:	2803      	cmp	r0, #3
 8001a86:	d041      	beq.n	8001b0c <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001a88:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001a8a:	f040 0004 	orr.w	r0, r0, #4
 8001a8e:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a90:	9500      	str	r5, [sp, #0]
 8001a92:	68d8      	ldr	r0, [r3, #12]
 8001a94:	9000      	str	r0, [sp, #0]
 8001a96:	6898      	ldr	r0, [r3, #8]
 8001a98:	9000      	str	r0, [sp, #0]
 8001a9a:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8001a9c:	0695      	lsls	r5, r2, #26
 8001a9e:	d50c      	bpl.n	8001aba <HAL_SPI_IRQHandler+0x7e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001aa0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001aa2:	f040 0001 	orr.w	r0, r0, #1
 8001aa6:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	9002      	str	r0, [sp, #8]
 8001aac:	6898      	ldr	r0, [r3, #8]
 8001aae:	9002      	str	r0, [sp, #8]
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8001ab6:	6018      	str	r0, [r3, #0]
 8001ab8:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8001aba:	05d0      	lsls	r0, r2, #23
 8001abc:	d508      	bpl.n	8001ad0 <HAL_SPI_IRQHandler+0x94>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001abe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001ac0:	f042 0208 	orr.w	r2, r2, #8
 8001ac4:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	9203      	str	r2, [sp, #12]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	9203      	str	r2, [sp, #12]
 8001ace:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ad0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d0c4      	beq.n	8001a60 <HAL_SPI_IRQHandler+0x24>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001adc:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001ae4:	078a      	lsls	r2, r1, #30
 8001ae6:	d018      	beq.n	8001b1a <HAL_SPI_IRQHandler+0xde>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001ae8:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001aea:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001aec:	f022 0203 	bic.w	r2, r2, #3
 8001af0:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001af2:	b118      	cbz	r0, 8001afc <HAL_SPI_IRQHandler+0xc0>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_SPI_IRQHandler+0xec>)
 8001af6:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001af8:	f7fe fee8 	bl	80008cc <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8001afc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001afe:	2800      	cmp	r0, #0
 8001b00:	d0ae      	beq.n	8001a60 <HAL_SPI_IRQHandler+0x24>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_SPI_IRQHandler+0xec>)
 8001b04:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001b06:	f7fe fee1 	bl	80008cc <HAL_DMA_Abort_IT>
 8001b0a:	e7a9      	b.n	8001a60 <HAL_SPI_IRQHandler+0x24>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b0c:	9501      	str	r5, [sp, #4]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	9201      	str	r2, [sp, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	9b01      	ldr	r3, [sp, #4]
        return;
 8001b18:	e7a2      	b.n	8001a60 <HAL_SPI_IRQHandler+0x24>
        HAL_SPI_ErrorCallback(hspi);
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f7ff ff8c 	bl	8001a38 <HAL_SPI_ErrorCallback>
 8001b20:	e79e      	b.n	8001a60 <HAL_SPI_IRQHandler+0x24>
 8001b22:	bf00      	nop
 8001b24:	080091e0 	.word	0x080091e0
 8001b28:	08001b2d 	.word	0x08001b2d

08001b2c <SPI_DMAAbortOnError>:
{
 8001b2c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b2e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8001b36:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8001b38:	f7ff ff7e 	bl	8001a38 <HAL_SPI_ErrorCallback>
 8001b3c:	bd08      	pop	{r3, pc}

08001b3e <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b3e:	6a03      	ldr	r3, [r0, #32]
{
 8001b40:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b42:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b44:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b48:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8001b4c:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b4e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001b50:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b52:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001b56:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b5a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b5c:	6203      	str	r3, [r0, #32]
 8001b5e:	bd10      	pop	{r4, pc}

08001b60 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b60:	6a03      	ldr	r3, [r0, #32]
 8001b62:	f023 0310 	bic.w	r3, r3, #16
{
 8001b66:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b68:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b6a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001b6c:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b6e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001b76:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8001b7a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b7e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b80:	6203      	str	r3, [r0, #32]
 8001b82:	bd10      	pop	{r4, pc}

08001b84 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b84:	6803      	ldr	r3, [r0, #0]
}
 8001b86:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
}
 8001b98:	4770      	bx	lr

08001b9a <HAL_TIM_PeriodElapsedCallback>:
 8001b9a:	4770      	bx	lr

08001b9c <HAL_TIM_OC_DelayElapsedCallback>:
 8001b9c:	4770      	bx	lr

08001b9e <HAL_TIM_IC_CaptureCallback>:
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_TIM_TriggerCallback>:
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ba4:	6803      	ldr	r3, [r0, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	0791      	lsls	r1, r2, #30
{
 8001baa:	b510      	push	{r4, lr}
 8001bac:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bae:	d50f      	bpl.n	8001bd0 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	0792      	lsls	r2, r2, #30
 8001bb4:	d50c      	bpl.n	8001bd0 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bb6:	f06f 0202 	mvn.w	r2, #2
 8001bba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bbc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001bbe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bc0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001bc2:	0799      	lsls	r1, r3, #30
 8001bc4:	f000 8085 	beq.w	8001cd2 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001bc8:	f7ff ffe9 	bl	8001b9e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	0752      	lsls	r2, r2, #29
 8001bd6:	d510      	bpl.n	8001bfa <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	0750      	lsls	r0, r2, #29
 8001bdc:	d50d      	bpl.n	8001bfa <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bde:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8001be2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001be6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001be8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bea:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001bec:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001bf0:	d075      	beq.n	8001cde <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf2:	f7ff ffd4 	bl	8001b9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	0711      	lsls	r1, r2, #28
 8001c00:	d50f      	bpl.n	8001c22 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	0712      	lsls	r2, r2, #28
 8001c06:	d50c      	bpl.n	8001c22 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c08:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c10:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001c12:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c14:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001c16:	079b      	lsls	r3, r3, #30
 8001c18:	d067      	beq.n	8001cea <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	f7ff ffc0 	bl	8001b9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	06d0      	lsls	r0, r2, #27
 8001c28:	d510      	bpl.n	8001c4c <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	06d1      	lsls	r1, r2, #27
 8001c2e:	d50d      	bpl.n	8001c4c <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c30:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8001c34:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c38:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001c3a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c3c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001c3e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001c42:	d058      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c44:	f7ff ffab 	bl	8001b9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	07d2      	lsls	r2, r2, #31
 8001c52:	d508      	bpl.n	8001c66 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	07d0      	lsls	r0, r2, #31
 8001c58:	d505      	bpl.n	8001c66 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c5a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c5e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c60:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c62:	f7ff ff9a 	bl	8001b9a <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	0611      	lsls	r1, r2, #24
 8001c6c:	d508      	bpl.n	8001c80 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	0612      	lsls	r2, r2, #24
 8001c72:	d505      	bpl.n	8001c80 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001c78:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c7a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001c7c:	f000 f983 	bl	8001f86 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	05d0      	lsls	r0, r2, #23
 8001c86:	d508      	bpl.n	8001c9a <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	0611      	lsls	r1, r2, #24
 8001c8c:	d505      	bpl.n	8001c9a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001c92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c94:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001c96:	f000 f976 	bl	8001f86 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	0652      	lsls	r2, r2, #25
 8001ca0:	d508      	bpl.n	8001cb4 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	0650      	lsls	r0, r2, #25
 8001ca6:	d505      	bpl.n	8001cb4 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ca8:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001cac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001cb0:	f7ff ff77 	bl	8001ba2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	0691      	lsls	r1, r2, #26
 8001cba:	d522      	bpl.n	8001d02 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	0692      	lsls	r2, r2, #26
 8001cc0:	d51f      	bpl.n	8001d02 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cc2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001cc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cc8:	611a      	str	r2, [r3, #16]
}
 8001cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001cce:	f000 b959 	b.w	8001f84 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	f7ff ff63 	bl	8001b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f7ff ff62 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cdc:	e776      	b.n	8001bcc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cde:	f7ff ff5d 	bl	8001b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f7ff ff5c 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ce8:	e785      	b.n	8001bf6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	f7ff ff57 	bl	8001b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f7ff ff56 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cf4:	e793      	b.n	8001c1e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf6:	f7ff ff51 	bl	8001b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff ff50 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d00:	e7a2      	b.n	8001c48 <HAL_TIM_IRQHandler+0xa4>
 8001d02:	bd10      	pop	{r4, pc}

08001d04 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001d04:	4a30      	ldr	r2, [pc, #192]	; (8001dc8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001d06:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001d08:	4290      	cmp	r0, r2
 8001d0a:	d012      	beq.n	8001d32 <TIM_Base_SetConfig+0x2e>
 8001d0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d10:	d00f      	beq.n	8001d32 <TIM_Base_SetConfig+0x2e>
 8001d12:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d16:	4290      	cmp	r0, r2
 8001d18:	d00b      	beq.n	8001d32 <TIM_Base_SetConfig+0x2e>
 8001d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d1e:	4290      	cmp	r0, r2
 8001d20:	d007      	beq.n	8001d32 <TIM_Base_SetConfig+0x2e>
 8001d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d26:	4290      	cmp	r0, r2
 8001d28:	d003      	beq.n	8001d32 <TIM_Base_SetConfig+0x2e>
 8001d2a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d2e:	4290      	cmp	r0, r2
 8001d30:	d11d      	bne.n	8001d6e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001d32:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d38:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001d3a:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <TIM_Base_SetConfig+0xc4>)
 8001d3c:	4290      	cmp	r0, r2
 8001d3e:	d104      	bne.n	8001d4a <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d44:	68ca      	ldr	r2, [r1, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	e028      	b.n	8001d9c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001d4a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d4e:	d0f7      	beq.n	8001d40 <TIM_Base_SetConfig+0x3c>
 8001d50:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <TIM_Base_SetConfig+0xc8>)
 8001d52:	4290      	cmp	r0, r2
 8001d54:	d0f4      	beq.n	8001d40 <TIM_Base_SetConfig+0x3c>
 8001d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d5a:	4290      	cmp	r0, r2
 8001d5c:	d0f0      	beq.n	8001d40 <TIM_Base_SetConfig+0x3c>
 8001d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d62:	4290      	cmp	r0, r2
 8001d64:	d0ec      	beq.n	8001d40 <TIM_Base_SetConfig+0x3c>
 8001d66:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d6a:	4290      	cmp	r0, r2
 8001d6c:	d0e8      	beq.n	8001d40 <TIM_Base_SetConfig+0x3c>
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <TIM_Base_SetConfig+0xcc>)
 8001d70:	4290      	cmp	r0, r2
 8001d72:	d0e5      	beq.n	8001d40 <TIM_Base_SetConfig+0x3c>
 8001d74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d78:	4290      	cmp	r0, r2
 8001d7a:	d0e1      	beq.n	8001d40 <TIM_Base_SetConfig+0x3c>
 8001d7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d80:	4290      	cmp	r0, r2
 8001d82:	d0dd      	beq.n	8001d40 <TIM_Base_SetConfig+0x3c>
 8001d84:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001d88:	4290      	cmp	r0, r2
 8001d8a:	d0d9      	beq.n	8001d40 <TIM_Base_SetConfig+0x3c>
 8001d8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d90:	4290      	cmp	r0, r2
 8001d92:	d0d5      	beq.n	8001d40 <TIM_Base_SetConfig+0x3c>
 8001d94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d98:	4290      	cmp	r0, r2
 8001d9a:	d0d1      	beq.n	8001d40 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d9c:	694a      	ldr	r2, [r1, #20]
 8001d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001da2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001da4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001da6:	688b      	ldr	r3, [r1, #8]
 8001da8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001daa:	680b      	ldr	r3, [r1, #0]
 8001dac:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <TIM_Base_SetConfig+0xc4>)
 8001db0:	4298      	cmp	r0, r3
 8001db2:	d006      	beq.n	8001dc2 <TIM_Base_SetConfig+0xbe>
 8001db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001db8:	4298      	cmp	r0, r3
 8001dba:	d002      	beq.n	8001dc2 <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	6143      	str	r3, [r0, #20]
}
 8001dc0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001dc2:	690b      	ldr	r3, [r1, #16]
 8001dc4:	6303      	str	r3, [r0, #48]	; 0x30
 8001dc6:	e7f9      	b.n	8001dbc <TIM_Base_SetConfig+0xb8>
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40014000 	.word	0x40014000

08001dd4 <HAL_TIM_Base_Init>:
{ 
 8001dd4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	b1a0      	cbz	r0, 8001e04 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001dda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001de2:	b91b      	cbnz	r3, 8001dec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001de4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001de8:	f002 fc3e 	bl	8004668 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001dec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001dee:	6820      	ldr	r0, [r4, #0]
 8001df0:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8001df2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001df6:	f7ff ff85 	bl	8001d04 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001dfa:	2301      	movs	r3, #1
  return HAL_OK;
 8001dfc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001dfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e04:	2001      	movs	r0, #1
}
 8001e06:	bd10      	pop	{r4, pc}

08001e08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e08:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001e0a:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8001e0c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001e0e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e12:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001e16:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e18:	6083      	str	r3, [r0, #8]
 8001e1a:	bd10      	pop	{r4, pc}

08001e1c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001e1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e20:	2b01      	cmp	r3, #1
{
 8001e22:	b510      	push	{r4, lr}
 8001e24:	4604      	mov	r4, r0
 8001e26:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001e2a:	d018      	beq.n	8001e5e <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001e30:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8001e32:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001e34:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001e38:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e3a:	4b3e      	ldr	r3, [pc, #248]	; (8001f34 <HAL_TIM_ConfigClockSource+0x118>)
 8001e3c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001e3e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001e40:	680b      	ldr	r3, [r1, #0]
 8001e42:	2b40      	cmp	r3, #64	; 0x40
 8001e44:	d059      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0xde>
 8001e46:	d815      	bhi.n	8001e74 <HAL_TIM_ConfigClockSource+0x58>
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d067      	beq.n	8001f1c <HAL_TIM_ConfigClockSource+0x100>
 8001e4c:	d808      	bhi.n	8001e60 <HAL_TIM_ConfigClockSource+0x44>
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d05e      	beq.n	8001f10 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 8001e52:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001e54:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001e5a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001e5e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d061      	beq.n	8001f28 <HAL_TIM_ConfigClockSource+0x10c>
 8001e64:	2b30      	cmp	r3, #48	; 0x30
 8001e66:	d1f4      	bne.n	8001e52 <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8001e68:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001e6e:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001e72:	e026      	b.n	8001ec2 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001e74:	2b70      	cmp	r3, #112	; 0x70
 8001e76:	d026      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0xaa>
 8001e78:	d80e      	bhi.n	8001e98 <HAL_TIM_ConfigClockSource+0x7c>
 8001e7a:	2b50      	cmp	r3, #80	; 0x50
 8001e7c:	d032      	beq.n	8001ee4 <HAL_TIM_ConfigClockSource+0xc8>
 8001e7e:	2b60      	cmp	r3, #96	; 0x60
 8001e80:	d1e7      	bne.n	8001e52 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001e82:	68ca      	ldr	r2, [r1, #12]
 8001e84:	6849      	ldr	r1, [r1, #4]
 8001e86:	f7ff fe6b 	bl	8001b60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e8a:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8001e8c:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001e92:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001e96:	e023      	b.n	8001ee0 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8001e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0x9c>
 8001e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea2:	d1d6      	bne.n	8001e52 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8001ea4:	68cb      	ldr	r3, [r1, #12]
 8001ea6:	684a      	ldr	r2, [r1, #4]
 8001ea8:	6889      	ldr	r1, [r1, #8]
 8001eaa:	f7ff ffad 	bl	8001e08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eae:	6822      	ldr	r2, [r4, #0]
 8001eb0:	6893      	ldr	r3, [r2, #8]
 8001eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb6:	e013      	b.n	8001ee0 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001eb8:	6883      	ldr	r3, [r0, #8]
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebe:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001ec2:	6083      	str	r3, [r0, #8]
 8001ec4:	e7c5      	b.n	8001e52 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8001ec6:	68cb      	ldr	r3, [r1, #12]
 8001ec8:	684a      	ldr	r2, [r1, #4]
 8001eca:	6889      	ldr	r1, [r1, #8]
 8001ecc:	f7ff ff9c 	bl	8001e08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ed0:	6822      	ldr	r2, [r4, #0]
 8001ed2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001edc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ee0:	6093      	str	r3, [r2, #8]
    break;
 8001ee2:	e7b6      	b.n	8001e52 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001ee4:	68ca      	ldr	r2, [r1, #12]
 8001ee6:	6849      	ldr	r1, [r1, #4]
 8001ee8:	f7ff fe29 	bl	8001b3e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001eec:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8001eee:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001ef4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001ef8:	e7f2      	b.n	8001ee0 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001efa:	68ca      	ldr	r2, [r1, #12]
 8001efc:	6849      	ldr	r1, [r1, #4]
 8001efe:	f7ff fe1e 	bl	8001b3e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f02:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8001f04:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f0a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001f0e:	e7e7      	b.n	8001ee0 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 8001f10:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f16:	f043 0307 	orr.w	r3, r3, #7
 8001f1a:	e7d2      	b.n	8001ec2 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8001f1c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f22:	f043 0317 	orr.w	r3, r3, #23
 8001f26:	e7cc      	b.n	8001ec2 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8001f28:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f2e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001f32:	e7c6      	b.n	8001ec2 <HAL_TIM_ConfigClockSource+0xa6>
 8001f34:	fffe0088 	.word	0xfffe0088

08001f38 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001f38:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f3c:	2b01      	cmp	r3, #1
{
 8001f3e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001f40:	d01c      	beq.n	8001f7c <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f42:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f44:	4d0e      	ldr	r5, [pc, #56]	; (8001f80 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8001f46:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f48:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8001f4a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8001f4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f52:	42aa      	cmp	r2, r5
 8001f54:	d103      	bne.n	8001f5e <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001f56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f5a:	684d      	ldr	r5, [r1, #4]
 8001f5c:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f5e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f64:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001f66:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f6a:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f6c:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f6e:	6053      	str	r3, [r2, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001f70:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001f72:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001f74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001f7c:	2002      	movs	r0, #2
} 
 8001f7e:	bd30      	pop	{r4, r5, pc}
 8001f80:	40010000 	.word	0x40010000

08001f84 <HAL_TIMEx_CommutationCallback>:
 8001f84:	4770      	bx	lr

08001f86 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f86:	4770      	bx	lr

08001f88 <update_encoder_item>:
//	save_settings_nv();
}

float update_encoder_item(uint8_t eid, int diff){

	menu[bank].enc[eid].value+=diff*menu[bank].enc[eid].step_size;
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <update_encoder_item+0x64>)
 8001f8a:	ee07 1a90 	vmov	s15, r1
 8001f8e:	4a18      	ldr	r2, [pc, #96]	; (8001ff0 <update_encoder_item+0x68>)
 8001f90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
float update_encoder_item(uint8_t eid, int diff){
 8001f94:	b510      	push	{r4, lr}
	menu[bank].enc[eid].value+=diff*menu[bank].enc[eid].step_size;
 8001f96:	781c      	ldrb	r4, [r3, #0]
 8001f98:	23e0      	movs	r3, #224	; 0xe0
 8001f9a:	fb03 f104 	mul.w	r1, r3, r4
 8001f9e:	232c      	movs	r3, #44	; 0x2c
 8001fa0:	fb03 1300 	mla	r3, r3, r0, r1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8001faa:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001fae:	eee6 7a87 	vfma.f32	s15, s13, s14

	if(menu[bank].enc[eid].value<menu[bank].enc[eid].lower_limit){
 8001fb2:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8001fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
	menu[bank].enc[eid].value+=diff*menu[bank].enc[eid].step_size;
 8001fba:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	if(menu[bank].enc[eid].value<menu[bank].enc[eid].lower_limit){
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	d502      	bpl.n	8001fca <update_encoder_item+0x42>
		menu[bank].enc[eid].value=menu[bank].enc[eid].lower_limit;
	}else if (menu[bank].enc[eid].value>menu[bank].enc[eid].upper_limit){
		menu[bank].enc[eid].value=menu[bank].enc[eid].upper_limit;
 8001fc4:	ed83 7a1c 	vstr	s14, [r3, #112]	; 0x70
 8001fc8:	e006      	b.n	8001fd8 <update_encoder_item+0x50>
	}else if (menu[bank].enc[eid].value>menu[bank].enc[eid].upper_limit){
 8001fca:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8001fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd6:	dcf5      	bgt.n	8001fc4 <update_encoder_item+0x3c>
	}

	return menu[bank].enc[eid].value;
 8001fd8:	23e0      	movs	r3, #224	; 0xe0
 8001fda:	212c      	movs	r1, #44	; 0x2c
 8001fdc:	4363      	muls	r3, r4
 8001fde:	fb01 3000 	mla	r0, r1, r0, r3
 8001fe2:	4402      	add	r2, r0
}
 8001fe4:	ed92 0a1c 	vldr	s0, [r2, #112]	; 0x70
 8001fe8:	bd10      	pop	{r4, pc}
 8001fea:	bf00      	nop
 8001fec:	20000fe8 	.word	0x20000fe8
 8001ff0:	2000026c 	.word	0x2000026c

08001ff4 <update_encoder_value>:

void update_encoder_value(uint8_t eid)
{
 8001ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ff6:	4605      	mov	r5, r0
//	printf("Updating value\n");
	set_text_size(2);
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f001 fb29 	bl	8003650 <set_text_size>
	set_text_color(val_color,0);
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <update_encoder_value+0x6c>)
 8002000:	2100      	movs	r1, #0
 8002002:	4e18      	ldr	r6, [pc, #96]	; (8002064 <update_encoder_value+0x70>)
 8002004:	8818      	ldrh	r0, [r3, #0]
 8002006:	f001 fb29 	bl	800365c <set_text_color>
	if(menu[bank].enc[eid].state){ //If state==1==active
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <update_encoder_value+0x74>)
 800200c:	21e0      	movs	r1, #224	; 0xe0
 800200e:	222c      	movs	r2, #44	; 0x2c
 8002010:	7818      	ldrb	r0, [r3, #0]
 8002012:	f8df e060 	ldr.w	lr, [pc, #96]	; 8002074 <update_encoder_value+0x80>
 8002016:	fb01 f400 	mul.w	r4, r1, r0
 800201a:	4f14      	ldr	r7, [pc, #80]	; (800206c <update_encoder_value+0x78>)
 800201c:	fb02 4405 	mla	r4, r2, r5, r4
 8002020:	4474      	add	r4, lr
 8002022:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8002026:	b18b      	cbz	r3, 800204c <update_encoder_value+0x58>
		print_num(menu[bank].enc[eid].value,menu[bank].enc[eid].format,5,8,rot_offset[eid],val_offset_y);
 8002028:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800202c:	2680      	movs	r6, #128	; 0x80
 800202e:	fb11 6100 	smlabb	r1, r1, r0, r6
 8002032:	fb12 1005 	smlabb	r0, r2, r5, r1
 8002036:	883a      	ldrh	r2, [r7, #0]
 8002038:	2105      	movs	r1, #5
 800203a:	9200      	str	r2, [sp, #0]
 800203c:	4470      	add	r0, lr
 800203e:	2208      	movs	r2, #8
 8002040:	ed94 0a1c 	vldr	s0, [r4, #112]	; 0x70
 8002044:	f001 faee 	bl	8003624 <print_num>
	}else{
		print_static("",rot_offset[eid],val_offset_y,8);
	}
}
 8002048:	b003      	add	sp, #12
 800204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_static("",rot_offset[eid],val_offset_y,8);
 800204c:	2308      	movs	r3, #8
 800204e:	883a      	ldrh	r2, [r7, #0]
 8002050:	f836 1015 	ldrh.w	r1, [r6, r5, lsl #1]
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <update_encoder_value+0x7c>)
}
 8002056:	b003      	add	sp, #12
 8002058:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		print_static("",rot_offset[eid],val_offset_y,8);
 800205c:	f001 baa4 	b.w	80035a8 <print_static>
 8002060:	200010c8 	.word	0x200010c8
 8002064:	20000ec0 	.word	0x20000ec0
 8002068:	20000fe8 	.word	0x20000fe8
 800206c:	2000026a 	.word	0x2000026a
 8002070:	08009660 	.word	0x08009660
 8002074:	2000026c 	.word	0x2000026c

08002078 <update_button_value>:

void update_button_value(uint8_t bid)
{
//	printf("Display button:%d in bank %d\n",bid,bank);
	if(menu[bank].but[bid].state){ //If state==1==active
 8002078:	4b24      	ldr	r3, [pc, #144]	; (800210c <update_button_value+0x94>)
 800207a:	22e0      	movs	r2, #224	; 0xe0
{
 800207c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(menu[bank].but[bid].state){ //If state==1==active
 8002080:	781b      	ldrb	r3, [r3, #0]
{
 8002082:	4604      	mov	r4, r0
 8002084:	4e22      	ldr	r6, [pc, #136]	; (8002110 <update_button_value+0x98>)
	if(menu[bank].but[bid].state){ //If state==1==active
 8002086:	435a      	muls	r2, r3
 8002088:	2312      	movs	r3, #18
 800208a:	4d22      	ldr	r5, [pc, #136]	; (8002114 <update_button_value+0x9c>)
 800208c:	fb03 2200 	mla	r2, r3, r0, r2
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <update_button_value+0xa0>)
 8002092:	4413      	add	r3, r2
 8002094:	f893 7024 	ldrb.w	r7, [r3, #36]	; 0x24
 8002098:	b337      	cbz	r7, 80020e8 <update_button_value+0x70>
//		printf("In bank\n");
		if(menu[bank].but[bid].value){
 800209a:	f893 7025 	ldrb.w	r7, [r3, #37]	; 0x25
//			printf("Print on\n");
			set_text_size(2);
 800209e:	2002      	movs	r0, #2
		if(menu[bank].but[bid].value){
 80020a0:	b197      	cbz	r7, 80020c8 <update_button_value+0x50>
			set_text_size(2);
 80020a2:	f001 fad5 	bl	8003650 <set_text_size>
			set_text_color(active_color,0);
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <update_button_value+0xa4>)
 80020a8:	2100      	movs	r1, #0
 80020aa:	8818      	ldrh	r0, [r3, #0]
 80020ac:	f001 fad6 	bl	800365c <set_text_color>
			print_static("On",but_offset[bid],DP_HEIGHT-val_offset_y,6);
 80020b0:	8832      	ldrh	r2, [r6, #0]
 80020b2:	2306      	movs	r3, #6
 80020b4:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 80020b8:	f1c2 02f0 	rsb	r2, r2, #240	; 0xf0
 80020bc:	4818      	ldr	r0, [pc, #96]	; (8002120 <update_button_value+0xa8>)
 80020be:	b292      	uxth	r2, r2
	}else{
		set_text_size(2);
		set_text_color(active_color,0);
		print_static("",but_offset[bid],DP_HEIGHT-val_offset_y,6);
	}
}
 80020c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		print_static("",but_offset[bid],DP_HEIGHT-val_offset_y,6);
 80020c4:	f001 ba70 	b.w	80035a8 <print_static>
			set_text_size(2);
 80020c8:	f001 fac2 	bl	8003650 <set_text_size>
			set_text_color(inactive_color,0);
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <update_button_value+0xac>)
 80020ce:	4639      	mov	r1, r7
 80020d0:	8818      	ldrh	r0, [r3, #0]
 80020d2:	f001 fac3 	bl	800365c <set_text_color>
			print_static("Off",but_offset[bid],DP_HEIGHT-val_offset_y,6);
 80020d6:	8832      	ldrh	r2, [r6, #0]
 80020d8:	2306      	movs	r3, #6
 80020da:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 80020de:	f1c2 02f0 	rsb	r2, r2, #240	; 0xf0
 80020e2:	4811      	ldr	r0, [pc, #68]	; (8002128 <update_button_value+0xb0>)
 80020e4:	b292      	uxth	r2, r2
 80020e6:	e7eb      	b.n	80020c0 <update_button_value+0x48>
		set_text_size(2);
 80020e8:	2002      	movs	r0, #2
 80020ea:	f001 fab1 	bl	8003650 <set_text_size>
		set_text_color(active_color,0);
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <update_button_value+0xa4>)
 80020f0:	4639      	mov	r1, r7
 80020f2:	8818      	ldrh	r0, [r3, #0]
 80020f4:	f001 fab2 	bl	800365c <set_text_color>
		print_static("",but_offset[bid],DP_HEIGHT-val_offset_y,6);
 80020f8:	8832      	ldrh	r2, [r6, #0]
 80020fa:	2306      	movs	r3, #6
 80020fc:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 8002100:	f1c2 02f0 	rsb	r2, r2, #240	; 0xf0
 8002104:	4809      	ldr	r0, [pc, #36]	; (800212c <update_button_value+0xb4>)
 8002106:	b292      	uxth	r2, r2
 8002108:	e7da      	b.n	80020c0 <update_button_value+0x48>
 800210a:	bf00      	nop
 800210c:	20000fe8 	.word	0x20000fe8
 8002110:	2000026a 	.word	0x2000026a
 8002114:	20000a14 	.word	0x20000a14
 8002118:	2000026c 	.word	0x2000026c
 800211c:	20000268 	.word	0x20000268
 8002120:	08009301 	.word	0x08009301
 8002124:	2000104e 	.word	0x2000104e
 8002128:	08009304 	.word	0x08009304
 800212c:	08009660 	.word	0x08009660

08002130 <update_active_bits>:
}


uint32_t update_active_bits(uint8_t id, uint8_t type){

	if(type==1 && id==0){
 8002130:	2901      	cmp	r1, #1
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <update_active_bits+0x30>)
uint32_t update_active_bits(uint8_t id, uint8_t type){
 8002134:	b510      	push	{r4, lr}
	if(type==1 && id==0){
 8002136:	d10d      	bne.n	8002154 <update_active_bits+0x24>
 8002138:	b960      	cbnz	r0, 8002154 <update_active_bits+0x24>
		if(menu[bank].but[0].value){
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <update_active_bits+0x34>)
 800213c:	4c0a      	ldr	r4, [pc, #40]	; (8002168 <update_active_bits+0x38>)
 800213e:	7810      	ldrb	r0, [r2, #0]
 8002140:	22e0      	movs	r2, #224	; 0xe0
 8002142:	fb02 4200 	mla	r2, r2, r0, r4
 8002146:	4081      	lsls	r1, r0
 8002148:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800214c:	b122      	cbz	r2, 8002158 <update_active_bits+0x28>
			active_bits|=1<<bank; 	//Set active bits
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4311      	orrs	r1, r2
		}else{
			active_bits=active_bits&~(1<<bank);	//Set inactive bits
 8002152:	6019      	str	r1, [r3, #0]
		}
	}

	return active_bits;
}
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	bd10      	pop	{r4, pc}
			active_bits=active_bits&~(1<<bank);	//Set inactive bits
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	ea22 0101 	bic.w	r1, r2, r1
 800215e:	e7f8      	b.n	8002152 <update_active_bits+0x22>
 8002160:	20001108 	.word	0x20001108
 8002164:	20000fe8 	.word	0x20000fe8
 8002168:	2000026c 	.word	0x2000026c

0800216c <init_tuner>:
}

void init_tuner(void){

	//Clean central area
	draw_rect(0,ca_area_offset_y+w_l_thick,DP_WIDTH,DP_HEIGHT-2*(ca_area_offset_y+w_l_thick),0);
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <init_tuner+0x28>)
void init_tuner(void){
 800216e:	b507      	push	{r0, r1, r2, lr}
	draw_rect(0,ca_area_offset_y+w_l_thick,DP_WIDTH,DP_HEIGHT-2*(ca_area_offset_y+w_l_thick),0);
 8002170:	8819      	ldrh	r1, [r3, #0]
 8002172:	2000      	movs	r0, #0
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <init_tuner+0x2c>)
 8002176:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	9000      	str	r0, [sp, #0]
 800217e:	4419      	add	r1, r3
 8002180:	f1c1 0378 	rsb	r3, r1, #120	; 0x78
 8002184:	b209      	sxth	r1, r1
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	b21b      	sxth	r3, r3
 800218a:	f001 f8cd 	bl	8003328 <draw_rect>

}
 800218e:	b003      	add	sp, #12
 8002190:	f85d fb04 	ldr.w	pc, [sp], #4
 8002194:	20000e7e 	.word	0x20000e7e
 8002198:	2000088c 	.word	0x2000088c

0800219c <update_led>:

}

void update_led(void){

	if(mute_state){
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <update_led+0x20>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b123      	cbz	r3, 80021ac <update_led+0x10>
		LED_set_color(0,0,1);
 80021a2:	2100      	movs	r1, #0
 80021a4:	2201      	movs	r2, #1
 80021a6:	4608      	mov	r0, r1
	}else{
		if(menu[0].but[0].value){
			LED_set_color(1,1,1);
		}else{
			LED_set_color(0,1,0);
 80021a8:	f001 ba76 	b.w	8003698 <LED_set_color>
		if(menu[0].but[0].value){
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <update_led+0x24>)
 80021ae:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80021b2:	b102      	cbz	r2, 80021b6 <update_led+0x1a>
			LED_set_color(1,1,1);
 80021b4:	2201      	movs	r2, #1
			LED_set_color(0,1,0);
 80021b6:	2101      	movs	r1, #1
 80021b8:	4610      	mov	r0, r2
 80021ba:	e7f5      	b.n	80021a8 <update_led+0xc>
 80021bc:	20000245 	.word	0x20000245
 80021c0:	2000026c 	.word	0x2000026c

080021c4 <toggle_dsp>:
void toggle_dsp(void){
 80021c4:	b508      	push	{r3, lr}
	menu[0].but[0].value=!menu[0].but[0].value;
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <toggle_dsp+0x38>)
 80021c8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80021cc:	f082 0201 	eor.w	r2, r2, #1
 80021d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <toggle_dsp+0x3c>)
	if(menu[0].but[0].value){
 80021d6:	b162      	cbz	r2, 80021f2 <toggle_dsp+0x2e>
		ctrlreg_tx[0].u32|=1;
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
		ctrlreg_tx[0].u32=ctrlreg_tx[0].u32&~1;
 80021de:	601a      	str	r2, [r3, #0]
	if(bank==0){ //Update display if Bank 0 is active
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <toggle_dsp+0x40>)
 80021e2:	7818      	ldrb	r0, [r3, #0]
 80021e4:	b908      	cbnz	r0, 80021ea <toggle_dsp+0x26>
		update_button_value(0);
 80021e6:	f7ff ff47 	bl	8002078 <update_button_value>
}
 80021ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_led();
 80021ee:	f7ff bfd5 	b.w	800219c <update_led>
		ctrlreg_tx[0].u32=ctrlreg_tx[0].u32&~1;
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	e7f1      	b.n	80021de <toggle_dsp+0x1a>
 80021fa:	bf00      	nop
 80021fc:	2000026c 	.word	0x2000026c
 8002200:	20000890 	.word	0x20000890
 8002204:	20000fe8 	.word	0x20000fe8

08002208 <vol2logvol>:
		}
	}
}

float vol2logvol(float linvol){
	return 5*pow(10,((linvol-100)*0.02));
 8002208:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8002240 <vol2logvol+0x38>
 800220c:	ee30 0a41 	vsub.f32	s0, s0, s2
 8002210:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8002238 <vol2logvol+0x30>
 8002214:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
float vol2logvol(float linvol){
 8002218:	b508      	push	{r3, lr}
	return 5*pow(10,((linvol-100)*0.02));
 800221a:	ee20 1b01 	vmul.f64	d1, d0, d1
 800221e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8002222:	f005 fad9 	bl	80077d8 <pow>
 8002226:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800222a:	ee20 0b07 	vmul.f64	d0, d0, d7
}
 800222e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8002232:	bd08      	pop	{r3, pc}
 8002234:	f3af 8000 	nop.w
 8002238:	47ae147b 	.word	0x47ae147b
 800223c:	3f947ae1 	.word	0x3f947ae1
 8002240:	42c80000 	.word	0x42c80000

08002244 <update_settings>:
void update_settings(uint8_t id, uint8_t type){
 8002244:	b508      	push	{r3, lr}
	if(id==0&&type==1){ //Button #0: Activating/Deactivating
 8002246:	b9b0      	cbnz	r0, 8002276 <update_settings+0x32>
 8002248:	2901      	cmp	r1, #1
 800224a:	d120      	bne.n	800228e <update_settings+0x4a>
		if(menu[bank].but[0].value){
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <update_settings+0x60>)
 800224e:	4816      	ldr	r0, [pc, #88]	; (80022a8 <update_settings+0x64>)
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	23e0      	movs	r3, #224	; 0xe0
 8002254:	fb03 0302 	mla	r3, r3, r2, r0
 8002258:	4091      	lsls	r1, r2
 800225a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <update_settings+0x68>)
			ctrlreg_tx[0].u32|=1<<bank; 	//Set active bits
 8002260:	681a      	ldr	r2, [r3, #0]
		if(menu[bank].but[0].value){
 8002262:	b128      	cbz	r0, 8002270 <update_settings+0x2c>
			ctrlreg_tx[0].u32|=1<<bank; 	//Set active bits
 8002264:	4311      	orrs	r1, r2
			ctrlreg_tx[0].u32=ctrlreg_tx[0].u32&~(1<<bank);	//Set inactive bits
 8002266:	6019      	str	r1, [r3, #0]
}
 8002268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		update_led();
 800226c:	f7ff bf96 	b.w	800219c <update_led>
			ctrlreg_tx[0].u32=ctrlreg_tx[0].u32&~(1<<bank);	//Set inactive bits
 8002270:	ea22 0101 	bic.w	r1, r2, r1
 8002274:	e7f7      	b.n	8002266 <update_settings+0x22>
	}else if(id==1&&type==0){ //Encoder #1: Volume
 8002276:	2801      	cmp	r0, #1
 8002278:	d113      	bne.n	80022a2 <update_settings+0x5e>
 800227a:	b991      	cbnz	r1, 80022a2 <update_settings+0x5e>
		ctrlreg_tx[1].f32=vol2logvol(menu[0].enc[1].value);
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <update_settings+0x64>)
 800227e:	ed93 0a27 	vldr	s0, [r3, #156]	; 0x9c
 8002282:	f7ff ffc1 	bl	8002208 <vol2logvol>
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <update_settings+0x68>)
 8002288:	ed83 0a01 	vstr	s0, [r3, #4]
 800228c:	bd08      	pop	{r3, pc}
	}else if(id==0&&type==0){
 800228e:	b941      	cbnz	r1, 80022a2 <update_settings+0x5e>
		update_note_bins((double)menu[0].enc[0].value);
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <update_settings+0x64>)
 8002292:	ed93 0a1c 	vldr	s0, [r3, #112]	; 0x70
}
 8002296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		update_note_bins((double)menu[0].enc[0].value);
 800229a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800229e:	f002 bb53 	b.w	8004948 <update_note_bins>
 80022a2:	bd08      	pop	{r3, pc}
 80022a4:	20000fe8 	.word	0x20000fe8
 80022a8:	2000026c 	.word	0x2000026c
 80022ac:	20000890 	.word	0x20000890

080022b0 <update_dsp>:
	switch(bank){
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <update_dsp+0x64>)
void update_dsp(uint8_t id, uint8_t type){
 80022b2:	b507      	push	{r0, r1, r2, lr}
	switch(bank){
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d815      	bhi.n	80022e6 <update_dsp+0x36>
 80022ba:	e8df f003 	tbb	[pc, r3]
 80022be:	0904      	.short	0x0904
 80022c0:	201b1917 	.word	0x201b1917
 80022c4:	25          	.byte	0x25
 80022c5:	00          	.byte	0x00
}
 80022c6:	b003      	add	sp, #12
 80022c8:	f85d eb04 	ldr.w	lr, [sp], #4
			update_settings(id,type);
 80022cc:	f7ff bfba 	b.w	8002244 <update_settings>
			write_bqf_param(&menu[bank].ctrl_offset, &menu[bank].fid, &menu[bank].enc[0].value, &menu[bank].enc[1].value,&menu[bank].enc[2].value);
 80022d0:	4811      	ldr	r0, [pc, #68]	; (8002318 <update_dsp+0x68>)
			write_bqf_param(&menu[bank].ctrl_offset, &menu[bank].fid, &menu[bank].enc[0].value, &menu[bank].enc[1].value,&menu[bank].enc[2].value);
 80022d2:	9000      	str	r0, [sp, #0]
 80022d4:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
 80022d8:	f1a0 0258 	sub.w	r2, r0, #88	; 0x58
 80022dc:	f1a0 01b8 	sub.w	r1, r0, #184	; 0xb8
 80022e0:	38b6      	subs	r0, #182	; 0xb6
 80022e2:	f001 fa05 	bl	80036f0 <write_bqf_param>
}
 80022e6:	b003      	add	sp, #12
 80022e8:	f85d fb04 	ldr.w	pc, [sp], #4
			write_bqf_param(&menu[bank].ctrl_offset, &menu[bank].fid, &menu[bank].enc[0].value, &menu[bank].enc[1].value,&menu[bank].enc[2].value);
 80022ec:	480b      	ldr	r0, [pc, #44]	; (800231c <update_dsp+0x6c>)
 80022ee:	e7f0      	b.n	80022d2 <update_dsp+0x22>
			write_bqf_param(&menu[bank].ctrl_offset, &menu[bank].fid, &menu[bank].enc[0].value, &menu[bank].enc[1].value,&menu[bank].enc[2].value);
 80022f0:	480b      	ldr	r0, [pc, #44]	; (8002320 <update_dsp+0x70>)
 80022f2:	e7ee      	b.n	80022d2 <update_dsp+0x22>
}
 80022f4:	b003      	add	sp, #12
 80022f6:	f85d eb04 	ldr.w	lr, [sp], #4
			update_delay();
 80022fa:	f001 bbfd 	b.w	8003af8 <update_delay>
}
 80022fe:	b003      	add	sp, #12
 8002300:	f85d eb04 	ldr.w	lr, [sp], #4
			update_chorus();
 8002304:	f001 bbc0 	b.w	8003a88 <update_chorus>
}
 8002308:	b003      	add	sp, #12
 800230a:	f85d eb04 	ldr.w	lr, [sp], #4
			update_overdrive();
 800230e:	f001 bc37 	b.w	8003b80 <update_overdrive>
 8002312:	bf00      	nop
 8002314:	20000fe8 	.word	0x20000fe8
 8002318:	20000414 	.word	0x20000414
 800231c:	200004f4 	.word	0x200004f4
 8002320:	200005d4 	.word	0x200005d4
 8002324:	00000000 	.word	0x00000000

08002328 <init_settings>:
	memcpy((void*)(BKPSRAM_BASE+BKPSRAM_HWCHECK_OFFSET),&hw_check,2);					//Write the value into Backup SRAM
 8002328:	4b45      	ldr	r3, [pc, #276]	; (8002440 <init_settings+0x118>)
 800232a:	f240 42d2 	movw	r2, #1234	; 0x4d2
		printf("SRAM HW check successful\n");
 800232e:	4845      	ldr	r0, [pc, #276]	; (8002444 <init_settings+0x11c>)
void init_settings(void){
 8002330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		memcpy(&c_hash,(void*)(BKPSRAM_BASE+BKPSRAM_HASHCHECK_OFFSET),2);				//Load hash value from SRAM
 8002334:	4c44      	ldr	r4, [pc, #272]	; (8002448 <init_settings+0x120>)
void init_settings(void){
 8002336:	f5ad 6dc4 	sub.w	sp, sp, #1568	; 0x620
	memcpy((void*)(BKPSRAM_BASE+BKPSRAM_HWCHECK_OFFSET),&hw_check,2);					//Write the value into Backup SRAM
 800233a:	801a      	strh	r2, [r3, #0]
	if(c_hash==CHECKHASH){
 800233c:	f241 652e 	movw	r5, #5678	; 0x162e
		printf("SRAM HW check successful\n");
 8002340:	f003 f934 	bl	80055ac <puts>
	if(c_hash==CHECKHASH){
 8002344:	8823      	ldrh	r3, [r4, #0]
 8002346:	42ab      	cmp	r3, r5
 8002348:	d164      	bne.n	8002414 <init_settings+0xec>
		printf("Hash check successful...Loading settings\n");
 800234a:	4840      	ldr	r0, [pc, #256]	; (800244c <init_settings+0x124>)
 800234c:	f50d 64c4 	add.w	r4, sp, #1568	; 0x620
 8002350:	f003 f92c 	bl	80055ac <puts>
		memcpy(menu_restore,(void *)(BKPSRAM_BASE+BKPSRAM_MENU_HASH_OFFSET),sizeof(menu));
 8002354:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 8002358:	493d      	ldr	r1, [pc, #244]	; (8002450 <init_settings+0x128>)
 800235a:	4668      	mov	r0, sp
 800235c:	f002 fc5a 	bl	8004c14 <memcpy>
 8002360:	466b      	mov	r3, sp
 8002362:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <init_settings+0x12c>)
 8002364:	f1a2 0184 	sub.w	r1, r2, #132	; 0x84
void init_settings(void){
 8002368:	4618      	mov	r0, r3
				if(menu_restore[i].enc[j].value<=menu[i].enc[j].upper_limit && menu_restore[i].enc[j].value>=menu[i].enc[j].lower_limit){
 800236a:	edd0 7a1c 	vldr	s15, [r0, #112]	; 0x70
 800236e:	ed91 7a1e 	vldr	s14, [r1, #120]	; 0x78
 8002372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	d808      	bhi.n	800238e <init_settings+0x66>
 800237c:	ed91 7a1d 	vldr	s14, [r1, #116]	; 0x74
 8002380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					menu[i].enc[j].value=menu_restore[i].enc[j].value;
 8002388:	bfa8      	it	ge
 800238a:	edc1 7a1c 	vstrge	s15, [r1, #112]	; 0x70
 800238e:	312c      	adds	r1, #44	; 0x2c
 8002390:	302c      	adds	r0, #44	; 0x2c
			for(j=0;j<3;j++){
 8002392:	4291      	cmp	r1, r2
 8002394:	d1e9      	bne.n	800236a <init_settings+0x42>
					menu[i].but[k].value=menu_restore[i].but[k].value;
 8002396:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 800239a:	33e0      	adds	r3, #224	; 0xe0
 800239c:	f802 1c5f 	strb.w	r1, [r2, #-95]
 80023a0:	f813 1ca9 	ldrb.w	r1, [r3, #-169]
 80023a4:	f802 1c4d 	strb.w	r1, [r2, #-77]
 80023a8:	f813 1c97 	ldrb.w	r1, [r3, #-151]
 80023ac:	f802 1c3b 	strb.w	r1, [r2, #-59]
 80023b0:	f813 1c85 	ldrb.w	r1, [r3, #-133]
		for(i=0;i<n_context;i++){
 80023b4:	42a3      	cmp	r3, r4
					menu[i].but[k].value=menu_restore[i].but[k].value;
 80023b6:	f802 1c29 	strb.w	r1, [r2, #-41]
 80023ba:	f102 02e0 	add.w	r2, r2, #224	; 0xe0
		for(i=0;i<n_context;i++){
 80023be:	d1d1      	bne.n	8002364 <init_settings+0x3c>
		if(menu[i].but[0].value){
 80023c0:	4e25      	ldr	r6, [pc, #148]	; (8002458 <init_settings+0x130>)
	ctrlreg_tx[0].u32=0;
 80023c2:	2400      	movs	r4, #0
 80023c4:	4d25      	ldr	r5, [pc, #148]	; (800245c <init_settings+0x134>)
		if(menu[i].but[0].value){
 80023c6:	f04f 08e0 	mov.w	r8, #224	; 0xe0
 80023ca:	4637      	mov	r7, r6
	ctrlreg_tx[0].u32=0;
 80023cc:	602c      	str	r4, [r5, #0]
		if(menu[i].but[0].value){
 80023ce:	fb08 6304 	mla	r3, r8, r4, r6
 80023d2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80023d6:	2301      	movs	r3, #1
			ctrlreg_tx[0].u32|=1<<i; 	//Set active bits
 80023d8:	40a3      	lsls	r3, r4
		if(menu[i].but[0].value){
 80023da:	b332      	cbz	r2, 800242a <init_settings+0x102>
			ctrlreg_tx[0].u32|=1<<i; 	//Set active bits
 80023dc:	682a      	ldr	r2, [r5, #0]
 80023de:	4313      	orrs	r3, r2
	for(int i=0;i<n_context;i++){
 80023e0:	3401      	adds	r4, #1
			ctrlreg_tx[0].u32=ctrlreg_tx[0].u32&~(1<<i);	//Set inactive bits
 80023e2:	602b      	str	r3, [r5, #0]
		ctrlreg_tx[1].f32=vol2logvol(menu[0].enc[1].value);
 80023e4:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 80023e8:	f7ff ff0e 	bl	8002208 <vol2logvol>
	for(int i=0;i<n_context;i++){
 80023ec:	2c07      	cmp	r4, #7
		ctrlreg_tx[1].f32=vol2logvol(menu[0].enc[1].value);
 80023ee:	ed85 0a01 	vstr	s0, [r5, #4]
	for(int i=0;i<n_context;i++){
 80023f2:	d1ec      	bne.n	80023ce <init_settings+0xa6>
	update_note_bins((double)menu[0].enc[0].value);
 80023f4:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
	root2_12=pow((double) 2,(double) 1/12);
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <init_settings+0x138>)
	update_note_bins((double)menu[0].enc[0].value);
 80023fa:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
	root2_12=pow((double) 2,(double) 1/12);
 80023fe:	a10e      	add	r1, pc, #56	; (adr r1, 8002438 <init_settings+0x110>)
 8002400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002404:	e9c3 0100 	strd	r0, r1, [r3]
}
 8002408:	f50d 6dc4 	add.w	sp, sp, #1568	; 0x620
 800240c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	update_note_bins((double)menu[0].enc[0].value);
 8002410:	f002 ba9a 	b.w	8004948 <update_note_bins>
		printf("Re-initializing Backup SRAM\n");
 8002414:	4813      	ldr	r0, [pc, #76]	; (8002464 <init_settings+0x13c>)
 8002416:	f003 f8c9 	bl	80055ac <puts>
		memcpy((void *)(BKPSRAM_BASE+BKPSRAM_MENU_HASH_OFFSET),menu,sizeof(menu));	//Restore menu
 800241a:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 800241e:	490e      	ldr	r1, [pc, #56]	; (8002458 <init_settings+0x130>)
 8002420:	480b      	ldr	r0, [pc, #44]	; (8002450 <init_settings+0x128>)
 8002422:	f002 fbf7 	bl	8004c14 <memcpy>
		memcpy((void*)(BKPSRAM_BASE+BKPSRAM_HASHCHECK_OFFSET),&c_hash,2);
 8002426:	8025      	strh	r5, [r4, #0]
 8002428:	e7ca      	b.n	80023c0 <init_settings+0x98>
			ctrlreg_tx[0].u32=ctrlreg_tx[0].u32&~(1<<i);	//Set inactive bits
 800242a:	682a      	ldr	r2, [r5, #0]
 800242c:	ea22 0303 	bic.w	r3, r2, r3
 8002430:	e7d6      	b.n	80023e0 <init_settings+0xb8>
 8002432:	bf00      	nop
 8002434:	f3af 8000 	nop.w
 8002438:	92d97963 	.word	0x92d97963
 800243c:	3ff0f38f 	.word	0x3ff0f38f
 8002440:	40024000 	.word	0x40024000
 8002444:	080092a3 	.word	0x080092a3
 8002448:	40024002 	.word	0x40024002
 800244c:	080092bc 	.word	0x080092bc
 8002450:	40024008 	.word	0x40024008
 8002454:	200002f0 	.word	0x200002f0
 8002458:	2000026c 	.word	0x2000026c
 800245c:	20000890 	.word	0x20000890
 8002460:	200010b0 	.word	0x200010b0
 8002464:	080092e5 	.word	0x080092e5

08002468 <save_settings_nv>:

void save_settings_nv(void){
 8002468:	b508      	push	{r3, lr}

	//Saving bank to backup memory
	 *(uint8_t *)(BKPSRAM_BASE+BKPSRAM_BANK_OFFSET)=bank;
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <save_settings_nv+0x18>)

	 //Saving menu hash to backup memory
	 memcpy((void *)(BKPSRAM_BASE+BKPSRAM_MENU_HASH_OFFSET),menu,sizeof(menu));
 800246c:	4905      	ldr	r1, [pc, #20]	; (8002484 <save_settings_nv+0x1c>)
	 *(uint8_t *)(BKPSRAM_BASE+BKPSRAM_BANK_OFFSET)=bank;
 800246e:	781a      	ldrb	r2, [r3, #0]
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <save_settings_nv+0x20>)
	 memcpy((void *)(BKPSRAM_BASE+BKPSRAM_MENU_HASH_OFFSET),menu,sizeof(menu));
 8002472:	4806      	ldr	r0, [pc, #24]	; (800248c <save_settings_nv+0x24>)
	 *(uint8_t *)(BKPSRAM_BASE+BKPSRAM_BANK_OFFSET)=bank;
 8002474:	701a      	strb	r2, [r3, #0]
	 memcpy((void *)(BKPSRAM_BASE+BKPSRAM_MENU_HASH_OFFSET),menu,sizeof(menu));
 8002476:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 800247a:	f002 fbcb 	bl	8004c14 <memcpy>
 800247e:	bd08      	pop	{r3, pc}
 8002480:	20000fe8 	.word	0x20000fe8
 8002484:	2000026c 	.word	0x2000026c
 8002488:	40024004 	.word	0x40024004
 800248c:	40024008 	.word	0x40024008

08002490 <update_context>:
{
 8002490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	set_text_size(4);
 8002494:	2004      	movs	r0, #4
	print_static(menu[bank].name,DP_WIDTH/2,DP_HEIGHT/2,12);
 8002496:	4e3d      	ldr	r6, [pc, #244]	; (800258c <update_context+0xfc>)
	set_text_size(4);
 8002498:	f001 f8da 	bl	8003650 <set_text_size>
	set_text_color(desc_color,0);
 800249c:	4b3c      	ldr	r3, [pc, #240]	; (8002590 <update_context+0x100>)
 800249e:	2100      	movs	r1, #0
	print_static(menu[bank].name,DP_WIDTH/2,DP_HEIGHT/2,12);
 80024a0:	4c3c      	ldr	r4, [pc, #240]	; (8002594 <update_context+0x104>)
	set_text_color(desc_color,0);
 80024a2:	8818      	ldrh	r0, [r3, #0]
	for(i=0;i<3;i++){
 80024a4:	2500      	movs	r5, #0
	set_text_color(desc_color,0);
 80024a6:	f001 f8d9 	bl	800365c <set_text_color>
	print_static(menu[bank].name,DP_WIDTH/2,DP_HEIGHT/2,12);
 80024aa:	7830      	ldrb	r0, [r6, #0]
 80024ac:	230c      	movs	r3, #12
 80024ae:	2278      	movs	r2, #120	; 0x78
 80024b0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80024b4:	21a0      	movs	r1, #160	; 0xa0
 80024b6:	4f38      	ldr	r7, [pc, #224]	; (8002598 <update_context+0x108>)
 80024b8:	eb04 1040 	add.w	r0, r4, r0, lsl #5
 80024bc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800259c <update_context+0x10c>
			print_static("",rot_offset[i],desc_offset_y,8);	//Set 9 spaces
 80024c0:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80025a0 <update_context+0x110>
	print_static(menu[bank].name,DP_WIDTH/2,DP_HEIGHT/2,12);
 80024c4:	f001 f870 	bl	80035a8 <print_static>
	set_text_size(2);
 80024c8:	2002      	movs	r0, #2
 80024ca:	f001 f8c1 	bl	8003650 <set_text_size>
		if(menu[bank].enc[i].state){ //If state==1==active
 80024ce:	232c      	movs	r3, #44	; 0x2c
 80024d0:	7830      	ldrb	r0, [r6, #0]
 80024d2:	21e0      	movs	r1, #224	; 0xe0
 80024d4:	436b      	muls	r3, r5
 80024d6:	fb01 3200 	mla	r2, r1, r0, r3
 80024da:	4422      	add	r2, r4
 80024dc:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d047      	beq.n	8002574 <update_context+0xe4>
			print_static(menu[bank].enc[i].name,rot_offset[i],desc_offset_y,8); //Set the name
 80024e4:	fb01 3000 	mla	r0, r1, r0, r3
 80024e8:	883a      	ldrh	r2, [r7, #0]
 80024ea:	2308      	movs	r3, #8
 80024ec:	f838 1015 	ldrh.w	r1, [r8, r5, lsl #1]
 80024f0:	305c      	adds	r0, #92	; 0x5c
 80024f2:	4420      	add	r0, r4
	for(i=0;i<3;i++){
 80024f4:	3501      	adds	r5, #1
			print_static("",rot_offset[i],desc_offset_y,8);	//Set 9 spaces
 80024f6:	f001 f857 	bl	80035a8 <print_static>
	for(i=0;i<3;i++){
 80024fa:	2d03      	cmp	r5, #3
 80024fc:	d1e7      	bne.n	80024ce <update_context+0x3e>
 80024fe:	2500      	movs	r5, #0
		if(menu[bank].but[i].state){
 8002500:	f04f 0912 	mov.w	r9, #18
 8002504:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80025a4 <update_context+0x114>
			print_static("",but_offset[i],DP_HEIGHT-desc_offset_y,6);
 8002508:	f8df a094 	ldr.w	sl, [pc, #148]	; 80025a0 <update_context+0x110>
		if(menu[bank].but[i].state){
 800250c:	7830      	ldrb	r0, [r6, #0]
 800250e:	fb09 f105 	mul.w	r1, r9, r5
 8002512:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
			print_static(menu[bank].but[i].name,but_offset[i],DP_HEIGHT-desc_offset_y,6);
 8002516:	883a      	ldrh	r2, [r7, #0]
		if(menu[bank].but[i].state){
 8002518:	fb0e 1300 	mla	r3, lr, r0, r1
			print_static(menu[bank].but[i].name,but_offset[i],DP_HEIGHT-desc_offset_y,6);
 800251c:	f1c2 02f0 	rsb	r2, r2, #240	; 0xf0
		if(menu[bank].but[i].state){
 8002520:	4423      	add	r3, r4
 8002522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002526:	b35b      	cbz	r3, 8002580 <update_context+0xf0>
			print_static(menu[bank].but[i].name,but_offset[i],DP_HEIGHT-desc_offset_y,6);
 8002528:	fb0e 1000 	mla	r0, lr, r0, r1
 800252c:	2306      	movs	r3, #6
 800252e:	b292      	uxth	r2, r2
 8002530:	f838 1015 	ldrh.w	r1, [r8, r5, lsl #1]
 8002534:	3014      	adds	r0, #20
 8002536:	4420      	add	r0, r4
	for(i=0;i<4;i++){
 8002538:	3501      	adds	r5, #1
			print_static("",but_offset[i],DP_HEIGHT-desc_offset_y,6);
 800253a:	f001 f835 	bl	80035a8 <print_static>
	for(i=0;i<4;i++){
 800253e:	2d04      	cmp	r5, #4
 8002540:	d1e4      	bne.n	800250c <update_context+0x7c>
			update_encoder_value(i);
 8002542:	2000      	movs	r0, #0
 8002544:	f7ff fd56 	bl	8001ff4 <update_encoder_value>
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff fd53 	bl	8001ff4 <update_encoder_value>
 800254e:	2002      	movs	r0, #2
 8002550:	f7ff fd50 	bl	8001ff4 <update_encoder_value>
			update_button_value(i);
 8002554:	2000      	movs	r0, #0
 8002556:	f7ff fd8f 	bl	8002078 <update_button_value>
 800255a:	2001      	movs	r0, #1
 800255c:	f7ff fd8c 	bl	8002078 <update_button_value>
 8002560:	2002      	movs	r0, #2
 8002562:	f7ff fd89 	bl	8002078 <update_button_value>
 8002566:	2003      	movs	r0, #3
 8002568:	f7ff fd86 	bl	8002078 <update_button_value>
}
 800256c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	save_settings_nv();
 8002570:	f7ff bf7a 	b.w	8002468 <save_settings_nv>
			print_static("",rot_offset[i],desc_offset_y,8);	//Set 9 spaces
 8002574:	2308      	movs	r3, #8
 8002576:	883a      	ldrh	r2, [r7, #0]
 8002578:	f838 1015 	ldrh.w	r1, [r8, r5, lsl #1]
 800257c:	4648      	mov	r0, r9
 800257e:	e7b9      	b.n	80024f4 <update_context+0x64>
			print_static("",but_offset[i],DP_HEIGHT-desc_offset_y,6);
 8002580:	2306      	movs	r3, #6
 8002582:	b292      	uxth	r2, r2
 8002584:	f838 1015 	ldrh.w	r1, [r8, r5, lsl #1]
 8002588:	4650      	mov	r0, sl
 800258a:	e7d5      	b.n	8002538 <update_context+0xa8>
 800258c:	20000fe8 	.word	0x20000fe8
 8002590:	20000f2c 	.word	0x20000f2c
 8002594:	2000026c 	.word	0x2000026c
 8002598:	20001104 	.word	0x20001104
 800259c:	20000ec0 	.word	0x20000ec0
 80025a0:	08009660 	.word	0x08009660
 80025a4:	20000a14 	.word	0x20000a14

080025a8 <update_ui_context>:
	bank=modulo(bank+diff,n_context);
 80025a8:	4908      	ldr	r1, [pc, #32]	; (80025cc <update_ui_context+0x24>)
 80025aa:	780b      	ldrb	r3, [r1, #0]
 80025ac:	4418      	add	r0, r3
    return (x % n + n) %n;
 80025ae:	2307      	movs	r3, #7
 80025b0:	fb90 f2f3 	sdiv	r2, r0, r3
 80025b4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80025b8:	1a80      	subs	r0, r0, r2
 80025ba:	4418      	add	r0, r3
 80025bc:	fb90 f3f3 	sdiv	r3, r0, r3
 80025c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80025c4:	1ac0      	subs	r0, r0, r3
	bank=modulo(bank+diff,n_context);
 80025c6:	7008      	strb	r0, [r1, #0]
	update_context();
 80025c8:	f7ff bf62 	b.w	8002490 <update_context>
 80025cc:	20000fe8 	.word	0x20000fe8

080025d0 <init_menu>:
{
 80025d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	strcpy(menu[0].name,"Settings");
 80025d4:	4ce0      	ldr	r4, [pc, #896]	; (8002958 <init_menu+0x388>)
	menu[0].ctrl_offset=1;
 80025d6:	2501      	movs	r5, #1
	menu[0].fid=2;
 80025d8:	f04f 0b02 	mov.w	fp, #2
	strcpy(menu[0].name,"Settings");
 80025dc:	49df      	ldr	r1, [pc, #892]	; (800295c <init_menu+0x38c>)
 80025de:	4620      	mov	r0, r4
	menu[0].enc[0].step_size=1;
 80025e0:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
	menu[0].enc[1].lower_limit=0;
 80025e4:	f04f 0800 	mov.w	r8, #0
	menu[0].enc[1].upper_limit=100;
 80025e8:	f8df 93e8 	ldr.w	r9, [pc, #1000]	; 80029d4 <init_menu+0x404>
	menu[0].enc[2].state=0;
 80025ec:	2600      	movs	r6, #0
	menu[1].enc[1].step_size=10;
 80025ee:	f8df a3e8 	ldr.w	sl, [pc, #1000]	; 80029d8 <init_menu+0x408>
{
 80025f2:	ed2d 8b0a 	vpush	{d8-d12}
	strcpy(menu[0].name,"Settings");
 80025f6:	f003 f805 	bl	8005604 <strcpy>
	menu[0].fid=2;
 80025fa:	f884 b010 	strb.w	fp, [r4, #16]
	menu[0].ctrl_offset=1;
 80025fe:	8265      	strh	r5, [r4, #18]
	strcpy(menu[0].enc[0].name,"Tuner A4");
 8002600:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002604:	49d6      	ldr	r1, [pc, #856]	; (8002960 <init_menu+0x390>)
	menu[1].enc[0].step_size=0.5;
 8002606:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
	strcpy(menu[0].enc[0].name,"Tuner A4");
 800260a:	f002 fffb 	bl	8005604 <strcpy>
	menu[0].enc[0].value=440;
 800260e:	4bd5      	ldr	r3, [pc, #852]	; (8002964 <init_menu+0x394>)
	menu[0].enc[1].value=50;
 8002610:	ed9f 9ad5 	vldr	s18, [pc, #852]	; 8002968 <init_menu+0x398>
	strcpy(menu[0].enc[0].format,"%.0f");
 8002614:	f104 0080 	add.w	r0, r4, #128	; 0x80
	menu[0].enc[0].value=440;
 8002618:	6723      	str	r3, [r4, #112]	; 0x70
	menu[1].enc[0].upper_limit=20;
 800261a:	eef3 8a04 	vmov.f32	s17, #52	; 0x41a00000  20.0
	menu[0].enc[0].lower_limit=430;
 800261e:	4bd3      	ldr	r3, [pc, #844]	; (800296c <init_menu+0x39c>)
	menu[1].enc[0].lower_limit=-20;
 8002620:	eefb ba04 	vmov.f32	s23, #180	; 0xc1a00000 -20.0
	menu[0].enc[0].state=1;
 8002624:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
	menu[1].enc[2].upper_limit=7;
 8002628:	eef1 aa0c 	vmov.f32	s21, #28	; 0x40e00000  7.0
	menu[0].enc[0].lower_limit=430;
 800262c:	6763      	str	r3, [r4, #116]	; 0x74
	menu[0].enc[0].upper_limit=450;
 800262e:	4bd0      	ldr	r3, [pc, #832]	; (8002970 <init_menu+0x3a0>)
	menu[0].enc[0].step_size=1;
 8002630:	67e7      	str	r7, [r4, #124]	; 0x7c
	menu[0].enc[0].upper_limit=450;
 8002632:	67a3      	str	r3, [r4, #120]	; 0x78
	strcpy(menu[0].enc[0].format,"%.0f");
 8002634:	49cf      	ldr	r1, [pc, #828]	; (8002974 <init_menu+0x3a4>)
 8002636:	f002 ffe5 	bl	8005604 <strcpy>
	strcpy(menu[0].enc[1].name,"Volume");
 800263a:	49cf      	ldr	r1, [pc, #828]	; (8002978 <init_menu+0x3a8>)
 800263c:	f104 0088 	add.w	r0, r4, #136	; 0x88
	menu[1].enc[2].value=0.7;
 8002640:	ed9f bace 	vldr	s22, [pc, #824]	; 800297c <init_menu+0x3ac>
	strcpy(menu[0].enc[1].name,"Volume");
 8002644:	f002 ffde 	bl	8005604 <strcpy>
	menu[0].enc[1].value=50;
 8002648:	ed84 9a27 	vstr	s18, [r4, #156]	; 0x9c
	menu[0].enc[1].state=1;
 800264c:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
	strcpy(menu[0].enc[1].format,"%.0f");
 8002650:	f104 00ac 	add.w	r0, r4, #172	; 0xac
	menu[0].enc[1].lower_limit=0;
 8002654:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
	menu[0].enc[1].upper_limit=100;
 8002658:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
	menu[0].enc[1].step_size=1;
 800265c:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
	strcpy(menu[0].enc[1].format,"%.0f");
 8002660:	49c4      	ldr	r1, [pc, #784]	; (8002974 <init_menu+0x3a4>)
 8002662:	f002 ffcf 	bl	8005604 <strcpy>
	strcpy(menu[0].enc[2].name,"");
 8002666:	49c6      	ldr	r1, [pc, #792]	; (8002980 <init_menu+0x3b0>)
 8002668:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
	menu[1].enc[2].step_size=0.1;
 800266c:	ed9f aac5 	vldr	s20, [pc, #788]	; 8002984 <init_menu+0x3b4>
	strcpy(menu[0].enc[2].name,"");
 8002670:	f002 ffc8 	bl	8005604 <strcpy>
	menu[0].enc[2].state=0;
 8002674:	f884 60c4 	strb.w	r6, [r4, #196]	; 0xc4
	strcpy(menu[0].but[0].name,"Active");
 8002678:	49c3      	ldr	r1, [pc, #780]	; (8002988 <init_menu+0x3b8>)
 800267a:	f104 0014 	add.w	r0, r4, #20
 800267e:	f002 ffc1 	bl	8005604 <strcpy>
	menu[0].but[0].state=1;
 8002682:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	menu[0].but[0].value=1;
 8002686:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
	strcpy(menu[0].but[1].name,"");
 800268a:	f104 0026 	add.w	r0, r4, #38	; 0x26
 800268e:	49bc      	ldr	r1, [pc, #752]	; (8002980 <init_menu+0x3b0>)
 8002690:	f002 ffb8 	bl	8005604 <strcpy>
	menu[0].but[1].state=0;
 8002694:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
	strcpy(menu[0].but[2].name,"");
 8002698:	49b9      	ldr	r1, [pc, #740]	; (8002980 <init_menu+0x3b0>)
 800269a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800269e:	f002 ffb1 	bl	8005604 <strcpy>
	menu[0].but[2].state=0;
 80026a2:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
	strcpy(menu[0].but[3].name,"");
 80026a6:	49b6      	ldr	r1, [pc, #728]	; (8002980 <init_menu+0x3b0>)
 80026a8:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 80026ac:	f002 ffaa 	bl	8005604 <strcpy>
	menu[0].but[3].state=0;
 80026b0:	f884 605a 	strb.w	r6, [r4, #90]	; 0x5a
	strcpy(menu[1].name,"Low Mid EQ");
 80026b4:	49b5      	ldr	r1, [pc, #724]	; (800298c <init_menu+0x3bc>)
 80026b6:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 80026ba:	f002 ffa3 	bl	8005604 <strcpy>
	menu[1].ctrl_offset=5;
 80026be:	2305      	movs	r3, #5
	menu[1].fid=2;
 80026c0:	f884 b0f0 	strb.w	fp, [r4, #240]	; 0xf0
	strcpy(menu[1].enc[0].name,"Gain");
 80026c4:	f504 709e 	add.w	r0, r4, #316	; 0x13c
	menu[1].ctrl_offset=5;
 80026c8:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
	strcpy(menu[1].enc[0].name,"Gain");
 80026cc:	49b0      	ldr	r1, [pc, #704]	; (8002990 <init_menu+0x3c0>)
 80026ce:	f002 ff99 	bl	8005604 <strcpy>
	menu[1].enc[0].step_size=0.5;
 80026d2:	ed84 8a57 	vstr	s16, [r4, #348]	; 0x15c
	menu[1].enc[0].state=1;
 80026d6:	f884 514c 	strb.w	r5, [r4, #332]	; 0x14c
	strcpy(menu[1].enc[0].format,"%.0f");
 80026da:	f504 70b0 	add.w	r0, r4, #352	; 0x160
	menu[1].enc[0].value=0;
 80026de:	f8c4 8150 	str.w	r8, [r4, #336]	; 0x150
	menu[1].enc[0].lower_limit=-20;
 80026e2:	edc4 ba55 	vstr	s23, [r4, #340]	; 0x154
	menu[1].enc[0].upper_limit=20;
 80026e6:	edc4 8a56 	vstr	s17, [r4, #344]	; 0x158
	strcpy(menu[1].enc[0].format,"%.0f");
 80026ea:	49a2      	ldr	r1, [pc, #648]	; (8002974 <init_menu+0x3a4>)
 80026ec:	f002 ff8a 	bl	8005604 <strcpy>
	strcpy(menu[1].enc[1].name,"Freq");
 80026f0:	49a8      	ldr	r1, [pc, #672]	; (8002994 <init_menu+0x3c4>)
 80026f2:	f504 70b4 	add.w	r0, r4, #360	; 0x168
	menu[2].enc[1].upper_limit=2000;
 80026f6:	eddf 9aa8 	vldr	s19, [pc, #672]	; 8002998 <init_menu+0x3c8>
	strcpy(menu[1].enc[1].name,"Freq");
 80026fa:	f002 ff83 	bl	8005604 <strcpy>
	menu[1].enc[1].value=150;
 80026fe:	4ba7      	ldr	r3, [pc, #668]	; (800299c <init_menu+0x3cc>)
	menu[1].enc[1].state=1;
 8002700:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
	strcpy(menu[1].enc[1].format,"%.0f");
 8002704:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
	menu[1].enc[1].value=150;
 8002708:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
	menu[1].enc[1].lower_limit=80;
 800270c:	4ba4      	ldr	r3, [pc, #656]	; (80029a0 <init_menu+0x3d0>)
	menu[1].enc[1].step_size=10;
 800270e:	f8c4 a188 	str.w	sl, [r4, #392]	; 0x188
	menu[1].enc[1].lower_limit=80;
 8002712:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
	menu[1].enc[1].upper_limit=500;
 8002716:	4ba3      	ldr	r3, [pc, #652]	; (80029a4 <init_menu+0x3d4>)
	strcpy(menu[1].enc[1].format,"%.0f");
 8002718:	4996      	ldr	r1, [pc, #600]	; (8002974 <init_menu+0x3a4>)
	menu[1].enc[1].upper_limit=500;
 800271a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
	strcpy(menu[1].enc[1].format,"%.0f");
 800271e:	f002 ff71 	bl	8005604 <strcpy>
	strcpy(menu[1].enc[2].name,"Width");
 8002722:	49a1      	ldr	r1, [pc, #644]	; (80029a8 <init_menu+0x3d8>)
 8002724:	f504 70ca 	add.w	r0, r4, #404	; 0x194
	menu[2].enc[1].value=800;
 8002728:	ed9f caa0 	vldr	s24, [pc, #640]	; 80029ac <init_menu+0x3dc>
	strcpy(menu[1].enc[2].name,"Width");
 800272c:	f002 ff6a 	bl	8005604 <strcpy>
	menu[1].enc[2].lower_limit=0.5;
 8002730:	ed84 8a6b 	vstr	s16, [r4, #428]	; 0x1ac
	menu[1].enc[2].state=1;
 8002734:	f884 51a4 	strb.w	r5, [r4, #420]	; 0x1a4
	strcpy(menu[1].enc[2].format,"%.1f");
 8002738:	f504 70dc 	add.w	r0, r4, #440	; 0x1b8
	menu[1].enc[2].value=0.7;
 800273c:	ed84 ba6a 	vstr	s22, [r4, #424]	; 0x1a8
	menu[1].enc[2].upper_limit=7;
 8002740:	edc4 aa6c 	vstr	s21, [r4, #432]	; 0x1b0
	menu[1].enc[2].step_size=0.1;
 8002744:	ed84 aa6d 	vstr	s20, [r4, #436]	; 0x1b4
	strcpy(menu[1].enc[2].format,"%.1f");
 8002748:	4999      	ldr	r1, [pc, #612]	; (80029b0 <init_menu+0x3e0>)
 800274a:	f002 ff5b 	bl	8005604 <strcpy>
	strcpy(menu[1].but[0].name,"Active");
 800274e:	498e      	ldr	r1, [pc, #568]	; (8002988 <init_menu+0x3b8>)
 8002750:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
 8002754:	f002 ff56 	bl	8005604 <strcpy>
	menu[1].but[0].state=1;
 8002758:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
	menu[1].but[0].value=1;
 800275c:	f884 5105 	strb.w	r5, [r4, #261]	; 0x105
	strcpy(menu[1].but[1].name,"Bright");
 8002760:	f504 7083 	add.w	r0, r4, #262	; 0x106
 8002764:	4993      	ldr	r1, [pc, #588]	; (80029b4 <init_menu+0x3e4>)
 8002766:	f002 ff4d 	bl	8005604 <strcpy>
	menu[1].but[1].state=0;
 800276a:	f884 6116 	strb.w	r6, [r4, #278]	; 0x116
	menu[1].but[1].value=0;
 800276e:	f884 6117 	strb.w	r6, [r4, #279]	; 0x117
	strcpy(menu[1].but[2].name,"Crisp");
 8002772:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8002776:	4990      	ldr	r1, [pc, #576]	; (80029b8 <init_menu+0x3e8>)
 8002778:	f002 ff44 	bl	8005604 <strcpy>
	menu[1].but[2].state=0;
 800277c:	f884 6128 	strb.w	r6, [r4, #296]	; 0x128
	menu[1].but[2].value=0;
 8002780:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
	strcpy(menu[1].but[3].name,"Tube");
 8002784:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8002788:	498c      	ldr	r1, [pc, #560]	; (80029bc <init_menu+0x3ec>)
 800278a:	f002 ff3b 	bl	8005604 <strcpy>
	menu[1].but[3].state=0;
 800278e:	f884 613a 	strb.w	r6, [r4, #314]	; 0x13a
	menu[1].but[3].value=0;
 8002792:	f884 613b 	strb.w	r6, [r4, #315]	; 0x13b
	strcpy(menu[2].name,"Mid EQ");
 8002796:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 800279a:	4989      	ldr	r1, [pc, #548]	; (80029c0 <init_menu+0x3f0>)
 800279c:	f002 ff32 	bl	8005604 <strcpy>
	menu[2].ctrl_offset=10;
 80027a0:	230a      	movs	r3, #10
	menu[2].fid=2;
 80027a2:	f884 b1d0 	strb.w	fp, [r4, #464]	; 0x1d0
	strcpy(menu[2].enc[0].name,"Gain");
 80027a6:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	menu[2].ctrl_offset=10;
 80027aa:	f8a4 31d2 	strh.w	r3, [r4, #466]	; 0x1d2
	strcpy(menu[2].enc[0].name,"Gain");
 80027ae:	4978      	ldr	r1, [pc, #480]	; (8002990 <init_menu+0x3c0>)
 80027b0:	f002 ff28 	bl	8005604 <strcpy>
	menu[2].enc[0].step_size=0.5;
 80027b4:	ed84 8a8f 	vstr	s16, [r4, #572]	; 0x23c
	menu[2].enc[0].state=1;
 80027b8:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
	strcpy(menu[2].enc[0].format,"%.0f");
 80027bc:	f504 7010 	add.w	r0, r4, #576	; 0x240
	menu[2].enc[0].value=0;
 80027c0:	f8c4 8230 	str.w	r8, [r4, #560]	; 0x230
	menu[2].enc[0].lower_limit=-20;
 80027c4:	edc4 ba8d 	vstr	s23, [r4, #564]	; 0x234
	menu[2].enc[0].upper_limit=20;
 80027c8:	edc4 8a8e 	vstr	s17, [r4, #568]	; 0x238
	strcpy(menu[2].enc[0].format,"%.0f");
 80027cc:	4969      	ldr	r1, [pc, #420]	; (8002974 <init_menu+0x3a4>)
 80027ce:	f002 ff19 	bl	8005604 <strcpy>
	strcpy(menu[2].enc[1].name,"Freq");
 80027d2:	4970      	ldr	r1, [pc, #448]	; (8002994 <init_menu+0x3c4>)
 80027d4:	f504 7012 	add.w	r0, r4, #584	; 0x248
 80027d8:	f002 ff14 	bl	8005604 <strcpy>
	menu[2].enc[1].lower_limit=400;
 80027dc:	4b79      	ldr	r3, [pc, #484]	; (80029c4 <init_menu+0x3f4>)
	menu[2].enc[1].state=1;
 80027de:	f884 5258 	strb.w	r5, [r4, #600]	; 0x258
	strcpy(menu[2].enc[1].format,"%.0f");
 80027e2:	f504 701b 	add.w	r0, r4, #620	; 0x26c
	menu[2].enc[1].lower_limit=400;
 80027e6:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
	menu[2].enc[1].value=800;
 80027ea:	ed84 ca97 	vstr	s24, [r4, #604]	; 0x25c
	menu[2].enc[1].upper_limit=2000;
 80027ee:	edc4 9a99 	vstr	s19, [r4, #612]	; 0x264
	menu[2].enc[1].step_size=10;
 80027f2:	f8c4 a268 	str.w	sl, [r4, #616]	; 0x268
	strcpy(menu[2].enc[1].format,"%.0f");
 80027f6:	495f      	ldr	r1, [pc, #380]	; (8002974 <init_menu+0x3a4>)
 80027f8:	f002 ff04 	bl	8005604 <strcpy>
	strcpy(menu[2].enc[2].name,"Width");
 80027fc:	496a      	ldr	r1, [pc, #424]	; (80029a8 <init_menu+0x3d8>)
 80027fe:	f504 701d 	add.w	r0, r4, #628	; 0x274
 8002802:	f002 feff 	bl	8005604 <strcpy>
	menu[2].enc[2].lower_limit=0.5;
 8002806:	ed84 8aa3 	vstr	s16, [r4, #652]	; 0x28c
	menu[2].enc[2].state=1;
 800280a:	f884 5284 	strb.w	r5, [r4, #644]	; 0x284
	strcpy(menu[2].enc[2].format,"%.1f");
 800280e:	f504 7026 	add.w	r0, r4, #664	; 0x298
	menu[2].enc[2].value=0.7;
 8002812:	ed84 baa2 	vstr	s22, [r4, #648]	; 0x288
	menu[2].enc[2].upper_limit=7;
 8002816:	edc4 aaa4 	vstr	s21, [r4, #656]	; 0x290
	menu[2].enc[2].step_size=0.1;
 800281a:	ed84 aaa5 	vstr	s20, [r4, #660]	; 0x294
	strcpy(menu[2].enc[2].format,"%.1f");
 800281e:	4964      	ldr	r1, [pc, #400]	; (80029b0 <init_menu+0x3e0>)
 8002820:	f002 fef0 	bl	8005604 <strcpy>
	strcpy(menu[2].but[0].name,"Active");
 8002824:	4958      	ldr	r1, [pc, #352]	; (8002988 <init_menu+0x3b8>)
 8002826:	f504 70ea 	add.w	r0, r4, #468	; 0x1d4
 800282a:	f002 feeb 	bl	8005604 <strcpy>
	menu[2].but[0].state=1;
 800282e:	f884 51e4 	strb.w	r5, [r4, #484]	; 0x1e4
	menu[2].but[0].value=1;
 8002832:	f884 51e5 	strb.w	r5, [r4, #485]	; 0x1e5
	strcpy(menu[2].but[1].name,"Bright");
 8002836:	f504 70f3 	add.w	r0, r4, #486	; 0x1e6
 800283a:	495e      	ldr	r1, [pc, #376]	; (80029b4 <init_menu+0x3e4>)
 800283c:	f002 fee2 	bl	8005604 <strcpy>
	menu[2].but[1].state=0;
 8002840:	f884 61f6 	strb.w	r6, [r4, #502]	; 0x1f6
	menu[2].but[1].value=0;
 8002844:	f884 61f7 	strb.w	r6, [r4, #503]	; 0x1f7
	strcpy(menu[2].but[2].name,"Crisp");
 8002848:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 800284c:	495a      	ldr	r1, [pc, #360]	; (80029b8 <init_menu+0x3e8>)
 800284e:	f002 fed9 	bl	8005604 <strcpy>
	menu[2].but[2].state=0;
 8002852:	f884 6208 	strb.w	r6, [r4, #520]	; 0x208
	menu[2].but[2].value=0;
 8002856:	f884 6209 	strb.w	r6, [r4, #521]	; 0x209
	strcpy(menu[2].but[3].name,"Tube");
 800285a:	f204 200a 	addw	r0, r4, #522	; 0x20a
 800285e:	4957      	ldr	r1, [pc, #348]	; (80029bc <init_menu+0x3ec>)
 8002860:	f002 fed0 	bl	8005604 <strcpy>
	menu[2].but[3].state=0;
 8002864:	f884 621a 	strb.w	r6, [r4, #538]	; 0x21a
	menu[2].but[3].value=0;
 8002868:	f884 621b 	strb.w	r6, [r4, #539]	; 0x21b
	strcpy(menu[3].name,"Hi Mid EQ");
 800286c:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
 8002870:	4955      	ldr	r1, [pc, #340]	; (80029c8 <init_menu+0x3f8>)
 8002872:	f002 fec7 	bl	8005604 <strcpy>
	menu[3].ctrl_offset=15;
 8002876:	230f      	movs	r3, #15
	menu[3].fid=2;
 8002878:	f884 b2b0 	strb.w	fp, [r4, #688]	; 0x2b0
	strcpy(menu[3].enc[0].name,"Gain");
 800287c:	f504 703f 	add.w	r0, r4, #764	; 0x2fc
	menu[3].ctrl_offset=15;
 8002880:	f8a4 32b2 	strh.w	r3, [r4, #690]	; 0x2b2
	strcpy(menu[3].enc[0].name,"Gain");
 8002884:	4942      	ldr	r1, [pc, #264]	; (8002990 <init_menu+0x3c0>)
 8002886:	f002 febd 	bl	8005604 <strcpy>
	menu[3].enc[0].step_size=0.5;
 800288a:	ed84 8ac7 	vstr	s16, [r4, #796]	; 0x31c
	menu[3].enc[0].state=1;
 800288e:	f884 530c 	strb.w	r5, [r4, #780]	; 0x30c
	strcpy(menu[3].enc[0].format,"%.0f");
 8002892:	f504 7048 	add.w	r0, r4, #800	; 0x320
	menu[3].enc[0].value=0;
 8002896:	f8c4 8310 	str.w	r8, [r4, #784]	; 0x310
	menu[3].enc[0].lower_limit=-20;
 800289a:	edc4 bac5 	vstr	s23, [r4, #788]	; 0x314
	menu[3].enc[0].upper_limit=20;
 800289e:	edc4 8ac6 	vstr	s17, [r4, #792]	; 0x318
	strcpy(menu[3].enc[0].format,"%.0f");
 80028a2:	4934      	ldr	r1, [pc, #208]	; (8002974 <init_menu+0x3a4>)
 80028a4:	f002 feae 	bl	8005604 <strcpy>
	strcpy(menu[3].enc[1].name,"Freq");
 80028a8:	493a      	ldr	r1, [pc, #232]	; (8002994 <init_menu+0x3c4>)
 80028aa:	f504 704a 	add.w	r0, r4, #808	; 0x328
	menu[3].enc[1].value=4000;
 80028ae:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80029dc <init_menu+0x40c>
	strcpy(menu[3].enc[1].name,"Freq");
 80028b2:	f002 fea7 	bl	8005604 <strcpy>
	menu[3].enc[1].upper_limit=5000;
 80028b6:	4b45      	ldr	r3, [pc, #276]	; (80029cc <init_menu+0x3fc>)
	menu[3].enc[1].step_size=50;
 80028b8:	ed84 9ad2 	vstr	s18, [r4, #840]	; 0x348
	strcpy(menu[3].enc[1].format,"%.0f");
 80028bc:	f504 7053 	add.w	r0, r4, #844	; 0x34c
	menu[3].enc[1].upper_limit=5000;
 80028c0:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
	menu[3].enc[1].state=1;
 80028c4:	f884 5338 	strb.w	r5, [r4, #824]	; 0x338
	menu[3].enc[1].value=4000;
 80028c8:	f8c4 b33c 	str.w	fp, [r4, #828]	; 0x33c
	menu[3].enc[1].lower_limit=2000;
 80028cc:	edc4 9ad0 	vstr	s19, [r4, #832]	; 0x340
	strcpy(menu[3].enc[1].format,"%.0f");
 80028d0:	4928      	ldr	r1, [pc, #160]	; (8002974 <init_menu+0x3a4>)
 80028d2:	f002 fe97 	bl	8005604 <strcpy>
	strcpy(menu[3].enc[2].name,"Width");
 80028d6:	4934      	ldr	r1, [pc, #208]	; (80029a8 <init_menu+0x3d8>)
 80028d8:	f504 7055 	add.w	r0, r4, #852	; 0x354
 80028dc:	f002 fe92 	bl	8005604 <strcpy>
	menu[3].enc[2].lower_limit=0.5;
 80028e0:	ed84 8adb 	vstr	s16, [r4, #876]	; 0x36c
	menu[3].enc[2].state=1;
 80028e4:	f884 5364 	strb.w	r5, [r4, #868]	; 0x364
	strcpy(menu[3].enc[2].format,"%.1f");
 80028e8:	f504 705e 	add.w	r0, r4, #888	; 0x378
	menu[3].enc[2].value=0.7;
 80028ec:	ed84 bada 	vstr	s22, [r4, #872]	; 0x368
	menu[4].enc[1].value=30;
 80028f0:	eeb3 8a0e 	vmov.f32	s16, #62	; 0x41f00000  30.0
	menu[3].enc[2].upper_limit=7;
 80028f4:	edc4 aadc 	vstr	s21, [r4, #880]	; 0x370
	menu[3].enc[2].step_size=0.1;
 80028f8:	ed84 aadd 	vstr	s20, [r4, #884]	; 0x374
	strcpy(menu[3].enc[2].format,"%.1f");
 80028fc:	492c      	ldr	r1, [pc, #176]	; (80029b0 <init_menu+0x3e0>)
 80028fe:	f002 fe81 	bl	8005604 <strcpy>
	strcpy(menu[3].but[0].name,"Active");
 8002902:	4921      	ldr	r1, [pc, #132]	; (8002988 <init_menu+0x3b8>)
 8002904:	f504 702d 	add.w	r0, r4, #692	; 0x2b4
 8002908:	f002 fe7c 	bl	8005604 <strcpy>
	menu[3].but[0].state=1;
 800290c:	f884 52c4 	strb.w	r5, [r4, #708]	; 0x2c4
	menu[3].but[0].value=1;
 8002910:	f884 52c5 	strb.w	r5, [r4, #709]	; 0x2c5
	strcpy(menu[3].but[1].name,"Bright");
 8002914:	f204 20c6 	addw	r0, r4, #710	; 0x2c6
 8002918:	4926      	ldr	r1, [pc, #152]	; (80029b4 <init_menu+0x3e4>)
 800291a:	f002 fe73 	bl	8005604 <strcpy>
	menu[3].but[1].state=0;
 800291e:	f884 62d6 	strb.w	r6, [r4, #726]	; 0x2d6
	menu[3].but[1].value=0;
 8002922:	f884 62d7 	strb.w	r6, [r4, #727]	; 0x2d7
	strcpy(menu[3].but[2].name,"Crisp");
 8002926:	f504 7036 	add.w	r0, r4, #728	; 0x2d8
 800292a:	4923      	ldr	r1, [pc, #140]	; (80029b8 <init_menu+0x3e8>)
 800292c:	f002 fe6a 	bl	8005604 <strcpy>
	menu[3].but[2].state=0;
 8002930:	f884 62e8 	strb.w	r6, [r4, #744]	; 0x2e8
	menu[3].but[2].value=0;
 8002934:	f884 62e9 	strb.w	r6, [r4, #745]	; 0x2e9
	strcpy(menu[3].but[3].name,"Tube");
 8002938:	f204 20ea 	addw	r0, r4, #746	; 0x2ea
 800293c:	491f      	ldr	r1, [pc, #124]	; (80029bc <init_menu+0x3ec>)
 800293e:	f002 fe61 	bl	8005604 <strcpy>
	menu[3].but[3].state=0;
 8002942:	f884 62fa 	strb.w	r6, [r4, #762]	; 0x2fa
	menu[3].but[3].value=0;
 8002946:	f884 62fb 	strb.w	r6, [r4, #763]	; 0x2fb
	strcpy(menu[4].name,"Delay");
 800294a:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800294e:	4920      	ldr	r1, [pc, #128]	; (80029d0 <init_menu+0x400>)
 8002950:	f002 fe58 	bl	8005604 <strcpy>
	menu[4].ctrl_offset=20;
 8002954:	2314      	movs	r3, #20
 8002956:	e043      	b.n	80029e0 <init_menu+0x410>
 8002958:	2000026c 	.word	0x2000026c
 800295c:	080091f9 	.word	0x080091f9
 8002960:	08009202 	.word	0x08009202
 8002964:	43dc0000 	.word	0x43dc0000
 8002968:	42480000 	.word	0x42480000
 800296c:	43d70000 	.word	0x43d70000
 8002970:	43e10000 	.word	0x43e10000
 8002974:	0800920b 	.word	0x0800920b
 8002978:	08009210 	.word	0x08009210
 800297c:	3f333333 	.word	0x3f333333
 8002980:	08009660 	.word	0x08009660
 8002984:	3dcccccd 	.word	0x3dcccccd
 8002988:	08009217 	.word	0x08009217
 800298c:	0800921e 	.word	0x0800921e
 8002990:	08009229 	.word	0x08009229
 8002994:	0800922e 	.word	0x0800922e
 8002998:	44fa0000 	.word	0x44fa0000
 800299c:	43160000 	.word	0x43160000
 80029a0:	42a00000 	.word	0x42a00000
 80029a4:	43fa0000 	.word	0x43fa0000
 80029a8:	08009233 	.word	0x08009233
 80029ac:	44480000 	.word	0x44480000
 80029b0:	08009239 	.word	0x08009239
 80029b4:	0800923e 	.word	0x0800923e
 80029b8:	08009245 	.word	0x08009245
 80029bc:	0800924b 	.word	0x0800924b
 80029c0:	08009253 	.word	0x08009253
 80029c4:	43c80000 	.word	0x43c80000
 80029c8:	08009250 	.word	0x08009250
 80029cc:	459c4000 	.word	0x459c4000
 80029d0:	0800925a 	.word	0x0800925a
 80029d4:	42c80000 	.word	0x42c80000
 80029d8:	41200000 	.word	0x41200000
 80029dc:	457a0000 	.word	0x457a0000
	strcpy(menu[4].enc[0].name,"Mix");
 80029e0:	49c6      	ldr	r1, [pc, #792]	; (8002cfc <init_menu+0x72c>)
 80029e2:	f504 7077 	add.w	r0, r4, #988	; 0x3dc
	menu[4].ctrl_offset=20;
 80029e6:	f8a4 3392 	strh.w	r3, [r4, #914]	; 0x392
	strcpy(menu[4].enc[0].name,"Mix");
 80029ea:	f002 fe0b 	bl	8005604 <strcpy>
	menu[4].enc[0].state=1;
 80029ee:	f884 53ec 	strb.w	r5, [r4, #1004]	; 0x3ec
	menu[4].enc[0].value=20;
 80029f2:	edc4 8afc 	vstr	s17, [r4, #1008]	; 0x3f0
	strcpy(menu[4].enc[0].format,"%.0f");
 80029f6:	f504 6080 	add.w	r0, r4, #1024	; 0x400
	menu[4].enc[0].lower_limit=0;
 80029fa:	f8c4 83f4 	str.w	r8, [r4, #1012]	; 0x3f4
	menu[4].enc[0].upper_limit=100;
 80029fe:	f8c4 93f8 	str.w	r9, [r4, #1016]	; 0x3f8
	menu[4].enc[0].step_size=1;
 8002a02:	f8c4 73fc 	str.w	r7, [r4, #1020]	; 0x3fc
	strcpy(menu[4].enc[0].format,"%.0f");
 8002a06:	49be      	ldr	r1, [pc, #760]	; (8002d00 <init_menu+0x730>)
 8002a08:	f002 fdfc 	bl	8005604 <strcpy>
	strcpy(menu[4].enc[1].name,"Feedback");
 8002a0c:	49bd      	ldr	r1, [pc, #756]	; (8002d04 <init_menu+0x734>)
 8002a0e:	f504 6081 	add.w	r0, r4, #1032	; 0x408
 8002a12:	f002 fdf7 	bl	8005604 <strcpy>
	menu[4].enc[1].value=30;
 8002a16:	f204 431c 	addw	r3, r4, #1052	; 0x41c
	menu[4].enc[1].state=1;
 8002a1a:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
	strcpy(menu[4].enc[1].format,"%.0f");
 8002a1e:	f204 402c 	addw	r0, r4, #1068	; 0x42c
	menu[4].enc[1].value=30;
 8002a22:	ed83 8a00 	vstr	s16, [r3]
	menu[4].enc[1].lower_limit=0;
 8002a26:	f504 6384 	add.w	r3, r4, #1056	; 0x420
	strcpy(menu[4].enc[1].format,"%.0f");
 8002a2a:	49b5      	ldr	r1, [pc, #724]	; (8002d00 <init_menu+0x730>)
	menu[4].enc[1].lower_limit=0;
 8002a2c:	f8c3 8000 	str.w	r8, [r3]
	menu[4].enc[1].upper_limit=100;
 8002a30:	f204 4324 	addw	r3, r4, #1060	; 0x424
 8002a34:	f8c3 9000 	str.w	r9, [r3]
	menu[4].enc[1].step_size=1;
 8002a38:	f504 6385 	add.w	r3, r4, #1064	; 0x428
 8002a3c:	601f      	str	r7, [r3, #0]
	strcpy(menu[4].enc[1].format,"%.0f");
 8002a3e:	f002 fde1 	bl	8005604 <strcpy>
	strcpy(menu[4].enc[2].name,"Time");
 8002a42:	49b1      	ldr	r1, [pc, #708]	; (8002d08 <init_menu+0x738>)
 8002a44:	f204 4034 	addw	r0, r4, #1076	; 0x434
 8002a48:	f002 fddc 	bl	8005604 <strcpy>
	menu[4].enc[2].value=600;
 8002a4c:	4aaf      	ldr	r2, [pc, #700]	; (8002d0c <init_menu+0x73c>)
 8002a4e:	f504 6389 	add.w	r3, r4, #1096	; 0x448
	menu[4].enc[2].state=1;
 8002a52:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
	strcpy(menu[4].enc[2].format,"%.0f");
 8002a56:	49aa      	ldr	r1, [pc, #680]	; (8002d00 <init_menu+0x730>)
 8002a58:	f504 608b 	add.w	r0, r4, #1112	; 0x458
	menu[4].enc[2].value=600;
 8002a5c:	601a      	str	r2, [r3, #0]
	menu[4].enc[2].lower_limit=10;
 8002a5e:	f204 434c 	addw	r3, r4, #1100	; 0x44c
 8002a62:	f8c3 a000 	str.w	sl, [r3]
	menu[4].enc[2].upper_limit=2000;
 8002a66:	f504 638a 	add.w	r3, r4, #1104	; 0x450
 8002a6a:	edc3 9a00 	vstr	s19, [r3]
	menu[4].enc[2].step_size=100;
 8002a6e:	f204 4354 	addw	r3, r4, #1108	; 0x454
 8002a72:	f8c3 9000 	str.w	r9, [r3]
	strcpy(menu[4].enc[2].format,"%.0f");
 8002a76:	f002 fdc5 	bl	8005604 <strcpy>
	strcpy(menu[4].but[0].name,"Active");
 8002a7a:	49a5      	ldr	r1, [pc, #660]	; (8002d10 <init_menu+0x740>)
 8002a7c:	f504 7065 	add.w	r0, r4, #916	; 0x394
 8002a80:	f002 fdc0 	bl	8005604 <strcpy>
	menu[4].but[0].state=1;
 8002a84:	f884 53a4 	strb.w	r5, [r4, #932]	; 0x3a4
	menu[4].but[0].value=1;
 8002a88:	f884 53a5 	strb.w	r5, [r4, #933]	; 0x3a5
	strcpy(menu[4].but[1].name,"Bright");
 8002a8c:	f204 30a6 	addw	r0, r4, #934	; 0x3a6
 8002a90:	49a0      	ldr	r1, [pc, #640]	; (8002d14 <init_menu+0x744>)
 8002a92:	f002 fdb7 	bl	8005604 <strcpy>
	menu[4].but[1].state=0;
 8002a96:	f884 63b6 	strb.w	r6, [r4, #950]	; 0x3b6
	menu[4].but[1].value=0;
 8002a9a:	f884 63b7 	strb.w	r6, [r4, #951]	; 0x3b7
	strcpy(menu[4].but[2].name,"Crisp");
 8002a9e:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
 8002aa2:	499d      	ldr	r1, [pc, #628]	; (8002d18 <init_menu+0x748>)
 8002aa4:	f002 fdae 	bl	8005604 <strcpy>
	menu[4].but[2].state=0;
 8002aa8:	f884 63c8 	strb.w	r6, [r4, #968]	; 0x3c8
	menu[4].but[2].value=0;
 8002aac:	f884 63c9 	strb.w	r6, [r4, #969]	; 0x3c9
	strcpy(menu[4].but[3].name,"Tube");
 8002ab0:	f204 30ca 	addw	r0, r4, #970	; 0x3ca
 8002ab4:	4999      	ldr	r1, [pc, #612]	; (8002d1c <init_menu+0x74c>)
 8002ab6:	f002 fda5 	bl	8005604 <strcpy>
	menu[4].but[3].state=0;
 8002aba:	f884 63da 	strb.w	r6, [r4, #986]	; 0x3da
	menu[4].but[3].value=0;
 8002abe:	f884 63db 	strb.w	r6, [r4, #987]	; 0x3db
	strcpy(menu[5].name,"Chorus");
 8002ac2:	f504 608c 	add.w	r0, r4, #1120	; 0x460
 8002ac6:	4996      	ldr	r1, [pc, #600]	; (8002d20 <init_menu+0x750>)
 8002ac8:	f002 fd9c 	bl	8005604 <strcpy>
	menu[5].ctrl_offset=25;
 8002acc:	2319      	movs	r3, #25
	strcpy(menu[5].enc[0].name,"Mix");
 8002ace:	498b      	ldr	r1, [pc, #556]	; (8002cfc <init_menu+0x72c>)
 8002ad0:	f204 40bc 	addw	r0, r4, #1212	; 0x4bc
	menu[5].ctrl_offset=25;
 8002ad4:	f8a4 3472 	strh.w	r3, [r4, #1138]	; 0x472
	strcpy(menu[5].enc[0].name,"Mix");
 8002ad8:	f002 fd94 	bl	8005604 <strcpy>
	menu[5].enc[0].value=50;
 8002adc:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
	menu[5].enc[0].state=1;
 8002ae0:	f884 54cc 	strb.w	r5, [r4, #1228]	; 0x4cc
	strcpy(menu[5].enc[0].format,"%.0f");
 8002ae4:	f504 609c 	add.w	r0, r4, #1248	; 0x4e0
	menu[5].enc[0].value=50;
 8002ae8:	ed83 9a00 	vstr	s18, [r3]
	menu[5].enc[0].lower_limit=0;
 8002aec:	f204 43d4 	addw	r3, r4, #1236	; 0x4d4
	strcpy(menu[5].enc[0].format,"%.0f");
 8002af0:	4983      	ldr	r1, [pc, #524]	; (8002d00 <init_menu+0x730>)
	menu[5].enc[1].value=5;
 8002af2:	eeb1 9a04 	vmov.f32	s18, #20	; 0x40a00000  5.0
	menu[5].enc[0].lower_limit=0;
 8002af6:	f8c3 8000 	str.w	r8, [r3]
	menu[5].enc[0].upper_limit=100;
 8002afa:	f504 639b 	add.w	r3, r4, #1240	; 0x4d8
 8002afe:	f8c3 9000 	str.w	r9, [r3]
	menu[5].enc[0].step_size=1;
 8002b02:	f204 43dc 	addw	r3, r4, #1244	; 0x4dc
 8002b06:	601f      	str	r7, [r3, #0]
	strcpy(menu[5].enc[0].format,"%.0f");
 8002b08:	f002 fd7c 	bl	8005604 <strcpy>
	strcpy(menu[5].enc[1].name,"Depth");
 8002b0c:	4985      	ldr	r1, [pc, #532]	; (8002d24 <init_menu+0x754>)
 8002b0e:	f504 609d 	add.w	r0, r4, #1256	; 0x4e8
 8002b12:	f002 fd77 	bl	8005604 <strcpy>
	menu[5].enc[1].value=5;
 8002b16:	f204 43fc 	addw	r3, r4, #1276	; 0x4fc
	menu[5].enc[1].state=1;
 8002b1a:	f884 54f8 	strb.w	r5, [r4, #1272]	; 0x4f8
	strcpy(menu[5].enc[1].format,"%.0f");
 8002b1e:	f204 500c 	addw	r0, r4, #1292	; 0x50c
	menu[5].enc[1].value=5;
 8002b22:	ed83 9a00 	vstr	s18, [r3]
	menu[5].enc[1].lower_limit=0;
 8002b26:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
	strcpy(menu[5].enc[1].format,"%.0f");
 8002b2a:	4975      	ldr	r1, [pc, #468]	; (8002d00 <init_menu+0x730>)
	menu[5].enc[1].lower_limit=0;
 8002b2c:	f8c3 8000 	str.w	r8, [r3]
	menu[5].enc[1].upper_limit=20;
 8002b30:	f204 5304 	addw	r3, r4, #1284	; 0x504
 8002b34:	edc3 8a00 	vstr	s17, [r3]
	menu[5].enc[1].step_size=1;
 8002b38:	f504 63a1 	add.w	r3, r4, #1288	; 0x508
 8002b3c:	601f      	str	r7, [r3, #0]
	strcpy(menu[5].enc[1].format,"%.0f");
 8002b3e:	f002 fd61 	bl	8005604 <strcpy>
	strcpy(menu[5].enc[2].name,"Rate");
 8002b42:	4979      	ldr	r1, [pc, #484]	; (8002d28 <init_menu+0x758>)
 8002b44:	f204 5014 	addw	r0, r4, #1300	; 0x514
 8002b48:	f002 fd5c 	bl	8005604 <strcpy>
	menu[5].enc[2].value=5;
 8002b4c:	f504 63a5 	add.w	r3, r4, #1320	; 0x528
	menu[5].enc[2].state=1;
 8002b50:	f884 5524 	strb.w	r5, [r4, #1316]	; 0x524
	strcpy(menu[5].enc[2].format,"%.0f");
 8002b54:	f504 60a7 	add.w	r0, r4, #1336	; 0x538
	menu[5].enc[2].value=5;
 8002b58:	ed83 9a00 	vstr	s18, [r3]
	menu[5].enc[2].lower_limit=1;
 8002b5c:	f204 532c 	addw	r3, r4, #1324	; 0x52c
	strcpy(menu[5].enc[2].format,"%.0f");
 8002b60:	4967      	ldr	r1, [pc, #412]	; (8002d00 <init_menu+0x730>)
	menu[5].enc[2].lower_limit=1;
 8002b62:	601f      	str	r7, [r3, #0]
	menu[5].enc[2].upper_limit=10;
 8002b64:	f504 63a6 	add.w	r3, r4, #1328	; 0x530
 8002b68:	f8c3 a000 	str.w	sl, [r3]
	menu[5].enc[2].step_size=1;
 8002b6c:	f204 5334 	addw	r3, r4, #1332	; 0x534
 8002b70:	601f      	str	r7, [r3, #0]
	strcpy(menu[5].enc[2].format,"%.0f");
 8002b72:	f002 fd47 	bl	8005604 <strcpy>
	strcpy(menu[5].but[0].name,"Active");
 8002b76:	4966      	ldr	r1, [pc, #408]	; (8002d10 <init_menu+0x740>)
 8002b78:	f204 4074 	addw	r0, r4, #1140	; 0x474
 8002b7c:	f002 fd42 	bl	8005604 <strcpy>
	menu[5].but[0].state=1;
 8002b80:	f884 5484 	strb.w	r5, [r4, #1156]	; 0x484
	menu[5].but[0].value=1;
 8002b84:	f884 5485 	strb.w	r5, [r4, #1157]	; 0x485
	strcpy(menu[5].but[1].name,"Bright");
 8002b88:	f204 4086 	addw	r0, r4, #1158	; 0x486
 8002b8c:	4961      	ldr	r1, [pc, #388]	; (8002d14 <init_menu+0x744>)
 8002b8e:	f002 fd39 	bl	8005604 <strcpy>
	menu[5].but[1].state=0;
 8002b92:	f884 6496 	strb.w	r6, [r4, #1174]	; 0x496
	menu[5].but[1].value=0;
 8002b96:	f884 6497 	strb.w	r6, [r4, #1175]	; 0x497
	strcpy(menu[5].but[2].name,"Crisp");
 8002b9a:	f504 6093 	add.w	r0, r4, #1176	; 0x498
 8002b9e:	495e      	ldr	r1, [pc, #376]	; (8002d18 <init_menu+0x748>)
 8002ba0:	f002 fd30 	bl	8005604 <strcpy>
	menu[5].but[2].state=0;
 8002ba4:	f884 64a8 	strb.w	r6, [r4, #1192]	; 0x4a8
	menu[5].but[2].value=0;
 8002ba8:	f884 64a9 	strb.w	r6, [r4, #1193]	; 0x4a9
	strcpy(menu[5].but[3].name,"Tube");
 8002bac:	f204 40aa 	addw	r0, r4, #1194	; 0x4aa
 8002bb0:	495a      	ldr	r1, [pc, #360]	; (8002d1c <init_menu+0x74c>)
 8002bb2:	f002 fd27 	bl	8005604 <strcpy>
	menu[5].but[3].state=0;
 8002bb6:	f884 64ba 	strb.w	r6, [r4, #1210]	; 0x4ba
	menu[5].but[3].value=0;
 8002bba:	f884 64bb 	strb.w	r6, [r4, #1211]	; 0x4bb
	strcpy(menu[6].name,"Overdrive");
 8002bbe:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
 8002bc2:	495a      	ldr	r1, [pc, #360]	; (8002d2c <init_menu+0x75c>)
 8002bc4:	f002 fd1e 	bl	8005604 <strcpy>
	menu[6].ctrl_offset=30;
 8002bc8:	231e      	movs	r3, #30
	strcpy(menu[6].enc[0].name,"Gain");
 8002bca:	4959      	ldr	r1, [pc, #356]	; (8002d30 <init_menu+0x760>)
 8002bcc:	f204 509c 	addw	r0, r4, #1436	; 0x59c
	menu[6].ctrl_offset=30;
 8002bd0:	f8a4 3552 	strh.w	r3, [r4, #1362]	; 0x552
	strcpy(menu[6].enc[0].name,"Gain");
 8002bd4:	f002 fd16 	bl	8005604 <strcpy>
	menu[6].enc[0].value=3;
 8002bd8:	4a56      	ldr	r2, [pc, #344]	; (8002d34 <init_menu+0x764>)
 8002bda:	f504 63b6 	add.w	r3, r4, #1456	; 0x5b0
	menu[6].enc[0].state=1;
 8002bde:	f884 55ac 	strb.w	r5, [r4, #1452]	; 0x5ac
	strcpy(menu[6].enc[0].format,"%.0f");
 8002be2:	4947      	ldr	r1, [pc, #284]	; (8002d00 <init_menu+0x730>)
 8002be4:	f504 60b8 	add.w	r0, r4, #1472	; 0x5c0
	menu[6].enc[0].value=3;
 8002be8:	601a      	str	r2, [r3, #0]
	menu[6].enc[0].lower_limit=0;
 8002bea:	f204 53b4 	addw	r3, r4, #1460	; 0x5b4
 8002bee:	f8c3 8000 	str.w	r8, [r3]
	menu[6].enc[0].upper_limit=10;
 8002bf2:	f504 63b7 	add.w	r3, r4, #1464	; 0x5b8
 8002bf6:	f8c3 a000 	str.w	sl, [r3]
	menu[6].enc[0].step_size=1;
 8002bfa:	f204 53bc 	addw	r3, r4, #1468	; 0x5bc
 8002bfe:	601f      	str	r7, [r3, #0]
	strcpy(menu[6].enc[0].format,"%.0f");
 8002c00:	f002 fd00 	bl	8005604 <strcpy>
	strcpy(menu[6].enc[1].name,"Lo Cut");
 8002c04:	494c      	ldr	r1, [pc, #304]	; (8002d38 <init_menu+0x768>)
 8002c06:	f504 60b9 	add.w	r0, r4, #1480	; 0x5c8
 8002c0a:	f002 fcfb 	bl	8005604 <strcpy>
	menu[6].enc[1].value=220;
 8002c0e:	f204 53dc 	addw	r3, r4, #1500	; 0x5dc
 8002c12:	4a4a      	ldr	r2, [pc, #296]	; (8002d3c <init_menu+0x76c>)
	strcpy(menu[6].enc[1].format,"%.0f");
 8002c14:	f204 50ec 	addw	r0, r4, #1516	; 0x5ec
	menu[6].enc[1].state=1;
 8002c18:	f884 55d8 	strb.w	r5, [r4, #1496]	; 0x5d8
	menu[6].enc[1].value=220;
 8002c1c:	601a      	str	r2, [r3, #0]
	menu[6].enc[1].lower_limit=30;
 8002c1e:	f504 63bc 	add.w	r3, r4, #1504	; 0x5e0
	menu[6].enc[1].upper_limit=300;
 8002c22:	4a47      	ldr	r2, [pc, #284]	; (8002d40 <init_menu+0x770>)
	menu[6].enc[1].lower_limit=30;
 8002c24:	ed83 8a00 	vstr	s16, [r3]
	menu[6].enc[1].upper_limit=300;
 8002c28:	f204 53e4 	addw	r3, r4, #1508	; 0x5e4
	strcpy(menu[6].enc[1].format,"%.0f");
 8002c2c:	4934      	ldr	r1, [pc, #208]	; (8002d00 <init_menu+0x730>)
	menu[6].enc[1].upper_limit=300;
 8002c2e:	601a      	str	r2, [r3, #0]
	menu[6].enc[1].step_size=10;
 8002c30:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 8002c34:	f8c3 a000 	str.w	sl, [r3]
	strcpy(menu[6].enc[1].format,"%.0f");
 8002c38:	f002 fce4 	bl	8005604 <strcpy>
	strcpy(menu[6].enc[2].name,"Hi Cut");
 8002c3c:	4941      	ldr	r1, [pc, #260]	; (8002d44 <init_menu+0x774>)
 8002c3e:	f204 50f4 	addw	r0, r4, #1524	; 0x5f4
 8002c42:	f002 fcdf 	bl	8005604 <strcpy>
	menu[6].enc[2].value=4000;
 8002c46:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
	menu[6].enc[2].upper_limit=10000;
 8002c4a:	4a3f      	ldr	r2, [pc, #252]	; (8002d48 <init_menu+0x778>)
	strcpy(menu[6].enc[2].format,"%.0f");
 8002c4c:	f504 60c3 	add.w	r0, r4, #1560	; 0x618
	menu[6].enc[2].value=4000;
 8002c50:	f8c3 b000 	str.w	fp, [r3]
	menu[6].enc[2].lower_limit=800;
 8002c54:	f204 630c 	addw	r3, r4, #1548	; 0x60c
	menu[6].enc[2].state=1;
 8002c58:	f884 5604 	strb.w	r5, [r4, #1540]	; 0x604
	menu[6].enc[2].lower_limit=800;
 8002c5c:	ed83 ca00 	vstr	s24, [r3]
	menu[6].enc[2].upper_limit=10000;
 8002c60:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
	strcpy(menu[6].enc[2].format,"%.0f");
 8002c64:	4926      	ldr	r1, [pc, #152]	; (8002d00 <init_menu+0x730>)
	menu[6].enc[2].upper_limit=10000;
 8002c66:	601a      	str	r2, [r3, #0]
	menu[6].enc[2].step_size=100;
 8002c68:	f204 6314 	addw	r3, r4, #1556	; 0x614
 8002c6c:	f8c3 9000 	str.w	r9, [r3]
	strcpy(menu[6].enc[2].format,"%.0f");
 8002c70:	f002 fcc8 	bl	8005604 <strcpy>
	strcpy(menu[6].but[0].name,"Active");
 8002c74:	4926      	ldr	r1, [pc, #152]	; (8002d10 <init_menu+0x740>)
 8002c76:	f204 5054 	addw	r0, r4, #1364	; 0x554
 8002c7a:	f002 fcc3 	bl	8005604 <strcpy>
	menu[6].but[0].state=1;
 8002c7e:	f884 5564 	strb.w	r5, [r4, #1380]	; 0x564
	menu[6].but[0].value=0;
 8002c82:	f884 6565 	strb.w	r6, [r4, #1381]	; 0x565
	strcpy(menu[6].but[1].name,"Lo-Cut");
 8002c86:	f204 5066 	addw	r0, r4, #1382	; 0x566
 8002c8a:	4930      	ldr	r1, [pc, #192]	; (8002d4c <init_menu+0x77c>)
 8002c8c:	f002 fcba 	bl	8005604 <strcpy>
	menu[6].but[1].state=0;
 8002c90:	f884 6576 	strb.w	r6, [r4, #1398]	; 0x576
	menu[6].but[1].value=1;
 8002c94:	f884 5577 	strb.w	r5, [r4, #1399]	; 0x577
	strcpy(menu[6].but[2].name,"Crisp");
 8002c98:	f504 60af 	add.w	r0, r4, #1400	; 0x578
 8002c9c:	491e      	ldr	r1, [pc, #120]	; (8002d18 <init_menu+0x748>)
 8002c9e:	f002 fcb1 	bl	8005604 <strcpy>
	strcpy(menu[6].but[3].name,"Tube");
 8002ca2:	491e      	ldr	r1, [pc, #120]	; (8002d1c <init_menu+0x74c>)
	menu[6].but[2].state=0;
 8002ca4:	f884 6588 	strb.w	r6, [r4, #1416]	; 0x588
	strcpy(menu[6].but[3].name,"Tube");
 8002ca8:	f204 508a 	addw	r0, r4, #1418	; 0x58a
	menu[6].but[2].value=0;
 8002cac:	f884 6589 	strb.w	r6, [r4, #1417]	; 0x589
	strcpy(menu[6].but[3].name,"Tube");
 8002cb0:	f002 fca8 	bl	8005604 <strcpy>
	active_bits=0;
 8002cb4:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <init_menu+0x780>)
	menu[6].but[3].state=0;
 8002cb6:	f884 659a 	strb.w	r6, [r4, #1434]	; 0x59a
	menu[6].but[3].value=0;
 8002cba:	f884 659b 	strb.w	r6, [r4, #1435]	; 0x59b
		bank=i;
 8002cbe:	4c25      	ldr	r4, [pc, #148]	; (8002d54 <init_menu+0x784>)
	active_bits=0;
 8002cc0:	601e      	str	r6, [r3, #0]
	set_template();
 8002cc2:	f000 fb57 	bl	8003374 <set_template>
	init_settings();
 8002cc6:	f7ff fb2f 	bl	8002328 <init_settings>
		bank=i;
 8002cca:	7025      	strb	r5, [r4, #0]
	for(int i=1;i<n_context;i++){
 8002ccc:	3501      	adds	r5, #1
		update_dsp(0,1);
 8002cce:	2101      	movs	r1, #1
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f7ff faed 	bl	80022b0 <update_dsp>
	for(int i=1;i<n_context;i++){
 8002cd6:	2d07      	cmp	r5, #7
 8002cd8:	d1f7      	bne.n	8002cca <init_menu+0x6fa>
	if(*(uint8_t *) (BKPSRAM_BASE+BKPSRAM_BANK_OFFSET)<n_context){
 8002cda:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <init_menu+0x788>)
	init_success=1;
 8002cdc:	2201      	movs	r2, #1
	if(*(uint8_t *) (BKPSRAM_BASE+BKPSRAM_BANK_OFFSET)<n_context){
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b06      	cmp	r3, #6
		bank=0;
 8002ce2:	bf88      	it	hi
 8002ce4:	2300      	movhi	r3, #0
 8002ce6:	7023      	strb	r3, [r4, #0]
	init_success=1;
 8002ce8:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <init_menu+0x78c>)
 8002cea:	701a      	strb	r2, [r3, #0]
	update_context();
 8002cec:	f7ff fbd0 	bl	8002490 <update_context>
}
 8002cf0:	ecbd 8b0a 	vpop	{d8-d12}
 8002cf4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	update_led();
 8002cf8:	f7ff ba50 	b.w	800219c <update_led>
 8002cfc:	08009260 	.word	0x08009260
 8002d00:	0800920b 	.word	0x0800920b
 8002d04:	08009264 	.word	0x08009264
 8002d08:	0800926d 	.word	0x0800926d
 8002d0c:	44160000 	.word	0x44160000
 8002d10:	08009217 	.word	0x08009217
 8002d14:	0800923e 	.word	0x0800923e
 8002d18:	08009245 	.word	0x08009245
 8002d1c:	0800924b 	.word	0x0800924b
 8002d20:	08009272 	.word	0x08009272
 8002d24:	08009279 	.word	0x08009279
 8002d28:	0800927f 	.word	0x0800927f
 8002d2c:	08009284 	.word	0x08009284
 8002d30:	08009229 	.word	0x08009229
 8002d34:	40400000 	.word	0x40400000
 8002d38:	0800928e 	.word	0x0800928e
 8002d3c:	435c0000 	.word	0x435c0000
 8002d40:	43960000 	.word	0x43960000
 8002d44:	08009295 	.word	0x08009295
 8002d48:	461c4000 	.word	0x461c4000
 8002d4c:	0800929c 	.word	0x0800929c
 8002d50:	20001108 	.word	0x20001108
 8002d54:	20000fe8 	.word	0x20000fe8
 8002d58:	40024004 	.word	0x40024004
 8002d5c:	20000244 	.word	0x20000244

08002d60 <deinit_tuner>:
	draw_rect(0,ca_area_offset_y+w_l_thick,DP_WIDTH,DP_HEIGHT-2*(ca_area_offset_y+w_l_thick),0);
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <deinit_tuner+0x2c>)
void deinit_tuner(void){
 8002d62:	b507      	push	{r0, r1, r2, lr}
	draw_rect(0,ca_area_offset_y+w_l_thick,DP_WIDTH,DP_HEIGHT-2*(ca_area_offset_y+w_l_thick),0);
 8002d64:	8819      	ldrh	r1, [r3, #0]
 8002d66:	2000      	movs	r0, #0
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <deinit_tuner+0x30>)
 8002d6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	9000      	str	r0, [sp, #0]
 8002d72:	4419      	add	r1, r3
 8002d74:	f1c1 0378 	rsb	r3, r1, #120	; 0x78
 8002d78:	b209      	sxth	r1, r1
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	b21b      	sxth	r3, r3
 8002d7e:	f000 fad3 	bl	8003328 <draw_rect>
}
 8002d82:	b003      	add	sp, #12
 8002d84:	f85d eb04 	ldr.w	lr, [sp], #4
	update_context();
 8002d88:	f7ff bb82 	b.w	8002490 <update_context>
 8002d8c:	20000e7e 	.word	0x20000e7e
 8002d90:	2000088c 	.word	0x2000088c

08002d94 <toggle_mute>:
void toggle_mute(void){
 8002d94:	b538      	push	{r3, r4, r5, lr}
	mute_state=!mute_state;
 8002d96:	4c0f      	ldr	r4, [pc, #60]	; (8002dd4 <toggle_mute+0x40>)
 8002d98:	4d0f      	ldr	r5, [pc, #60]	; (8002dd8 <toggle_mute+0x44>)
 8002d9a:	7822      	ldrb	r2, [r4, #0]
 8002d9c:	f082 0201 	eor.w	r2, r2, #1
 8002da0:	7022      	strb	r2, [r4, #0]
	if(mute_state){							//Turned on
 8002da2:	b18a      	cbz	r2, 8002dc8 <toggle_mute+0x34>
		init_tuner();
 8002da4:	f7ff f9e2 	bl	800216c <init_tuner>
		ctrlreg_tx[0].u32|=1<<tuner_bank;
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
	if(mute_state){
 8002dae:	7822      	ldrb	r2, [r4, #0]
		ctrlreg_tx[0].u32=ctrlreg_tx[0].u32&~(1<<tuner_bank);
 8002db0:	602b      	str	r3, [r5, #0]
	if(mute_state){
 8002db2:	b102      	cbz	r2, 8002db6 <toggle_mute+0x22>
		HAL_GPIO_WritePin(PA_Standby_Port,PA_Standby_PIN,1);// Pull up Standby Pin
 8002db4:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(PA_Standby_Port,PA_Standby_PIN,0);// Pull down Standby Pin
 8002db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dba:	4808      	ldr	r0, [pc, #32]	; (8002ddc <toggle_mute+0x48>)
 8002dbc:	f7fd ff42 	bl	8000c44 <HAL_GPIO_WritePin>
}
 8002dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_led();
 8002dc4:	f7ff b9ea 	b.w	800219c <update_led>
		deinit_tuner();
 8002dc8:	f7ff ffca 	bl	8002d60 <deinit_tuner>
		ctrlreg_tx[0].u32=ctrlreg_tx[0].u32&~(1<<tuner_bank);
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dd2:	e7ec      	b.n	8002dae <toggle_mute+0x1a>
 8002dd4:	20000245 	.word	0x20000245
 8002dd8:	20000890 	.word	0x20000890
 8002ddc:	40021400 	.word	0x40021400

08002de0 <send_update>:
//
//}



void send_update(uint8_t bank_id, uint8_t type, uint8_t ctrl_id, union ctrltypes w1, union ctrltypes w2, union ctrltypes w3, union ctrltypes w4,union ctrltypes w5){
 8002de0:	b5f0      	push	{r4, r5, r6, r7, lr}

//	printf("Sending update\n");
	ctrl_tx[0].u8[0]=bank_id;
 8002de2:	4c0f      	ldr	r4, [pc, #60]	; (8002e20 <send_update+0x40>)
	ctrl_tx[0].u8[1]=type;
	ctrl_tx[0].u8[2]=ctrl_id;
	ctrlreg_tx[0].u8[3]=0;

	if(type==1){
 8002de4:	2901      	cmp	r1, #1
void send_update(uint8_t bank_id, uint8_t type, uint8_t ctrl_id, union ctrltypes w1, union ctrltypes w2, union ctrltypes w3, union ctrltypes w4,union ctrltypes w5){
 8002de6:	f8dd e014 	ldr.w	lr, [sp, #20]
 8002dea:	9f06      	ldr	r7, [sp, #24]
 8002dec:	9e07      	ldr	r6, [sp, #28]
 8002dee:	9d08      	ldr	r5, [sp, #32]
	ctrl_tx[0].u8[0]=bank_id;
 8002df0:	7020      	strb	r0, [r4, #0]
	ctrlreg_tx[0].u8[3]=0;
 8002df2:	f04f 0000 	mov.w	r0, #0
	ctrl_tx[0].u8[2]=ctrl_id;
 8002df6:	70a2      	strb	r2, [r4, #2]
	ctrlreg_tx[0].u8[3]=0;
 8002df8:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <send_update+0x44>)
	ctrl_tx[0].u8[1]=type;
 8002dfa:	7061      	strb	r1, [r4, #1]
	ctrlreg_tx[0].u8[3]=0;
 8002dfc:	70d0      	strb	r0, [r2, #3]
	ctrl_tx[4].f32=w4.f32;
	ctrl_tx[5].f32=w5.f32;

//	printf("Hash set %d\n",ctrl_tx[0].u32);

	HAL_SPI_Transmit(&hspi5, (uint8_t*) ctrl_tx, l_ctrl*4, 100);
 8002dfe:	f04f 0218 	mov.w	r2, #24
		ctrl_tx[1].u32=w1.u32;
 8002e02:	bf0c      	ite	eq
 8002e04:	6063      	streq	r3, [r4, #4]
		ctrl_tx[1].f32=w1.f32;
 8002e06:	6063      	strne	r3, [r4, #4]
	HAL_SPI_Transmit(&hspi5, (uint8_t*) ctrl_tx, l_ctrl*4, 100);
 8002e08:	2364      	movs	r3, #100	; 0x64
	ctrl_tx[2].f32=w2.f32;
 8002e0a:	f8c4 e008 	str.w	lr, [r4, #8]
	ctrl_tx[3].f32=w3.f32;
 8002e0e:	60e7      	str	r7, [r4, #12]
	ctrl_tx[4].f32=w4.f32;
 8002e10:	6126      	str	r6, [r4, #16]
	ctrl_tx[5].f32=w5.f32;
 8002e12:	6165      	str	r5, [r4, #20]
	HAL_SPI_Transmit(&hspi5, (uint8_t*) ctrl_tx, l_ctrl*4, 100);
 8002e14:	4902      	ldr	r1, [pc, #8]	; (8002e20 <send_update+0x40>)
 8002e16:	4804      	ldr	r0, [pc, #16]	; (8002e28 <send_update+0x48>)

//	printf("Update sent\n");

}
 8002e18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	HAL_SPI_Transmit(&hspi5, (uint8_t*) ctrl_tx, l_ctrl*4, 100);
 8002e1c:	f7fe bd68 	b.w	80018f0 <HAL_SPI_Transmit>
 8002e20:	20001090 	.word	0x20001090
 8002e24:	20000890 	.word	0x20000890
 8002e28:	20000940 	.word	0x20000940

08002e2c <update_encoder>:
void update_encoder(uint8_t eid, int diff){ //eid=encoder id
 8002e2c:	b530      	push	{r4, r5, lr}
 8002e2e:	4604      	mov	r4, r0
 8002e30:	b085      	sub	sp, #20
	val.f32=update_encoder_item(eid, diff);
 8002e32:	f7ff f8a9 	bl	8001f88 <update_encoder_item>
 8002e36:	ee10 5a10 	vmov	r5, s0
	update_encoder_value(eid);
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff f8da 	bl	8001ff4 <update_encoder_value>
	send_update(bank,0,eid,val,CTRLNULL,CTRLNULL,CTRLNULL,CTRLNULL);
 8002e40:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <update_encoder+0x34>)
 8002e42:	2100      	movs	r1, #0
 8002e44:	7818      	ldrb	r0, [r3, #0]
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <update_encoder+0x38>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	462b      	mov	r3, r5
 8002e4c:	9203      	str	r2, [sp, #12]
 8002e4e:	9202      	str	r2, [sp, #8]
 8002e50:	9201      	str	r2, [sp, #4]
 8002e52:	9200      	str	r2, [sp, #0]
 8002e54:	4622      	mov	r2, r4
 8002e56:	f7ff ffc3 	bl	8002de0 <send_update>
}
 8002e5a:	b005      	add	sp, #20
 8002e5c:	bd30      	pop	{r4, r5, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000fe8 	.word	0x20000fe8
 8002e64:	20000fe4 	.word	0x20000fe4

08002e68 <update_button>:
void update_button(uint8_t bid){ //bid=button id
 8002e68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	menu[bank].but[bid].value=!(menu[bank].but[bid].value);
 8002e6c:	4d19      	ldr	r5, [pc, #100]	; (8002ed4 <update_button+0x6c>)
 8002e6e:	2712      	movs	r7, #18
 8002e70:	f04f 08e0 	mov.w	r8, #224	; 0xe0
 8002e74:	4e18      	ldr	r6, [pc, #96]	; (8002ed8 <update_button+0x70>)
 8002e76:	4347      	muls	r7, r0
 8002e78:	782b      	ldrb	r3, [r5, #0]
void update_button(uint8_t bid){ //bid=button id
 8002e7a:	4604      	mov	r4, r0
	menu[bank].but[bid].value=!(menu[bank].but[bid].value);
 8002e7c:	fb08 7303 	mla	r3, r8, r3, r7
 8002e80:	4433      	add	r3, r6
 8002e82:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8002e86:	f082 0201 	eor.w	r2, r2, #1
 8002e8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	update_button_value(bid);
 8002e8e:	f7ff f8f3 	bl	8002078 <update_button_value>
	update_settings(bid,1);
 8002e92:	2101      	movs	r1, #1
 8002e94:	4620      	mov	r0, r4
 8002e96:	f7ff f9d5 	bl	8002244 <update_settings>
	update_active_bits(bid, 1);
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f7ff f947 	bl	8002130 <update_active_bits>
	if(bid==0){
 8002ea2:	b97c      	cbnz	r4, 8002ec4 <update_button+0x5c>
		val.u32=active_bits;
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <update_button+0x74>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
	send_update(bank,1,bid,val,CTRLNULL,CTRLNULL,CTRLNULL,CTRLNULL);
 8002ea8:	4a0d      	ldr	r2, [pc, #52]	; (8002ee0 <update_button+0x78>)
 8002eaa:	2101      	movs	r1, #1
 8002eac:	7828      	ldrb	r0, [r5, #0]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	9203      	str	r2, [sp, #12]
 8002eb2:	9202      	str	r2, [sp, #8]
 8002eb4:	9201      	str	r2, [sp, #4]
 8002eb6:	9200      	str	r2, [sp, #0]
 8002eb8:	4622      	mov	r2, r4
 8002eba:	f7ff ff91 	bl	8002de0 <send_update>
}
 8002ebe:	b004      	add	sp, #16
 8002ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		val.u32=(uint32_t)menu[bank].but[bid].value;
 8002ec4:	782b      	ldrb	r3, [r5, #0]
 8002ec6:	fb08 7703 	mla	r7, r8, r3, r7
 8002eca:	443e      	add	r6, r7
 8002ecc:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
 8002ed0:	e7ea      	b.n	8002ea8 <update_button+0x40>
 8002ed2:	bf00      	nop
 8002ed4:	20000fe8 	.word	0x20000fe8
 8002ed8:	2000026c 	.word	0x2000026c
 8002edc:	20001108 	.word	0x20001108
 8002ee0:	20000fe4 	.word	0x20000fe4

08002ee4 <send_command>:
//Global vars
int16_t cursor_x,cursor_y;
uint16_t textsize,textcolor,textbgcolor;


void send_command(uint8_t cmd) {
 8002ee4:	b513      	push	{r0, r1, r4, lr}
 8002ee6:	ac02      	add	r4, sp, #8
	HAL_GPIO_WritePin(DP_DC_PORT,DP_DC_PIN,0);// D/C Pin
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f44f 7100 	mov.w	r1, #512	; 0x200
void send_command(uint8_t cmd) {
 8002eee:	f804 0d01 	strb.w	r0, [r4, #-1]!
	HAL_GPIO_WritePin(DP_DC_PORT,DP_DC_PIN,0);// D/C Pin
 8002ef2:	4806      	ldr	r0, [pc, #24]	; (8002f0c <send_command+0x28>)
 8002ef4:	f7fd fea6 	bl	8000c44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&cmd,1,1000);
 8002ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002efc:	2201      	movs	r2, #1
 8002efe:	4621      	mov	r1, r4
 8002f00:	4803      	ldr	r0, [pc, #12]	; (8002f10 <send_command+0x2c>)
 8002f02:	f7fe fcf5 	bl	80018f0 <HAL_SPI_Transmit>
}
 8002f06:	b002      	add	sp, #8
 8002f08:	bd10      	pop	{r4, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40020800 	.word	0x40020800
 8002f10:	20000ec8 	.word	0x20000ec8

08002f14 <send_data>:

void send_data(uint8_t data) {
 8002f14:	b513      	push	{r0, r1, r4, lr}
 8002f16:	ac02      	add	r4, sp, #8
	HAL_GPIO_WritePin(DP_DC_PORT,DP_DC_PIN,1);// D/C Pin
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
void send_data(uint8_t data) {
 8002f1e:	f804 0d01 	strb.w	r0, [r4, #-1]!
	HAL_GPIO_WritePin(DP_DC_PORT,DP_DC_PIN,1);// D/C Pin
 8002f22:	4806      	ldr	r0, [pc, #24]	; (8002f3c <send_data+0x28>)
 8002f24:	f7fd fe8e 	bl	8000c44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&data,1,1000);
 8002f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4621      	mov	r1, r4
 8002f30:	4803      	ldr	r0, [pc, #12]	; (8002f40 <send_data+0x2c>)
 8002f32:	f7fe fcdd 	bl	80018f0 <HAL_SPI_Transmit>
}
 8002f36:	b002      	add	sp, #8
 8002f38:	bd10      	pop	{r4, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	20000ec8 	.word	0x20000ec8

08002f44 <send_data16>:
//  uint16_t wrd;
//  uint8_t byt[2];
//}clr;                    //Assign a var name to the Union

void send_data16(uint16_t *pdata)
{
 8002f44:	b570      	push	{r4, r5, r6, lr}

//	printf("Pointer: %d\t Content: %d\n",(int)pdata, *pdata);
	HAL_GPIO_WritePin(DP_DC_PORT,DP_DC_PIN,1);// D/C Pin
 8002f46:	2201      	movs	r2, #1
{
 8002f48:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(DP_DC_PORT,DP_DC_PIN,1);// D/C Pin
 8002f4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f4e:	480a      	ldr	r0, [pc, #40]	; (8002f78 <send_data16+0x34>)
 8002f50:	f7fd fe78 	bl	8000c44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,(uint8_t*)pdata+1,1,1000);
 8002f54:	4c09      	ldr	r4, [pc, #36]	; (8002f7c <send_data16+0x38>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	18a9      	adds	r1, r5, r2
 8002f60:	f7fe fcc6 	bl	80018f0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,(uint8_t*)pdata,1,1000);
 8002f64:	4629      	mov	r1, r5
 8002f66:	4620      	mov	r0, r4
 8002f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6c:	2201      	movs	r2, #1
//	HAL_SPI_Transmit(&hspi3,(uint8_t*)pdata,2,1000); //Reihenfolge andersherum
}
 8002f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_SPI_Transmit(&hspi3,(uint8_t*)pdata,1,1000);
 8002f72:	f7fe bcbd 	b.w	80018f0 <HAL_SPI_Transmit>
 8002f76:	bf00      	nop
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	20000ec8 	.word	0x20000ec8

08002f80 <send_data16rpt>:

void send_data16rpt(uint16_t *pdata, uint32_t cnt)
{
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	4605      	mov	r5, r0

//	printf("Pointer: %d\t Content: %d\n",(int)pdata, *pdata);
//	printf("Data:%d\tCount:%ld\n",*pdata,cnt);
	HAL_GPIO_WritePin(DP_DC_PORT,DP_DC_PIN,1);// D/C Pin
	while(cnt>0){
		HAL_SPI_Transmit(&hspi3,(uint8_t*)pdata+1,1,1000);
 8002f84:	4e0d      	ldr	r6, [pc, #52]	; (8002fbc <send_data16rpt+0x3c>)
{
 8002f86:	460c      	mov	r4, r1
	HAL_GPIO_WritePin(DP_DC_PORT,DP_DC_PIN,1);// D/C Pin
 8002f88:	2201      	movs	r2, #1
		HAL_SPI_Transmit(&hspi3,(uint8_t*)pdata+1,1,1000);
 8002f8a:	1c6f      	adds	r7, r5, #1
	HAL_GPIO_WritePin(DP_DC_PORT,DP_DC_PIN,1);// D/C Pin
 8002f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f90:	480b      	ldr	r0, [pc, #44]	; (8002fc0 <send_data16rpt+0x40>)
 8002f92:	f7fd fe57 	bl	8000c44 <HAL_GPIO_WritePin>
	while(cnt>0){
 8002f96:	b904      	cbnz	r4, 8002f9a <send_data16rpt+0x1a>
		HAL_SPI_Transmit(&hspi3,(uint8_t*)pdata,1,1000);
		cnt--;
	}
//	HAL_SPI_Transmit(&hspi3,(uint8_t*)pdata,2,1000); //Reihenfolge andersherum
}
 8002f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_SPI_Transmit(&hspi3,(uint8_t*)pdata+1,1,1000);
 8002f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4639      	mov	r1, r7
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f7fe fca4 	bl	80018f0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3,(uint8_t*)pdata,1,1000);
 8002fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fac:	2201      	movs	r2, #1
 8002fae:	4629      	mov	r1, r5
 8002fb0:	4630      	mov	r0, r6
		cnt--;
 8002fb2:	3c01      	subs	r4, #1
		HAL_SPI_Transmit(&hspi3,(uint8_t*)pdata,1,1000);
 8002fb4:	f7fe fc9c 	bl	80018f0 <HAL_SPI_Transmit>
 8002fb8:	e7ed      	b.n	8002f96 <send_data16rpt+0x16>
 8002fba:	bf00      	nop
 8002fbc:	20000ec8 	.word	0x20000ec8
 8002fc0:	40020800 	.word	0x40020800

08002fc4 <init_display>:

void init_display(void){
 8002fc4:	b538      	push	{r3, r4, r5, lr}

	HAL_GPIO_WritePin(DP_RST_PORT,DP_RST_PIN,1);// Reset Pin
 8002fc6:	4c95      	ldr	r4, [pc, #596]	; (800321c <init_display+0x258>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f44f 7180 	mov.w	r1, #256	; 0x100
	HAL_Delay(100);
	HAL_GPIO_WritePin(DP_RST_PORT,DP_RST_PIN,0);// Reset Pin
	HAL_Delay(100);
	HAL_GPIO_WritePin(DP_RST_PORT,DP_RST_PIN,1);// Reset Pin
	HAL_Delay(100);
	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,0);// CS Pin
 8002fce:	4d94      	ldr	r5, [pc, #592]	; (8003220 <init_display+0x25c>)
	HAL_GPIO_WritePin(DP_RST_PORT,DP_RST_PIN,1);// Reset Pin
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7fd fe37 	bl	8000c44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002fd6:	2064      	movs	r0, #100	; 0x64
 8002fd8:	f7fd fb54 	bl	8000684 <HAL_Delay>
	HAL_GPIO_WritePin(DP_RST_PORT,DP_RST_PIN,0);// Reset Pin
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f7fd fe2e 	bl	8000c44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002fe8:	2064      	movs	r0, #100	; 0x64
 8002fea:	f7fd fb4b 	bl	8000684 <HAL_Delay>
	HAL_GPIO_WritePin(DP_RST_PORT,DP_RST_PIN,1);// Reset Pin
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f7fd fe25 	bl	8000c44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002ffa:	2064      	movs	r0, #100	; 0x64
 8002ffc:	f7fd fb42 	bl	8000684 <HAL_Delay>
	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,0);// CS Pin
 8003000:	2200      	movs	r2, #0
 8003002:	2104      	movs	r1, #4
 8003004:	4628      	mov	r0, r5
 8003006:	f7fd fe1d 	bl	8000c44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800300a:	2064      	movs	r0, #100	; 0x64
 800300c:	f7fd fb3a 	bl	8000684 <HAL_Delay>

	send_command(0xCB); //Power control A
 8003010:	20cb      	movs	r0, #203	; 0xcb
 8003012:	f7ff ff67 	bl	8002ee4 <send_command>
	send_data(0x39);
 8003016:	2039      	movs	r0, #57	; 0x39
 8003018:	f7ff ff7c 	bl	8002f14 <send_data>
	send_data(0x2C);
 800301c:	202c      	movs	r0, #44	; 0x2c
 800301e:	f7ff ff79 	bl	8002f14 <send_data>
	send_data(0x00);
 8003022:	2000      	movs	r0, #0
 8003024:	f7ff ff76 	bl	8002f14 <send_data>
	send_data(0x34);
 8003028:	2034      	movs	r0, #52	; 0x34
 800302a:	f7ff ff73 	bl	8002f14 <send_data>
	send_data(0x02);
 800302e:	2002      	movs	r0, #2
 8003030:	f7ff ff70 	bl	8002f14 <send_data>

	send_command(0xCF);//Power control B
 8003034:	20cf      	movs	r0, #207	; 0xcf
 8003036:	f7ff ff55 	bl	8002ee4 <send_command>
	send_data(0x00);
 800303a:	2000      	movs	r0, #0
 800303c:	f7ff ff6a 	bl	8002f14 <send_data>
	send_data(0XC1);
 8003040:	20c1      	movs	r0, #193	; 0xc1
 8003042:	f7ff ff67 	bl	8002f14 <send_data>
	send_data(0X30);
 8003046:	2030      	movs	r0, #48	; 0x30
 8003048:	f7ff ff64 	bl	8002f14 <send_data>

	send_command(0xE8); //Driver timing control A
 800304c:	20e8      	movs	r0, #232	; 0xe8
 800304e:	f7ff ff49 	bl	8002ee4 <send_command>
	send_data(0x85);
 8003052:	2085      	movs	r0, #133	; 0x85
 8003054:	f7ff ff5e 	bl	8002f14 <send_data>
	send_data(0x00);
 8003058:	2000      	movs	r0, #0
 800305a:	f7ff ff5b 	bl	8002f14 <send_data>
	send_data(0x78);
 800305e:	2078      	movs	r0, #120	; 0x78
 8003060:	f7ff ff58 	bl	8002f14 <send_data>

	send_command(0xEA); //Driver timing control A
 8003064:	20ea      	movs	r0, #234	; 0xea
 8003066:	f7ff ff3d 	bl	8002ee4 <send_command>
	send_data(0x00);
 800306a:	2000      	movs	r0, #0
 800306c:	f7ff ff52 	bl	8002f14 <send_data>
	send_data(0x00);
 8003070:	2000      	movs	r0, #0
 8003072:	f7ff ff4f 	bl	8002f14 <send_data>

	send_command(0xED); //Power on sequence control
 8003076:	20ed      	movs	r0, #237	; 0xed
 8003078:	f7ff ff34 	bl	8002ee4 <send_command>
	send_data(0x64);
 800307c:	2064      	movs	r0, #100	; 0x64
 800307e:	f7ff ff49 	bl	8002f14 <send_data>
	send_data(0x03);
 8003082:	2003      	movs	r0, #3
 8003084:	f7ff ff46 	bl	8002f14 <send_data>
	send_data(0X12);
 8003088:	2012      	movs	r0, #18
 800308a:	f7ff ff43 	bl	8002f14 <send_data>
	send_data(0X81);
 800308e:	2081      	movs	r0, #129	; 0x81
 8003090:	f7ff ff40 	bl	8002f14 <send_data>

	send_command(0xF7);  //Pump ratio control
 8003094:	20f7      	movs	r0, #247	; 0xf7
 8003096:	f7ff ff25 	bl	8002ee4 <send_command>
	send_data(0x20);
 800309a:	2020      	movs	r0, #32
 800309c:	f7ff ff3a 	bl	8002f14 <send_data>

	send_command(0xC0);  //Power control
 80030a0:	20c0      	movs	r0, #192	; 0xc0
 80030a2:	f7ff ff1f 	bl	8002ee4 <send_command>
	send_data(0b00001001);      //3,3V
 80030a6:	2009      	movs	r0, #9
 80030a8:	f7ff ff34 	bl	8002f14 <send_data>

	send_command(0xC1);  //Power control
 80030ac:	20c1      	movs	r0, #193	; 0xc1
 80030ae:	f7ff ff19 	bl	8002ee4 <send_command>
	send_data(0x10);      //SAP[2:0];BT[3:0]
 80030b2:	2010      	movs	r0, #16
 80030b4:	f7ff ff2e 	bl	8002f14 <send_data>

	send_command(0xC5);  //VCM control
 80030b8:	20c5      	movs	r0, #197	; 0xc5
 80030ba:	f7ff ff13 	bl	8002ee4 <send_command>
	send_data(0x3e);
 80030be:	203e      	movs	r0, #62	; 0x3e
 80030c0:	f7ff ff28 	bl	8002f14 <send_data>
	send_data(0x28);
 80030c4:	2028      	movs	r0, #40	; 0x28
 80030c6:	f7ff ff25 	bl	8002f14 <send_data>

	send_command(0xC7);    //VCM control2
 80030ca:	20c7      	movs	r0, #199	; 0xc7
 80030cc:	f7ff ff0a 	bl	8002ee4 <send_command>
	send_data(0x86);
 80030d0:	2086      	movs	r0, #134	; 0x86
 80030d2:	f7ff ff1f 	bl	8002f14 <send_data>

	send_command(0x36);    // Memory Access Control
 80030d6:	2036      	movs	r0, #54	; 0x36
 80030d8:	f7ff ff04 	bl	8002ee4 <send_command>
	send_data(0b11111100);
 80030dc:	20fc      	movs	r0, #252	; 0xfc
 80030de:	f7ff ff19 	bl	8002f14 <send_data>

	send_command(0x3A); //Pixel format
 80030e2:	203a      	movs	r0, #58	; 0x3a
 80030e4:	f7ff fefe 	bl	8002ee4 <send_command>
	send_data(0x55);
 80030e8:	2055      	movs	r0, #85	; 0x55
 80030ea:	f7ff ff13 	bl	8002f14 <send_data>

	send_command(0xB1); //Frame rate control
 80030ee:	20b1      	movs	r0, #177	; 0xb1
 80030f0:	f7ff fef8 	bl	8002ee4 <send_command>
	send_data(0x00);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7ff ff0d 	bl	8002f14 <send_data>
	send_data(0x18);
 80030fa:	2018      	movs	r0, #24
 80030fc:	f7ff ff0a 	bl	8002f14 <send_data>

	send_command(0xB6);    // Display Function Control
 8003100:	20b6      	movs	r0, #182	; 0xb6
 8003102:	f7ff feef 	bl	8002ee4 <send_command>
	send_data(0x08);
 8003106:	2008      	movs	r0, #8
 8003108:	f7ff ff04 	bl	8002f14 <send_data>
	send_data(0x82);
 800310c:	2082      	movs	r0, #130	; 0x82
 800310e:	f7ff ff01 	bl	8002f14 <send_data>
	send_data(0x27);
 8003112:	2027      	movs	r0, #39	; 0x27
 8003114:	f7ff fefe 	bl	8002f14 <send_data>

	send_command(0xF2);    // 3Gamma Function Disable
 8003118:	20f2      	movs	r0, #242	; 0xf2
 800311a:	f7ff fee3 	bl	8002ee4 <send_command>
	send_data(0x00);
 800311e:	2000      	movs	r0, #0
 8003120:	f7ff fef8 	bl	8002f14 <send_data>

	send_command(0x26);    //Gamma curve selected
 8003124:	2026      	movs	r0, #38	; 0x26
 8003126:	f7ff fedd 	bl	8002ee4 <send_command>
	send_data(0x01);
 800312a:	2001      	movs	r0, #1
 800312c:	f7ff fef2 	bl	8002f14 <send_data>

	send_command(0xE0);    //Set Gamma
 8003130:	20e0      	movs	r0, #224	; 0xe0
 8003132:	f7ff fed7 	bl	8002ee4 <send_command>
	send_data(0x0F);
 8003136:	200f      	movs	r0, #15
 8003138:	f7ff feec 	bl	8002f14 <send_data>
	send_data(0x31);
 800313c:	2031      	movs	r0, #49	; 0x31
 800313e:	f7ff fee9 	bl	8002f14 <send_data>
	send_data(0x2B);
 8003142:	202b      	movs	r0, #43	; 0x2b
 8003144:	f7ff fee6 	bl	8002f14 <send_data>
	send_data(0x0C);
 8003148:	200c      	movs	r0, #12
 800314a:	f7ff fee3 	bl	8002f14 <send_data>
	send_data(0x0E);
 800314e:	200e      	movs	r0, #14
 8003150:	f7ff fee0 	bl	8002f14 <send_data>
	send_data(0x08);
 8003154:	2008      	movs	r0, #8
 8003156:	f7ff fedd 	bl	8002f14 <send_data>
	send_data(0x4E);
 800315a:	204e      	movs	r0, #78	; 0x4e
 800315c:	f7ff feda 	bl	8002f14 <send_data>
	send_data(0xF1);
 8003160:	20f1      	movs	r0, #241	; 0xf1
 8003162:	f7ff fed7 	bl	8002f14 <send_data>
	send_data(0x37);
 8003166:	2037      	movs	r0, #55	; 0x37
 8003168:	f7ff fed4 	bl	8002f14 <send_data>
	send_data(0x07);
 800316c:	2007      	movs	r0, #7
 800316e:	f7ff fed1 	bl	8002f14 <send_data>
	send_data(0x10);
 8003172:	2010      	movs	r0, #16
 8003174:	f7ff fece 	bl	8002f14 <send_data>
	send_data(0x03);
 8003178:	2003      	movs	r0, #3
 800317a:	f7ff fecb 	bl	8002f14 <send_data>
	send_data(0x0E);
 800317e:	200e      	movs	r0, #14
 8003180:	f7ff fec8 	bl	8002f14 <send_data>
	send_data(0x09);
 8003184:	2009      	movs	r0, #9
 8003186:	f7ff fec5 	bl	8002f14 <send_data>
	send_data(0x00);
 800318a:	2000      	movs	r0, #0
 800318c:	f7ff fec2 	bl	8002f14 <send_data>

	send_command(0XE1);    //Set Gamma
 8003190:	20e1      	movs	r0, #225	; 0xe1
 8003192:	f7ff fea7 	bl	8002ee4 <send_command>
	send_data(0x00);
 8003196:	2000      	movs	r0, #0
 8003198:	f7ff febc 	bl	8002f14 <send_data>
	send_data(0x0E);
 800319c:	200e      	movs	r0, #14
 800319e:	f7ff feb9 	bl	8002f14 <send_data>
	send_data(0x14);
 80031a2:	2014      	movs	r0, #20
 80031a4:	f7ff feb6 	bl	8002f14 <send_data>
	send_data(0x03);
 80031a8:	2003      	movs	r0, #3
 80031aa:	f7ff feb3 	bl	8002f14 <send_data>
	send_data(0x11);
 80031ae:	2011      	movs	r0, #17
 80031b0:	f7ff feb0 	bl	8002f14 <send_data>
	send_data(0x07);
 80031b4:	2007      	movs	r0, #7
 80031b6:	f7ff fead 	bl	8002f14 <send_data>
	send_data(0x31);
 80031ba:	2031      	movs	r0, #49	; 0x31
 80031bc:	f7ff feaa 	bl	8002f14 <send_data>
	send_data(0xC1);
 80031c0:	20c1      	movs	r0, #193	; 0xc1
 80031c2:	f7ff fea7 	bl	8002f14 <send_data>
	send_data(0x48);
 80031c6:	2048      	movs	r0, #72	; 0x48
 80031c8:	f7ff fea4 	bl	8002f14 <send_data>
	send_data(0x08);
 80031cc:	2008      	movs	r0, #8
 80031ce:	f7ff fea1 	bl	8002f14 <send_data>
	send_data(0x0F);
 80031d2:	200f      	movs	r0, #15
 80031d4:	f7ff fe9e 	bl	8002f14 <send_data>
	send_data(0x0C);
 80031d8:	200c      	movs	r0, #12
 80031da:	f7ff fe9b 	bl	8002f14 <send_data>
	send_data(0x31);
 80031de:	2031      	movs	r0, #49	; 0x31
 80031e0:	f7ff fe98 	bl	8002f14 <send_data>
	send_data(0x36);
 80031e4:	2036      	movs	r0, #54	; 0x36
 80031e6:	f7ff fe95 	bl	8002f14 <send_data>
	send_data(0x0F);
 80031ea:	200f      	movs	r0, #15
 80031ec:	f7ff fe92 	bl	8002f14 <send_data>

	send_command(0x11);    //Exit Sleep
 80031f0:	2011      	movs	r0, #17
 80031f2:	f7ff fe77 	bl	8002ee4 <send_command>
	HAL_GPIO_WritePin(DP_RST_PORT,DP_RST_PIN,1);// Reset Pin
 80031f6:	2201      	movs	r2, #1
 80031f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031fc:	4620      	mov	r0, r4
 80031fe:	f7fd fd21 	bl	8000c44 <HAL_GPIO_WritePin>

	send_command(0x29);    //Display on
 8003202:	2029      	movs	r0, #41	; 0x29
 8003204:	f7ff fe6e 	bl	8002ee4 <send_command>
	send_command(0x2c);
 8003208:	202c      	movs	r0, #44	; 0x2c
 800320a:	f7ff fe6b 	bl	8002ee4 <send_command>

	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,1);// CS Pin
 800320e:	4628      	mov	r0, r5
 8003210:	2201      	movs	r2, #1
 8003212:	2104      	movs	r1, #4

}
 8003214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,1);// CS Pin
 8003218:	f7fd bd14 	b.w	8000c44 <HAL_GPIO_WritePin>
 800321c:	40020800 	.word	0x40020800
 8003220:	40020c00 	.word	0x40020c00

08003224 <set_address>:

  HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,1);// CS Pin hi
}

void set_address (uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003224:	b507      	push	{r0, r1, r2, lr}
 8003226:	f8ad 0006 	strh.w	r0, [sp, #6]
//	printf("Address: x1:%d\tx2:%d\ty1:%d\ty2:%d\n",x1, x2,y1,y2);
   send_command(0x2a);
 800322a:	202a      	movs	r0, #42	; 0x2a
{
 800322c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8003230:	f8ad 2002 	strh.w	r2, [sp, #2]
 8003234:	f8ad 3000 	strh.w	r3, [sp]
   send_command(0x2a);
 8003238:	f7ff fe54 	bl	8002ee4 <send_command>
   send_data16(&x1);
 800323c:	f10d 0006 	add.w	r0, sp, #6
 8003240:	f7ff fe80 	bl	8002f44 <send_data16>
   send_data16(&x2);
 8003244:	f10d 0002 	add.w	r0, sp, #2
 8003248:	f7ff fe7c 	bl	8002f44 <send_data16>

   send_command(0x2b);
 800324c:	202b      	movs	r0, #43	; 0x2b
 800324e:	f7ff fe49 	bl	8002ee4 <send_command>
   send_data16(&y1);
 8003252:	a801      	add	r0, sp, #4
 8003254:	f7ff fe76 	bl	8002f44 <send_data16>
   send_data16(&y2);
 8003258:	4668      	mov	r0, sp
 800325a:	f7ff fe73 	bl	8002f44 <send_data16>

   send_command(0x2C);
 800325e:	202c      	movs	r0, #44	; 0x2c
 8003260:	f7ff fe40 	bl	8002ee4 <send_command>
}
 8003264:	b003      	add	sp, #12
 8003266:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800326c <draw_vline>:
	draw_vline(160,DP_HEIGHT,-60,1,65535);
	draw_vline(DP_HEIGHT,DP_HEIGHT,-60,1,65535);
}

void draw_vline(int16_t x1, int16_t y1, int16_t h, uint16_t t, uint16_t color)
{
 800326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326e:	460c      	mov	r4, r1
 8003270:	4615      	mov	r5, r2
 8003272:	4607      	mov	r7, r0

	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,0);// CS Pin lo
 8003274:	2200      	movs	r2, #0
 8003276:	2104      	movs	r1, #4
 8003278:	4813      	ldr	r0, [pc, #76]	; (80032c8 <draw_vline+0x5c>)
{
 800327a:	461e      	mov	r6, r3
	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,0);// CS Pin lo
 800327c:	f7fd fce2 	bl	8000c44 <HAL_GPIO_WritePin>
 8003280:	b2a1      	uxth	r1, r4
	if(h>0){
 8003282:	2d00      	cmp	r5, #0
 8003284:	b2b8      	uxth	r0, r7
 8003286:	f106 32ff 	add.w	r2, r6, #4294967295
		set_address(x1, y1, x1 + t-1, y1+h-1);
 800328a:	f101 33ff 	add.w	r3, r1, #4294967295
	if(h>0){
 800328e:	dd10      	ble.n	80032b2 <draw_vline+0x46>
		set_address(x1, y1, x1 + t-1, y1+h-1);
 8003290:	4402      	add	r2, r0
 8003292:	442b      	add	r3, r5
 8003294:	b292      	uxth	r2, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	f7ff ffc4 	bl	8003224 <set_address>
		send_data16rpt(&color, ((uint32_t) t) * ((uint32_t) h));
 800329c:	fb05 f106 	mul.w	r1, r5, r6
	}else{
		set_address(x1, y1+h, x1 + t-1, y1-1);
		send_data16rpt(&color, ((uint32_t) t) * ((uint32_t) -h));
 80032a0:	a806      	add	r0, sp, #24
 80032a2:	f7ff fe6d 	bl	8002f80 <send_data16rpt>
	}
	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,1);// CS Pin hi
 80032a6:	2201      	movs	r2, #1
 80032a8:	2104      	movs	r1, #4
 80032aa:	4807      	ldr	r0, [pc, #28]	; (80032c8 <draw_vline+0x5c>)
 80032ac:	f7fd fcca 	bl	8000c44 <HAL_GPIO_WritePin>
 80032b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		set_address(x1, y1+h, x1 + t-1, y1-1);
 80032b2:	4402      	add	r2, r0
 80032b4:	4429      	add	r1, r5
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	b289      	uxth	r1, r1
 80032ba:	b292      	uxth	r2, r2
 80032bc:	f7ff ffb2 	bl	8003224 <set_address>
		send_data16rpt(&color, ((uint32_t) t) * ((uint32_t) -h));
 80032c0:	4269      	negs	r1, r5
 80032c2:	4371      	muls	r1, r6
 80032c4:	e7ec      	b.n	80032a0 <draw_vline+0x34>
 80032c6:	bf00      	nop
 80032c8:	40020c00 	.word	0x40020c00

080032cc <draw_hline>:
}

void draw_hline(int16_t x1, int16_t y1, int16_t w, uint16_t t, uint16_t color)
{
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	4604      	mov	r4, r0
 80032d0:	460e      	mov	r6, r1
 80032d2:	4615      	mov	r5, r2
 80032d4:	461f      	mov	r7, r3

	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,0);// CS Pin lo
 80032d6:	2200      	movs	r2, #0
 80032d8:	2104      	movs	r1, #4
 80032da:	4812      	ldr	r0, [pc, #72]	; (8003324 <draw_hline+0x58>)
 80032dc:	f7fd fcb2 	bl	8000c44 <HAL_GPIO_WritePin>
 80032e0:	1e7b      	subs	r3, r7, #1
 80032e2:	b2a0      	uxth	r0, r4
	if(w>0){
 80032e4:	2d00      	cmp	r5, #0
 80032e6:	b2b1      	uxth	r1, r6
		set_address(x1, y1, x1 + w-1, y1+t-1);
 80032e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80032ec:	440b      	add	r3, r1
	if(w>0){
 80032ee:	dd0f      	ble.n	8003310 <draw_hline+0x44>
		set_address(x1, y1, x1 + w-1, y1+t-1);
 80032f0:	442a      	add	r2, r5
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	b292      	uxth	r2, r2
 80032f6:	f7ff ff95 	bl	8003224 <set_address>
		send_data16rpt(&color, ((uint32_t) t) * ((uint32_t) w));
 80032fa:	fb05 f107 	mul.w	r1, r5, r7
	}else{
		set_address(x1 + w, y1, x1-1, y1+t-1);
		send_data16rpt(&color, ((uint32_t) t) * ((uint32_t) -w));
 80032fe:	a806      	add	r0, sp, #24
 8003300:	f7ff fe3e 	bl	8002f80 <send_data16rpt>
	}

	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,1);// CS Pin hi
 8003304:	2201      	movs	r2, #1
 8003306:	2104      	movs	r1, #4
 8003308:	4806      	ldr	r0, [pc, #24]	; (8003324 <draw_hline+0x58>)
 800330a:	f7fd fc9b 	bl	8000c44 <HAL_GPIO_WritePin>
 800330e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		set_address(x1 + w, y1, x1-1, y1+t-1);
 8003310:	4428      	add	r0, r5
 8003312:	b29b      	uxth	r3, r3
 8003314:	b292      	uxth	r2, r2
 8003316:	b280      	uxth	r0, r0
 8003318:	f7ff ff84 	bl	8003224 <set_address>
		send_data16rpt(&color, ((uint32_t) t) * ((uint32_t) -w));
 800331c:	4269      	negs	r1, r5
 800331e:	4379      	muls	r1, r7
 8003320:	e7ed      	b.n	80032fe <draw_hline+0x32>
 8003322:	bf00      	nop
 8003324:	40020c00 	.word	0x40020c00

08003328 <draw_rect>:
}

void draw_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,0);// CS Pin lo
 800332c:	4e10      	ldr	r6, [pc, #64]	; (8003370 <draw_rect+0x48>)
{
 800332e:	4690      	mov	r8, r2
 8003330:	461f      	mov	r7, r3
 8003332:	4604      	mov	r4, r0
 8003334:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,0);// CS Pin lo
 8003336:	4630      	mov	r0, r6
 8003338:	2200      	movs	r2, #0
 800333a:	2104      	movs	r1, #4
 800333c:	f7fd fc82 	bl	8000c44 <HAL_GPIO_WritePin>
	set_address(x, y, x + w - 1, y + h - 1);
 8003340:	1e7b      	subs	r3, r7, #1
 8003342:	b2a0      	uxth	r0, r4
 8003344:	f108 32ff 	add.w	r2, r8, #4294967295
 8003348:	b2a9      	uxth	r1, r5
 800334a:	4402      	add	r2, r0
 800334c:	440b      	add	r3, r1
 800334e:	b292      	uxth	r2, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	f7ff ff67 	bl	8003224 <set_address>
	send_data16rpt(&color, ((uint32_t) w) * ((uint32_t) h));
 8003356:	fb08 f107 	mul.w	r1, r8, r7
 800335a:	a806      	add	r0, sp, #24
 800335c:	f7ff fe10 	bl	8002f80 <send_data16rpt>
	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,1);// CS Pin hi
 8003360:	2201      	movs	r2, #1
 8003362:	2104      	movs	r1, #4
 8003364:	4630      	mov	r0, r6
 8003366:	f7fd fc6d 	bl	8000c44 <HAL_GPIO_WritePin>
 800336a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800336e:	bf00      	nop
 8003370:	40020c00 	.word	0x40020c00

08003374 <set_template>:
{
 8003374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	desc_offset_y=15;
 8003378:	4b3c      	ldr	r3, [pc, #240]	; (800346c <set_template+0xf8>)
 800337a:	220f      	movs	r2, #15
	rot_offset[1]=160;
 800337c:	f04f 08a0 	mov.w	r8, #160	; 0xa0
	desc_color=0xFFFF;
 8003380:	f64f 74ff 	movw	r4, #65535	; 0xffff
	desc_offset_y=15;
 8003384:	801a      	strh	r2, [r3, #0]
	val_offset_y=45;
 8003386:	222d      	movs	r2, #45	; 0x2d
 8003388:	4b39      	ldr	r3, [pc, #228]	; (8003470 <set_template+0xfc>)
	ca_area_offset_x=0;
 800338a:	2500      	movs	r5, #0
	ca_area_offset_y=70;
 800338c:	f04f 0946 	mov.w	r9, #70	; 0x46
	w_l_thick=3;
 8003390:	2703      	movs	r7, #3
	val_offset_y=45;
 8003392:	801a      	strh	r2, [r3, #0]
	rot_offset[0]=53;
 8003394:	2235      	movs	r2, #53	; 0x35
 8003396:	4b37      	ldr	r3, [pc, #220]	; (8003474 <set_template+0x100>)
	w_l_thin=1;
 8003398:	2601      	movs	r6, #1
	draw_rect(0,0,DP_WIDTH,DP_HEIGHT,0);
 800339a:	4629      	mov	r1, r5
 800339c:	4628      	mov	r0, r5
	rot_offset[0]=53;
 800339e:	801a      	strh	r2, [r3, #0]
	rot_offset[2]=267;
 80033a0:	f240 120b 	movw	r2, #267	; 0x10b
	rot_offset[1]=160;
 80033a4:	f8a3 8002 	strh.w	r8, [r3, #2]
	rot_offset[2]=267;
 80033a8:	809a      	strh	r2, [r3, #4]
	but_offset[0]=40;
 80033aa:	2228      	movs	r2, #40	; 0x28
 80033ac:	4b32      	ldr	r3, [pc, #200]	; (8003478 <set_template+0x104>)
 80033ae:	801a      	strh	r2, [r3, #0]
	but_offset[1]=120;
 80033b0:	2278      	movs	r2, #120	; 0x78
 80033b2:	805a      	strh	r2, [r3, #2]
	but_offset[2]=200;
 80033b4:	22c8      	movs	r2, #200	; 0xc8
 80033b6:	809a      	strh	r2, [r3, #4]
	but_offset[3]=280;
 80033b8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80033bc:	80da      	strh	r2, [r3, #6]
	val_color=0xAE3F;
 80033be:	f64a 623f 	movw	r2, #44607	; 0xae3f
	desc_color=0xFFFF;
 80033c2:	4b2e      	ldr	r3, [pc, #184]	; (800347c <set_template+0x108>)
 80033c4:	801c      	strh	r4, [r3, #0]
	val_color=0xAE3F;
 80033c6:	4b2e      	ldr	r3, [pc, #184]	; (8003480 <set_template+0x10c>)
 80033c8:	801a      	strh	r2, [r3, #0]
	active_color=0xD7F8;
 80033ca:	f24d 72f8 	movw	r2, #55288	; 0xd7f8
 80033ce:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <set_template+0x110>)
 80033d0:	801a      	strh	r2, [r3, #0]
	inactive_color=0xFE38;
 80033d2:	f64f 6238 	movw	r2, #65080	; 0xfe38
 80033d6:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <set_template+0x114>)
 80033d8:	801a      	strh	r2, [r3, #0]
	draw_rect(0,0,DP_WIDTH,DP_HEIGHT,0);
 80033da:	f44f 72a0 	mov.w	r2, #320	; 0x140
	ca_area_offset_x=0;
 80033de:	4b2b      	ldr	r3, [pc, #172]	; (800348c <set_template+0x118>)
 80033e0:	801d      	strh	r5, [r3, #0]
	ca_area_offset_y=70;
 80033e2:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <set_template+0x11c>)
 80033e4:	f8a3 9000 	strh.w	r9, [r3]
	w_l_thick=3;
 80033e8:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <set_template+0x120>)
 80033ea:	801f      	strh	r7, [r3, #0]
	w_l_thin=1;
 80033ec:	4b2a      	ldr	r3, [pc, #168]	; (8003498 <set_template+0x124>)
 80033ee:	801e      	strh	r6, [r3, #0]
	draw_rect(0,0,DP_WIDTH,DP_HEIGHT,0);
 80033f0:	23f0      	movs	r3, #240	; 0xf0
 80033f2:	9500      	str	r5, [sp, #0]
 80033f4:	f7ff ff98 	bl	8003328 <draw_rect>
	draw_hline(0,170,DP_WIDTH,3,65535);
 80033f8:	463b      	mov	r3, r7
 80033fa:	4628      	mov	r0, r5
 80033fc:	9400      	str	r4, [sp, #0]
 80033fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003402:	21aa      	movs	r1, #170	; 0xaa
 8003404:	f7ff ff62 	bl	80032cc <draw_hline>
	draw_hline(0,70,DP_WIDTH,3,65535);
 8003408:	463b      	mov	r3, r7
 800340a:	4649      	mov	r1, r9
 800340c:	4628      	mov	r0, r5
 800340e:	9400      	str	r4, [sp, #0]
 8003410:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003414:	f7ff ff5a 	bl	80032cc <draw_hline>
	draw_vline(106,0,60,1,65535);
 8003418:	4633      	mov	r3, r6
 800341a:	4629      	mov	r1, r5
 800341c:	9400      	str	r4, [sp, #0]
 800341e:	223c      	movs	r2, #60	; 0x3c
 8003420:	206a      	movs	r0, #106	; 0x6a
 8003422:	f7ff ff23 	bl	800326c <draw_vline>
	draw_vline(212,0,60,1,65535);
 8003426:	4633      	mov	r3, r6
 8003428:	4629      	mov	r1, r5
 800342a:	9400      	str	r4, [sp, #0]
 800342c:	223c      	movs	r2, #60	; 0x3c
 800342e:	20d4      	movs	r0, #212	; 0xd4
 8003430:	f7ff ff1c 	bl	800326c <draw_vline>
	draw_vline(80,DP_HEIGHT,-60,1,65535);
 8003434:	4633      	mov	r3, r6
 8003436:	9400      	str	r4, [sp, #0]
 8003438:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 800343c:	21f0      	movs	r1, #240	; 0xf0
 800343e:	2050      	movs	r0, #80	; 0x50
 8003440:	f7ff ff14 	bl	800326c <draw_vline>
	draw_vline(160,DP_HEIGHT,-60,1,65535);
 8003444:	4633      	mov	r3, r6
 8003446:	4640      	mov	r0, r8
 8003448:	9400      	str	r4, [sp, #0]
 800344a:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 800344e:	21f0      	movs	r1, #240	; 0xf0
 8003450:	f7ff ff0c 	bl	800326c <draw_vline>
	draw_vline(DP_HEIGHT,DP_HEIGHT,-60,1,65535);
 8003454:	21f0      	movs	r1, #240	; 0xf0
 8003456:	4633      	mov	r3, r6
 8003458:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 800345c:	4608      	mov	r0, r1
 800345e:	9400      	str	r4, [sp, #0]
 8003460:	f7ff ff04 	bl	800326c <draw_vline>
}
 8003464:	b003      	add	sp, #12
 8003466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800346a:	bf00      	nop
 800346c:	20001104 	.word	0x20001104
 8003470:	2000026a 	.word	0x2000026a
 8003474:	20000ec0 	.word	0x20000ec0
 8003478:	20000a14 	.word	0x20000a14
 800347c:	20000f2c 	.word	0x20000f2c
 8003480:	200010c8 	.word	0x200010c8
 8003484:	20000268 	.word	0x20000268
 8003488:	2000104e 	.word	0x2000104e
 800348c:	2000104c 	.word	0x2000104c
 8003490:	20000e7e 	.word	0x20000e7e
 8003494:	2000088c 	.word	0x2000088c
 8003498:	20000e7c 	.word	0x20000e7c

0800349c <draw_char>:
}

void draw_char(int16_t x, int16_t y, unsigned char c, uint16_t fgcolor, uint16_t bgcolor, uint8_t size) {
 800349c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80034a0:	460e      	mov	r6, r1
 80034a2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80034a6:	4614      	mov	r4, r2
 80034a8:	4680      	mov	r8, r0

	//This works by unrolling the drawRect code into here
//	printf("Address: %d %d %d %d\n",x, y, x + 6 * size - 1, y + 8 * size - 1);
	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,0);// CS Pin lo
 80034aa:	2200      	movs	r2, #0
 80034ac:	2104      	movs	r1, #4
 80034ae:	4825      	ldr	r0, [pc, #148]	; (8003544 <draw_char+0xa8>)
void draw_char(int16_t x, int16_t y, unsigned char c, uint16_t fgcolor, uint16_t bgcolor, uint8_t size) {
 80034b0:	461f      	mov	r7, r3
	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,0);// CS Pin lo
 80034b2:	f7fd fbc7 	bl	8000c44 <HAL_GPIO_WritePin>
	set_address(x, y, x + 6 * size - 1, y + 8 * size - 1);

	uint8_t mask = 0x01;
 80034b6:	f04f 0901 	mov.w	r9, #1
	set_address(x, y, x + 6 * size - 1, y + 8 * size - 1);
 80034ba:	b2b1      	uxth	r1, r6
 80034bc:	b2aa      	uxth	r2, r5
 80034be:	fa1f f088 	uxth.w	r0, r8
 80034c2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80034c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80034ca:	3b01      	subs	r3, #1
 80034cc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3a01      	subs	r2, #1
 80034d4:	b292      	uxth	r2, r2
 80034d6:	f7ff fea5 	bl	8003224 <set_address>


	for (y = 0; y < 8; y++) {
		for (yr = 0; yr < size; yr++) {
			for (x = 0; x < 5; x++) {
				if (font[c * 5 + x] & mask) {
 80034da:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <draw_char+0xac>)
 80034dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80034e0:	2408      	movs	r4, #8
 80034e2:	eb02 0a03 	add.w	sl, r2, r3
 80034e6:	f04f 0800 	mov.w	r8, #0
 80034ea:	e019      	b.n	8003520 <draw_char+0x84>
 80034ec:	2600      	movs	r6, #0
 80034ee:	f81a 3006 	ldrb.w	r3, [sl, r6]
 80034f2:	3601      	adds	r6, #1
					color = fgcolor;
				} else {
					color = bgcolor;
				}
				//push pixels fast (this function has less overhead)
				send_data16rpt(&color,size);
 80034f4:	4629      	mov	r1, r5
 80034f6:	f10d 0006 	add.w	r0, sp, #6
				if (font[c * 5 + x] & mask) {
 80034fa:	ea19 0f03 	tst.w	r9, r3
					color = bgcolor;
 80034fe:	bf0a      	itet	eq
 8003500:	f8bd 3028 	ldrheq.w	r3, [sp, #40]	; 0x28
					color = fgcolor;
 8003504:	f8ad 7006 	strhne.w	r7, [sp, #6]
					color = bgcolor;
 8003508:	f8ad 3006 	strheq.w	r3, [sp, #6]
				send_data16rpt(&color,size);
 800350c:	f7ff fd38 	bl	8002f80 <send_data16rpt>
			for (x = 0; x < 5; x++) {
 8003510:	2e05      	cmp	r6, #5
 8003512:	d1ec      	bne.n	80034ee <draw_char+0x52>
 8003514:	f108 0801 	add.w	r8, r8, #1
			}
			send_data16rpt(&bgcolor,size);
 8003518:	4629      	mov	r1, r5
 800351a:	a80a      	add	r0, sp, #40	; 0x28
 800351c:	f7ff fd30 	bl	8002f80 <send_data16rpt>
		for (yr = 0; yr < size; yr++) {
 8003520:	45a8      	cmp	r8, r5
 8003522:	d1e3      	bne.n	80034ec <draw_char+0x50>
 8003524:	3c01      	subs	r4, #1
		}
		mask = mask << 1;
 8003526:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800352a:	b2a4      	uxth	r4, r4
 800352c:	fa5f f989 	uxtb.w	r9, r9
	for (y = 0; y < 8; y++) {
 8003530:	2c00      	cmp	r4, #0
 8003532:	d1d8      	bne.n	80034e6 <draw_char+0x4a>
	}

	HAL_GPIO_WritePin(DP_CS_PORT,DP_CS_PIN,1);// CS Pin hi
 8003534:	2201      	movs	r2, #1
 8003536:	2104      	movs	r1, #4
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <draw_char+0xa8>)
 800353a:	f7fd fb83 	bl	8000c44 <HAL_GPIO_WritePin>
}
 800353e:	b002      	add	sp, #8
 8003540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003544:	40020c00 	.word	0x40020c00
 8003548:	08009308 	.word	0x08009308

0800354c <write>:

}

void write(char c) {

	if (c == '\n') {
 800354c:	280a      	cmp	r0, #10
void write(char c) {
 800354e:	4602      	mov	r2, r0
 8003550:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003552:	4910      	ldr	r1, [pc, #64]	; (8003594 <write+0x48>)
 8003554:	4d10      	ldr	r5, [pc, #64]	; (8003598 <write+0x4c>)
 8003556:	4c11      	ldr	r4, [pc, #68]	; (800359c <write+0x50>)
	if (c == '\n') {
 8003558:	d108      	bne.n	800356c <write+0x20>
		cursor_y += textsize * 8;
 800355a:	880b      	ldrh	r3, [r1, #0]
 800355c:	882a      	ldrh	r2, [r5, #0]
 800355e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003562:	800b      	strh	r3, [r1, #0]
		cursor_x = 0;
 8003564:	2300      	movs	r3, #0
	} else {
		draw_char(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
		cursor_x += textsize * 6;
 8003566:	8023      	strh	r3, [r4, #0]
	}

}
 8003568:	b002      	add	sp, #8
 800356a:	bd70      	pop	{r4, r5, r6, pc}
		draw_char(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 800356c:	782e      	ldrb	r6, [r5, #0]
 800356e:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <write+0x54>)
 8003570:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	9601      	str	r6, [sp, #4]
 8003578:	4e0a      	ldr	r6, [pc, #40]	; (80035a4 <write+0x58>)
 800357a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800357e:	8836      	ldrh	r6, [r6, #0]
 8003580:	9600      	str	r6, [sp, #0]
 8003582:	f7ff ff8b 	bl	800349c <draw_char>
		cursor_x += textsize * 6;
 8003586:	882b      	ldrh	r3, [r5, #0]
 8003588:	8822      	ldrh	r2, [r4, #0]
 800358a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800358e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003592:	e7e8      	b.n	8003566 <write+0x1a>
 8003594:	2000110c 	.word	0x2000110c
 8003598:	20001110 	.word	0x20001110
 800359c:	2000110e 	.word	0x2000110e
 80035a0:	20001114 	.word	0x20001114
 80035a4:	20001112 	.word	0x20001112

080035a8 <print_static>:
void print_static(char* c, uint16_t xm, uint16_t ym, uint8_t xsize) {
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	461c      	mov	r4, r3
	set_cursor(xm-3*textsize*xsize, ym-4*textsize);
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <print_static+0x70>)
void print_static(char* c, uint16_t xm, uint16_t ym, uint8_t xsize) {
 80035ae:	4605      	mov	r5, r0
	for(i=0;i<prefill;i++){
 80035b0:	2700      	movs	r7, #0
	set_cursor(xm-3*textsize*xsize, ym-4*textsize);
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80035b8:	eba2 0283 	sub.w	r2, r2, r3, lsl #2


void set_cursor(int16_t x, int16_t y) {
//	printf("Setting cursor to x: %d \t y:%d\n",x,y);
	cursor_x = x;
	cursor_y = y;
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <print_static+0x74>)
	set_cursor(xm-3*textsize*xsize, ym-4*textsize);
 80035be:	fb16 f604 	smulbb	r6, r6, r4
	cursor_y = y;
 80035c2:	801a      	strh	r2, [r3, #0]
	set_cursor(xm-3*textsize*xsize, ym-4*textsize);
 80035c4:	1b89      	subs	r1, r1, r6
	cursor_x = x;
 80035c6:	4e16      	ldr	r6, [pc, #88]	; (8003620 <print_static+0x78>)
 80035c8:	8031      	strh	r1, [r6, #0]
	int8_t diff_total=xsize-strlen(c);
 80035ca:	f7fc fe39 	bl	8000240 <strlen>
 80035ce:	1a20      	subs	r0, r4, r0
	int8_t prefill=diff_total/2;
 80035d0:	2302      	movs	r3, #2
	int8_t diff_total=xsize-strlen(c);
 80035d2:	b2c0      	uxtb	r0, r0
	int8_t prefill=diff_total/2;
 80035d4:	b246      	sxtb	r6, r0
 80035d6:	fb96 f6f3 	sdiv	r6, r6, r3
	int8_t postfill=xsize-strlen(c)-prefill;
 80035da:	1b80      	subs	r0, r0, r6
 80035dc:	b244      	sxtb	r4, r0
	for(i=0;i<prefill;i++){
 80035de:	42b7      	cmp	r7, r6
 80035e0:	db0a      	blt.n	80035f8 <print_static+0x50>
 80035e2:	462e      	mov	r6, r5
	for(i=0;i<strlen(c);i++){
 80035e4:	4628      	mov	r0, r5
 80035e6:	f7fc fe2b 	bl	8000240 <strlen>
 80035ea:	1b73      	subs	r3, r6, r5
 80035ec:	4298      	cmp	r0, r3
 80035ee:	d808      	bhi.n	8003602 <print_static+0x5a>
 80035f0:	2500      	movs	r5, #0
	for(i=0;i<postfill;i++){
 80035f2:	42a5      	cmp	r5, r4
 80035f4:	db0a      	blt.n	800360c <print_static+0x64>
}
 80035f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		write(*space);
 80035f8:	2020      	movs	r0, #32
	for(i=0;i<prefill;i++){
 80035fa:	3701      	adds	r7, #1
		write(*space);
 80035fc:	f7ff ffa6 	bl	800354c <write>
 8003600:	e7ed      	b.n	80035de <print_static+0x36>
		write(c[i]);
 8003602:	f816 0b01 	ldrb.w	r0, [r6], #1
 8003606:	f7ff ffa1 	bl	800354c <write>
 800360a:	e7eb      	b.n	80035e4 <print_static+0x3c>
		write(*space);
 800360c:	2020      	movs	r0, #32
	for(i=0;i<postfill;i++){
 800360e:	3501      	adds	r5, #1
		write(*space);
 8003610:	f7ff ff9c 	bl	800354c <write>
 8003614:	e7ed      	b.n	80035f2 <print_static+0x4a>
 8003616:	bf00      	nop
 8003618:	20001110 	.word	0x20001110
 800361c:	2000110c 	.word	0x2000110c
 8003620:	2000110e 	.word	0x2000110e

08003624 <print_num>:
	sprintf(buffer, format, val);
 8003624:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8003628:	4601      	mov	r1, r0
{
 800362a:	b530      	push	{r4, r5, lr}
 800362c:	b085      	sub	sp, #20
 800362e:	4615      	mov	r5, r2
 8003630:	461c      	mov	r4, r3
	sprintf(buffer, format, val);
 8003632:	4668      	mov	r0, sp
 8003634:	ec53 2b17 	vmov	r2, r3, d7
 8003638:	f001 ffc0 	bl	80055bc <siprintf>
	print_static(buffer,xm,ym,width);
 800363c:	462b      	mov	r3, r5
 800363e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8003642:	4621      	mov	r1, r4
 8003644:	4668      	mov	r0, sp
 8003646:	f7ff ffaf 	bl	80035a8 <print_static>
}
 800364a:	b005      	add	sp, #20
 800364c:	bd30      	pop	{r4, r5, pc}
	...

08003650 <set_text_size>:
}

void set_text_size(uint8_t s) {
	textsize = s;
 8003650:	4b01      	ldr	r3, [pc, #4]	; (8003658 <set_text_size+0x8>)
 8003652:	8018      	strh	r0, [r3, #0]
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20001110 	.word	0x20001110

0800365c <set_text_color>:
}

void set_text_color(uint16_t c, uint16_t b) {
	textcolor = c;
 800365c:	4b02      	ldr	r3, [pc, #8]	; (8003668 <set_text_color+0xc>)
 800365e:	8018      	strh	r0, [r3, #0]
	textbgcolor = b;
 8003660:	4b02      	ldr	r3, [pc, #8]	; (800366c <set_text_color+0x10>)
 8003662:	8019      	strh	r1, [r3, #0]
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20001114 	.word	0x20001114
 800366c:	20001112 	.word	0x20001112

08003670 <calc_RGB565>:
}

/*Calculates the RGB565 code*/
/*R,G,B: 0-100*/
uint16_t calc_RGB565(uint8_t r,uint8_t g,uint8_t b){
	return (r*31/100)<<11|(g*63/100)<<5|(b*31/100);
 8003670:	2364      	movs	r3, #100	; 0x64
 8003672:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
 8003676:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 800367a:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800367e:	fb91 f1f3 	sdiv	r1, r1, r3
 8003682:	fb92 f2f3 	sdiv	r2, r2, r3
 8003686:	fb90 f0f3 	sdiv	r0, r0, r3
 800368a:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800368e:	ea42 20c0 	orr.w	r0, r2, r0, lsl #11
}
 8003692:	b280      	uxth	r0, r0
 8003694:	4770      	bx	lr
	...

08003698 <LED_set_color>:

void LED_set_color(bool R, bool G, bool B){
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	4606      	mov	r6, r0
 800369c:	460d      	mov	r5, r1

	//Reset
	HAL_GPIO_WritePin(LED_RGB_PORT,GPIO_PIN_5,0);
 800369e:	4812      	ldr	r0, [pc, #72]	; (80036e8 <LED_set_color+0x50>)
 80036a0:	2120      	movs	r1, #32
void LED_set_color(bool R, bool G, bool B){
 80036a2:	4614      	mov	r4, r2
	HAL_GPIO_WritePin(LED_RGB_PORT,GPIO_PIN_5,0);
 80036a4:	2200      	movs	r2, #0
 80036a6:	f7fd facd 	bl	8000c44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RGB_PORT,GPIO_PIN_6,0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2140      	movs	r1, #64	; 0x40
 80036ae:	480e      	ldr	r0, [pc, #56]	; (80036e8 <LED_set_color+0x50>)
 80036b0:	f7fd fac8 	bl	8000c44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RGB_PORT,GPIO_PIN_7,0);
 80036b4:	2200      	movs	r2, #0
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	480b      	ldr	r0, [pc, #44]	; (80036e8 <LED_set_color+0x50>)
 80036ba:	f7fd fac3 	bl	8000c44 <HAL_GPIO_WritePin>

	if(R){
 80036be:	b126      	cbz	r6, 80036ca <LED_set_color+0x32>
		HAL_GPIO_WritePin(LED_RGB_PORT,GPIO_PIN_5,1);
 80036c0:	2201      	movs	r2, #1
 80036c2:	2120      	movs	r1, #32
 80036c4:	4808      	ldr	r0, [pc, #32]	; (80036e8 <LED_set_color+0x50>)
 80036c6:	f7fd fabd 	bl	8000c44 <HAL_GPIO_WritePin>
	}
	if(G){
 80036ca:	b125      	cbz	r5, 80036d6 <LED_set_color+0x3e>
		HAL_GPIO_WritePin(LED_RGB_PORT,GPIO_PIN_6,1);
 80036cc:	2201      	movs	r2, #1
 80036ce:	2140      	movs	r1, #64	; 0x40
 80036d0:	4805      	ldr	r0, [pc, #20]	; (80036e8 <LED_set_color+0x50>)
 80036d2:	f7fd fab7 	bl	8000c44 <HAL_GPIO_WritePin>
	}
	if(B){
 80036d6:	b134      	cbz	r4, 80036e6 <LED_set_color+0x4e>
		HAL_GPIO_WritePin(LED_RGB_PORT,GPIO_PIN_7,1);
 80036d8:	2201      	movs	r2, #1
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	4802      	ldr	r0, [pc, #8]	; (80036e8 <LED_set_color+0x50>)
	}

}
 80036de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_GPIO_WritePin(LED_RGB_PORT,GPIO_PIN_7,1);
 80036e2:	f7fd baaf 	b.w	8000c44 <HAL_GPIO_WritePin>
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
 80036e8:	40020000 	.word	0x40020000
 80036ec:	00000000 	.word	0x00000000

080036f0 <write_bqf_param>:
//	printf("b0:%f, type:%d, G=%f, Fc:%f, Q:%f\n",ctrlreg_tx[*offset+1].f32, *type, *G, *Fc, *Q);

	double A,w0,cosw0,sinw0,alpha,a0;

	//Intermediate vars
	A=pow(10,(*G)/40);
 80036f0:	ed92 7a00 	vldr	s14, [r2]
 80036f4:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80036f8:	eddf 7adf 	vldr	s15, [pc, #892]	; 8003a78 <write_bqf_param+0x388>
 80036fc:	ee87 1a27 	vdiv.f32	s2, s14, s15
void write_bqf_param(uint16_t *offset, uint8_t *type, float *G, float *Fc, float *Q ){
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	ed2d 8b10 	vpush	{d8-d15}
 8003706:	b082      	sub	sp, #8
 8003708:	460d      	mov	r5, r1
 800370a:	4604      	mov	r4, r0
 800370c:	461e      	mov	r6, r3
	A=pow(10,(*G)/40);
 800370e:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 8003712:	f004 f861 	bl	80077d8 <pow>
	w0=2*M_PI *((*Fc)/fs);
 8003716:	4bd9      	ldr	r3, [pc, #868]	; (8003a7c <write_bqf_param+0x38c>)
 8003718:	ed96 7a00 	vldr	s14, [r6]
	A=pow(10,(*G)/40);
 800371c:	eeb0 8b40 	vmov.f64	d8, d0
	w0=2*M_PI *((*Fc)/fs);
 8003720:	edd3 7a00 	vldr	s15, [r3]
 8003724:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8003728:	ed9f 7bd1 	vldr	d7, [pc, #836]	; 8003a70 <write_bqf_param+0x380>
 800372c:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8003730:	ee29 9b07 	vmul.f64	d9, d9, d7
	cosw0=cos(w0);
 8003734:	eeb0 0b49 	vmov.f64	d0, d9
 8003738:	f003 ff66 	bl	8007608 <cos>
 800373c:	eeb0 fb40 	vmov.f64	d15, d0
	sinw0=sin(w0);
 8003740:	eeb0 0b49 	vmov.f64	d0, d9
 8003744:	f003 ff9c 	bl	8007680 <sin>
	alpha=sinw0/(2*(*Q));
 8003748:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800374a:	ed93 7a00 	vldr	s14, [r3]

	switch(*type){
 800374e:	782b      	ldrb	r3, [r5, #0]
	alpha=sinw0/(2*(*Q));
 8003750:	ee37 7a07 	vadd.f32	s14, s14, s14
 8003754:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003758:	ee80 db07 	vdiv.f64	d13, d0, d7
	switch(*type){
 800375c:	2b04      	cmp	r3, #4
 800375e:	d840      	bhi.n	80037e2 <write_bqf_param+0xf2>
 8003760:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003764:	00430005 	.word	0x00430005
 8003768:	00a20063 	.word	0x00a20063
 800376c:	0121      	.short	0x0121

		case 0: //Lowpass filter
//			printf("Low pass\n");
			a0=1+alpha;
 800376e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
			ctrlreg_tx[*offset+0].f32=(float)((1-cosw0)*0.5/a0);
 8003772:	8822      	ldrh	r2, [r4, #0]
 8003774:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8003778:	4bc1      	ldr	r3, [pc, #772]	; (8003a80 <write_bqf_param+0x390>)
 800377a:	ee37 3b4f 	vsub.f64	d3, d7, d15
 800377e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			a0=1+alpha;
 8003782:	ee3d 6b07 	vadd.f64	d6, d13, d7
			ctrlreg_tx[*offset+0].f32=(float)((1-cosw0)*0.5/a0);
 8003786:	ee23 4b04 	vmul.f64	d4, d3, d4
 800378a:	ee84 5b06 	vdiv.f64	d5, d4, d6
			ctrlreg_tx[*offset+1].f32=(float)((1-cosw0)/a0);
 800378e:	ee83 4b06 	vdiv.f64	d4, d3, d6
			ctrlreg_tx[*offset+0].f32=(float)((1-cosw0)*0.5/a0);
 8003792:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 8003796:	ed82 5a00 	vstr	s10, [r2]
			ctrlreg_tx[*offset+1].f32=(float)((1-cosw0)/a0);
 800379a:	8822      	ldrh	r2, [r4, #0]
 800379c:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
 80037a0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80037a4:	ed82 4a01 	vstr	s8, [r2, #4]
		case 1: //Highpass filter
//			printf("Highpass\n");
			a0=1+alpha;
			ctrlreg_tx[*offset+0].f32=(float)((1+cosw0)*0.5/a0);
			ctrlreg_tx[*offset+1].f32=(float)(-(1+cosw0)/a0);
			ctrlreg_tx[*offset+2].f32=(float)((1+cosw0)*0.5/a0);
 80037a8:	8822      	ldrh	r2, [r4, #0]
//			bqf[fid].a[0]=1;
			ctrlreg_tx[*offset+3].f32=(float)(-2*cosw0/a0);
			ctrlreg_tx[*offset+4].f32=(float)((1-alpha)/a0);
 80037aa:	ee37 db4d 	vsub.f64	d13, d7, d13
			ctrlreg_tx[*offset+2].f32=(float)((1+cosw0)*0.5/a0);
 80037ae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			ctrlreg_tx[*offset+4].f32=(float)((1-alpha)/a0);
 80037b2:	ee8d 7b06 	vdiv.f64	d7, d13, d6
			ctrlreg_tx[*offset+2].f32=(float)((1+cosw0)*0.5/a0);
 80037b6:	ed82 5a02 	vstr	s10, [r2, #8]
			ctrlreg_tx[*offset+3].f32=(float)(-2*cosw0/a0);
 80037ba:	8822      	ldrh	r2, [r4, #0]
 80037bc:	eeb8 5b00 	vmov.f64	d5, #128	; 0xc0000000 -2.0
 80037c0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80037c4:	ee2f fb05 	vmul.f64	d15, d15, d5
 80037c8:	ee8f 5b06 	vdiv.f64	d5, d15, d6
			ctrlreg_tx[*offset+4].f32=(float)((1-alpha)/a0);
 80037cc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			ctrlreg_tx[*offset+3].f32=(float)(-2*cosw0/a0);
 80037d0:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 80037d4:	ed82 5a03 	vstr	s10, [r2, #12]
			ctrlreg_tx[*offset+4].f32=(float)((1-alpha)/a0);
 80037d8:	8822      	ldrh	r2, [r4, #0]
 80037da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80037de:	ed83 7a04 	vstr	s14, [r3, #16]


//	printf("b0:%f\t b1:%f\t b2:%f\t a1:%f\t a2:%f\n",ctrlreg_tx[*offset].f32,ctrlreg_tx[*offset+1].f32,ctrlreg_tx[*offset+2].f32,ctrlreg_tx[*offset+3].f32,ctrlreg_tx[*offset+4].f32);


}
 80037e2:	b002      	add	sp, #8
 80037e4:	ecbd 8b10 	vpop	{d8-d15}
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
			a0=1+alpha;
 80037ea:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
			ctrlreg_tx[*offset+0].f32=(float)((1+cosw0)*0.5/a0);
 80037ee:	8822      	ldrh	r2, [r4, #0]
 80037f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80037f4:	4ba2      	ldr	r3, [pc, #648]	; (8003a80 <write_bqf_param+0x390>)
 80037f6:	ee3f 4b07 	vadd.f64	d4, d15, d7
 80037fa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			a0=1+alpha;
 80037fe:	ee3d 6b07 	vadd.f64	d6, d13, d7
			ctrlreg_tx[*offset+0].f32=(float)((1+cosw0)*0.5/a0);
 8003802:	ee24 3b03 	vmul.f64	d3, d4, d3
			ctrlreg_tx[*offset+1].f32=(float)(-(1+cosw0)/a0);
 8003806:	eeb1 4b44 	vneg.f64	d4, d4
			ctrlreg_tx[*offset+0].f32=(float)((1+cosw0)*0.5/a0);
 800380a:	ee83 5b06 	vdiv.f64	d5, d3, d6
			ctrlreg_tx[*offset+1].f32=(float)(-(1+cosw0)/a0);
 800380e:	ee84 3b06 	vdiv.f64	d3, d4, d6
			ctrlreg_tx[*offset+0].f32=(float)((1+cosw0)*0.5/a0);
 8003812:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 8003816:	ed82 5a00 	vstr	s10, [r2]
			ctrlreg_tx[*offset+1].f32=(float)(-(1+cosw0)/a0);
 800381a:	8822      	ldrh	r2, [r4, #0]
 800381c:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
 8003820:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003824:	ed82 3a01 	vstr	s6, [r2, #4]
 8003828:	e7be      	b.n	80037a8 <write_bqf_param+0xb8>
			a0=1+alpha/A;
 800382a:	ee8d 3b08 	vdiv.f64	d3, d13, d8
			ctrlreg_tx[*offset+0].f32=(float)((1+alpha*A)/a0);
 800382e:	8822      	ldrh	r2, [r4, #0]
 8003830:	4b93      	ldr	r3, [pc, #588]	; (8003a80 <write_bqf_param+0x390>)
 8003832:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			a0=1+alpha/A;
 8003836:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
			ctrlreg_tx[*offset+0].f32=(float)((1+alpha*A)/a0);
 800383a:	eeb0 4b47 	vmov.f64	d4, d7
			ctrlreg_tx[*offset+2].f32=(float)((1-alpha*A)/a0);
 800383e:	eeb0 2b47 	vmov.f64	d2, d7
			ctrlreg_tx[*offset+0].f32=(float)((1+alpha*A)/a0);
 8003842:	eea8 4b0d 	vfma.f64	d4, d8, d13
			ctrlreg_tx[*offset+2].f32=(float)((1-alpha*A)/a0);
 8003846:	eea8 2b4d 	vfms.f64	d2, d8, d13
			a0=1+alpha/A;
 800384a:	ee33 6b07 	vadd.f64	d6, d3, d7
			ctrlreg_tx[*offset+4].f32=(float)((1-alpha/A)/a0);
 800384e:	ee37 7b43 	vsub.f64	d7, d7, d3
			ctrlreg_tx[*offset+0].f32=(float)((1+alpha*A)/a0);
 8003852:	ee84 5b06 	vdiv.f64	d5, d4, d6
			ctrlreg_tx[*offset+2].f32=(float)((1-alpha*A)/a0);
 8003856:	ee82 4b06 	vdiv.f64	d4, d2, d6
			ctrlreg_tx[*offset+0].f32=(float)((1+alpha*A)/a0);
 800385a:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 800385e:	ed82 5a00 	vstr	s10, [r2]
			ctrlreg_tx[*offset+1].f32=(float)((-2*cosw0)/a0);
 8003862:	eeb8 5b00 	vmov.f64	d5, #128	; 0xc0000000 -2.0
 8003866:	8822      	ldrh	r2, [r4, #0]
			ctrlreg_tx[*offset+2].f32=(float)((1-alpha*A)/a0);
 8003868:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
			ctrlreg_tx[*offset+1].f32=(float)((-2*cosw0)/a0);
 800386c:	ee2f fb05 	vmul.f64	d15, d15, d5
 8003870:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003874:	ee8f 5b06 	vdiv.f64	d5, d15, d6
 8003878:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 800387c:	ed82 5a01 	vstr	s10, [r2, #4]
			ctrlreg_tx[*offset+2].f32=(float)((1-alpha*A)/a0);
 8003880:	8822      	ldrh	r2, [r4, #0]
 8003882:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003886:	ed82 4a02 	vstr	s8, [r2, #8]
			ctrlreg_tx[*offset+3].f32=(float)((-2*cosw0)/a0);
 800388a:	8822      	ldrh	r2, [r4, #0]
 800388c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003890:	ed82 5a03 	vstr	s10, [r2, #12]
			ctrlreg_tx[*offset+4].f32=(float)((1-alpha/A)/a0);
 8003894:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003898:	8822      	ldrh	r2, [r4, #0]
 800389a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800389e:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 80038a2:	ed83 5a04 	vstr	s10, [r3, #16]
			break;
 80038a6:	e79c      	b.n	80037e2 <write_bqf_param+0xf2>
			a0=(A+1)+(A-1)*cosw0+2*sqrt(A)*alpha;
 80038a8:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)-(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 80038ac:	4d74      	ldr	r5, [pc, #464]	; (8003a80 <write_bqf_param+0x390>)
			a0=(A+1)+(A-1)*cosw0+2*sqrt(A)*alpha;
 80038ae:	eeb0 0b48 	vmov.f64	d0, d8
 80038b2:	f004 f8c5 	bl	8007a40 <sqrt>
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)-(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 80038b6:	eeb1 6b4f 	vneg.f64	d6, d15
			a0=(A+1)+(A-1)*cosw0+2*sqrt(A)*alpha;
 80038ba:	ee38 cb09 	vadd.f64	d12, d8, d9
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)-(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 80038be:	8826      	ldrh	r6, [r4, #0]
			a0=(A+1)+(A-1)*cosw0+2*sqrt(A)*alpha;
 80038c0:	ee38 9b49 	vsub.f64	d9, d8, d9
 80038c4:	ee30 0b00 	vadd.f64	d0, d0, d0
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)-(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 80038c8:	eb05 0686 	add.w	r6, r5, r6, lsl #2
			a0=(A+1)+(A-1)*cosw0+2*sqrt(A)*alpha;
 80038cc:	eeb0 bb4c 	vmov.f64	d11, d12
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)-(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 80038d0:	eeb0 ab4c 	vmov.f64	d10, d12
			a0=(A+1)+(A-1)*cosw0+2*sqrt(A)*alpha;
 80038d4:	eeaf bb09 	vfma.f64	d11, d15, d9
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)-(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 80038d8:	eea6 ab09 	vfma.f64	d10, d6, d9
 80038dc:	ed8d 6b00 	vstr	d6, [sp]
			a0=(A+1)+(A-1)*cosw0+2*sqrt(A)*alpha;
 80038e0:	eeb0 eb4b 	vmov.f64	d14, d11
 80038e4:	eead eb00 	vfma.f64	d14, d13, d0
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)-(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 80038e8:	eeb0 0b48 	vmov.f64	d0, d8
 80038ec:	f004 f8a8 	bl	8007a40 <sqrt>
 80038f0:	eeb0 5b4a 	vmov.f64	d5, d10
 80038f4:	ee30 0b00 	vadd.f64	d0, d0, d0
			ctrlreg_tx[*offset+1].f32=(float)((2*A*((A-1)-(A+1)*cosw0))/a0);
 80038f8:	ed9d 6b00 	vldr	d6, [sp]
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)-(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 80038fc:	eead 5b00 	vfma.f64	d5, d13, d0
			ctrlreg_tx[*offset+2].f32=(float)((A*((A+1)-(A-1)*cosw0-2*sqrt(A)*alpha))/a0);
 8003900:	eeb0 0b48 	vmov.f64	d0, d8
 8003904:	eeb1 db4d 	vneg.f64	d13, d13
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)-(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 8003908:	ee25 5b08 	vmul.f64	d5, d5, d8
 800390c:	ee85 7b0e 	vdiv.f64	d7, d5, d14
 8003910:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003914:	ed86 7a00 	vstr	s14, [r6]
			ctrlreg_tx[*offset+1].f32=(float)((2*A*((A-1)-(A+1)*cosw0))/a0);
 8003918:	eeb0 7b49 	vmov.f64	d7, d9
 800391c:	8823      	ldrh	r3, [r4, #0]
 800391e:	eea6 7b0c 	vfma.f64	d7, d6, d12
 8003922:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003926:	eeb0 6b47 	vmov.f64	d6, d7
 800392a:	ee38 7b08 	vadd.f64	d7, d8, d8
 800392e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003932:	ee86 7b0e 	vdiv.f64	d7, d6, d14
 8003936:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800393a:	ed83 7a01 	vstr	s14, [r3, #4]
			ctrlreg_tx[*offset+2].f32=(float)((A*((A+1)-(A-1)*cosw0-2*sqrt(A)*alpha))/a0);
 800393e:	8826      	ldrh	r6, [r4, #0]
 8003940:	f004 f87e 	bl	8007a40 <sqrt>
 8003944:	ee30 0b00 	vadd.f64	d0, d0, d0
			ctrlreg_tx[*offset+3].f32=(float)((-2*((A-1)+(A+1)*cosw0))/a0);
 8003948:	eeaf 9b0c 	vfma.f64	d9, d15, d12
			ctrlreg_tx[*offset+2].f32=(float)((A*((A+1)-(A-1)*cosw0-2*sqrt(A)*alpha))/a0);
 800394c:	3602      	adds	r6, #2
 800394e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8003952:	eead ab00 	vfma.f64	d10, d13, d0
 8003956:	ee2a ab08 	vmul.f64	d10, d10, d8
 800395a:	ee8a 7b0e 	vdiv.f64	d7, d10, d14
 800395e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003962:	ed86 7a00 	vstr	s14, [r6]
			ctrlreg_tx[*offset+3].f32=(float)((-2*((A-1)+(A+1)*cosw0))/a0);
 8003966:	eeb8 7b00 	vmov.f64	d7, #128	; 0xc0000000 -2.0
 800396a:	8823      	ldrh	r3, [r4, #0]
 800396c:	ee29 9b07 	vmul.f64	d9, d9, d7
 8003970:	eb05 0383 	add.w	r3, r5, r3, lsl #2
			ctrlreg_tx[*offset+3].f32=(float)((2*((A-1)-(A+1)*cosw0))/a0);
 8003974:	ee89 7b0e 	vdiv.f64	d7, d9, d14
			ctrlreg_tx[*offset+4].f32=(float)(((A+1)-(A-1)*cosw0-2*sqrt(A)*alpha)/a0);
 8003978:	eeb0 0b48 	vmov.f64	d0, d8
			ctrlreg_tx[*offset+3].f32=(float)((2*((A-1)-(A+1)*cosw0))/a0);
 800397c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003980:	ed83 7a03 	vstr	s14, [r3, #12]
			ctrlreg_tx[*offset+4].f32=(float)(((A+1)-(A-1)*cosw0-2*sqrt(A)*alpha)/a0);
 8003984:	8824      	ldrh	r4, [r4, #0]
 8003986:	f004 f85b 	bl	8007a40 <sqrt>
 800398a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800398e:	3404      	adds	r4, #4
 8003990:	eead bb00 	vfma.f64	d11, d13, d0
 8003994:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8003998:	ee8b 7b0e 	vdiv.f64	d7, d11, d14
 800399c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80039a0:	ed85 7a00 	vstr	s14, [r5]
}
 80039a4:	e71d      	b.n	80037e2 <write_bqf_param+0xf2>
			a0=(A+1)-(A-1)*cosw0+2*sqrt(A)*alpha;
 80039a6:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)+(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 80039aa:	4d35      	ldr	r5, [pc, #212]	; (8003a80 <write_bqf_param+0x390>)
			a0=(A+1)-(A-1)*cosw0+2*sqrt(A)*alpha;
 80039ac:	eeb1 7b4f 	vneg.f64	d7, d15
 80039b0:	eeb0 0b48 	vmov.f64	d0, d8
 80039b4:	ee38 cb09 	vadd.f64	d12, d8, d9
 80039b8:	ee38 9b49 	vsub.f64	d9, d8, d9
 80039bc:	eeb0 bb4c 	vmov.f64	d11, d12
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)+(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 80039c0:	eeb0 ab4c 	vmov.f64	d10, d12
			a0=(A+1)-(A-1)*cosw0+2*sqrt(A)*alpha;
 80039c4:	eea7 bb09 	vfma.f64	d11, d7, d9
 80039c8:	ed8d 7b00 	vstr	d7, [sp]
 80039cc:	f004 f838 	bl	8007a40 <sqrt>
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)+(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 80039d0:	eeaf ab09 	vfma.f64	d10, d15, d9
 80039d4:	8826      	ldrh	r6, [r4, #0]
 80039d6:	eb05 0686 	add.w	r6, r5, r6, lsl #2
			a0=(A+1)-(A-1)*cosw0+2*sqrt(A)*alpha;
 80039da:	ee30 0b00 	vadd.f64	d0, d0, d0
 80039de:	eeb0 eb4b 	vmov.f64	d14, d11
 80039e2:	eead eb00 	vfma.f64	d14, d13, d0
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)+(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 80039e6:	eeb0 0b48 	vmov.f64	d0, d8
 80039ea:	f004 f829 	bl	8007a40 <sqrt>
 80039ee:	eeb0 5b4a 	vmov.f64	d5, d10
 80039f2:	ee30 0b00 	vadd.f64	d0, d0, d0
 80039f6:	eead 5b00 	vfma.f64	d5, d13, d0
			ctrlreg_tx[*offset+2].f32=(float)((A*((A+1)+(A-1)*cosw0-2*sqrt(A)*alpha))/a0);
 80039fa:	eeb0 0b48 	vmov.f64	d0, d8
 80039fe:	eeb1 db4d 	vneg.f64	d13, d13
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)+(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 8003a02:	ee25 5b08 	vmul.f64	d5, d5, d8
 8003a06:	ee85 6b0e 	vdiv.f64	d6, d5, d14
			ctrlreg_tx[*offset+1].f32=(float)((-2*A*((A-1)+(A+1)*cosw0))/a0);
 8003a0a:	eeb0 5b49 	vmov.f64	d5, d9
 8003a0e:	eeaf 5b0c 	vfma.f64	d5, d15, d12
			ctrlreg_tx[*offset+0].f32=(float)((A*((A+1)+(A-1)*cosw0+2*sqrt(A)*alpha))/a0);
 8003a12:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8003a16:	ed86 6a00 	vstr	s12, [r6]
			ctrlreg_tx[*offset+1].f32=(float)((-2*A*((A-1)+(A+1)*cosw0))/a0);
 8003a1a:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8003a1e:	8823      	ldrh	r3, [r4, #0]
 8003a20:	ee28 6b06 	vmul.f64	d6, d8, d6
 8003a24:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003a28:	ee26 6b05 	vmul.f64	d6, d6, d5
 8003a2c:	ee86 5b0e 	vdiv.f64	d5, d6, d14
 8003a30:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 8003a34:	ed83 5a01 	vstr	s10, [r3, #4]
			ctrlreg_tx[*offset+2].f32=(float)((A*((A+1)+(A-1)*cosw0-2*sqrt(A)*alpha))/a0);
 8003a38:	8826      	ldrh	r6, [r4, #0]
 8003a3a:	f004 f801 	bl	8007a40 <sqrt>
 8003a3e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8003a42:	3602      	adds	r6, #2
 8003a44:	eead ab00 	vfma.f64	d10, d13, d0
 8003a48:	eb05 0686 	add.w	r6, r5, r6, lsl #2
			ctrlreg_tx[*offset+3].f32=(float)((2*((A-1)-(A+1)*cosw0))/a0);
 8003a4c:	ed9d 7b00 	vldr	d7, [sp]
 8003a50:	eea7 9b0c 	vfma.f64	d9, d7, d12
			ctrlreg_tx[*offset+2].f32=(float)((A*((A+1)+(A-1)*cosw0-2*sqrt(A)*alpha))/a0);
 8003a54:	ee2a ab08 	vmul.f64	d10, d10, d8
 8003a58:	ee8a 6b0e 	vdiv.f64	d6, d10, d14
			ctrlreg_tx[*offset+3].f32=(float)((2*((A-1)-(A+1)*cosw0))/a0);
 8003a5c:	ee39 9b09 	vadd.f64	d9, d9, d9
			ctrlreg_tx[*offset+2].f32=(float)((A*((A+1)+(A-1)*cosw0-2*sqrt(A)*alpha))/a0);
 8003a60:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8003a64:	ed86 6a00 	vstr	s12, [r6]
			ctrlreg_tx[*offset+3].f32=(float)((2*((A-1)-(A+1)*cosw0))/a0);
 8003a68:	8823      	ldrh	r3, [r4, #0]
 8003a6a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003a6e:	e781      	b.n	8003974 <write_bqf_param+0x284>
 8003a70:	54442d18 	.word	0x54442d18
 8003a74:	401921fb 	.word	0x401921fb
 8003a78:	42200000 	.word	0x42200000
 8003a7c:	20000008 	.word	0x20000008
 8003a80:	20000890 	.word	0x20000890
 8003a84:	00000000 	.word	0x00000000

08003a88 <update_chorus>:

void update_chorus(void){

	uint16_t offset=menu[bank].ctrl_offset;
 8003a88:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <update_chorus+0x60>)
 8003a8a:	21e0      	movs	r1, #224	; 0xe0
void update_chorus(void){
 8003a8c:	b510      	push	{r4, lr}
	uint16_t offset=menu[bank].ctrl_offset;
 8003a8e:	781a      	ldrb	r2, [r3, #0]
 8003a90:	4b16      	ldr	r3, [pc, #88]	; (8003aec <update_chorus+0x64>)
 8003a92:	fb01 3202 	mla	r2, r1, r2, r3
	ctrlreg_tx[offset+0].f32=(float)menu[bank].enc[0].value*0.01; 		//Wet mix
 8003a96:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <update_chorus+0x68>)
 8003a98:	ed92 7a1c 	vldr	s14, [r2, #112]	; 0x70
 8003a9c:	8a51      	ldrh	r1, [r2, #18]
 8003a9e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	ctrlreg_tx[offset+1].f32=1-ctrlreg_tx[offset+0].f32;					//Dry mix
	ctrlreg_tx[offset+2].f32=(float)menu[bank].enc[1].value;			//Depth
 8003aa2:	f8d2 409c 	ldr.w	r4, [r2, #156]	; 0x9c
	ctrlreg_tx[offset+0].f32=(float)menu[bank].enc[0].value*0.01; 		//Wet mix
 8003aa6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8003aaa:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8003ae0 <update_chorus+0x58>
	ctrlreg_tx[offset+2].f32=(float)menu[bank].enc[1].value;			//Depth
 8003aae:	6084      	str	r4, [r0, #8]
	ctrlreg_tx[offset+0].f32=(float)menu[bank].enc[0].value*0.01; 		//Wet mix
 8003ab0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003ab4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	ctrlreg_tx[offset+1].f32=1-ctrlreg_tx[offset+0].f32;					//Dry mix
 8003ab8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	ctrlreg_tx[offset+0].f32=(float)menu[bank].enc[0].value*0.01; 		//Wet mix
 8003abc:	ed80 7a00 	vstr	s14, [r0]
	ctrlreg_tx[offset+1].f32=1-ctrlreg_tx[offset+0].f32;					//Dry mix
 8003ac0:	ee37 7ac7 	vsub.f32	s14, s15, s14
	ctrlreg_tx[offset+3].f32=(float)10-menu[bank].enc[2].value;		//Rate
 8003ac4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	ctrlreg_tx[offset+1].f32=1-ctrlreg_tx[offset+0].f32;					//Dry mix
 8003ac8:	ed80 7a01 	vstr	s14, [r0, #4]
	ctrlreg_tx[offset+3].f32=(float)10-menu[bank].enc[2].value;		//Rate
 8003acc:	ed92 7a32 	vldr	s14, [r2, #200]	; 0xc8
 8003ad0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ad4:	edc0 7a03 	vstr	s15, [r0, #12]
 8003ad8:	bd10      	pop	{r4, pc}
 8003ada:	bf00      	nop
 8003adc:	f3af 8000 	nop.w
 8003ae0:	47ae147b 	.word	0x47ae147b
 8003ae4:	3f847ae1 	.word	0x3f847ae1
 8003ae8:	20000fe8 	.word	0x20000fe8
 8003aec:	2000026c 	.word	0x2000026c
 8003af0:	20000890 	.word	0x20000890
 8003af4:	00000000 	.word	0x00000000

08003af8 <update_delay>:
}

void update_delay(void){
	uint16_t offset=menu[bank].ctrl_offset;
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <update_delay+0x78>)
 8003afa:	21e0      	movs	r1, #224	; 0xe0
 8003afc:	781a      	ldrb	r2, [r3, #0]
 8003afe:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <update_delay+0x7c>)
 8003b00:	fb01 3202 	mla	r2, r1, r2, r3
	ctrlreg_tx[offset+0].f32=(float)menu[bank].enc[0].value*0.01; 		//Wet mix
 8003b04:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <update_delay+0x80>)
 8003b06:	ed92 7a1c 	vldr	s14, [r2, #112]	; 0x70
 8003b0a:	8a51      	ldrh	r1, [r2, #18]
 8003b0c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003b10:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8003b14:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8003b60 <update_delay+0x68>
 8003b18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b1c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	ctrlreg_tx[offset+1].f32=1-ctrlreg_tx[offset+0].f32;					//Dry mix
 8003b20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	ctrlreg_tx[offset+0].f32=(float)menu[bank].enc[0].value*0.01; 		//Wet mix
 8003b24:	ed80 7a00 	vstr	s14, [r0]
	ctrlreg_tx[offset+1].f32=1-ctrlreg_tx[offset+0].f32;					//Dry mix
 8003b28:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003b2c:	ed80 7a01 	vstr	s14, [r0, #4]
	ctrlreg_tx[offset+2].f32=(float)menu[bank].enc[1].value*0.01;		//Feedback
 8003b30:	ed92 7a27 	vldr	s14, [r2, #156]	; 0x9c
 8003b34:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003b38:	ee27 7b06 	vmul.f64	d7, d7, d6
	ctrlreg_tx[offset+3].f32=(float)menu[bank].enc[2].value*0.001;		//Time in ms
 8003b3c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8003b68 <update_delay+0x70>
	ctrlreg_tx[offset+2].f32=(float)menu[bank].enc[1].value*0.01;		//Feedback
 8003b40:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003b44:	ed80 7a02 	vstr	s14, [r0, #8]
	ctrlreg_tx[offset+3].f32=(float)menu[bank].enc[2].value*0.001;		//Time in ms
 8003b48:	ed92 7a32 	vldr	s14, [r2, #200]	; 0xc8
 8003b4c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003b50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b54:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003b58:	ed80 7a03 	vstr	s14, [r0, #12]
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	47ae147b 	.word	0x47ae147b
 8003b64:	3f847ae1 	.word	0x3f847ae1
 8003b68:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b6c:	3f50624d 	.word	0x3f50624d
 8003b70:	20000fe8 	.word	0x20000fe8
 8003b74:	2000026c 	.word	0x2000026c
 8003b78:	20000890 	.word	0x20000890
 8003b7c:	00000000 	.word	0x00000000

08003b80 <update_overdrive>:
}

void update_overdrive(void){
 8003b80:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t offset=menu[bank].ctrl_offset;
 8003b82:	4e39      	ldr	r6, [pc, #228]	; (8003c68 <update_overdrive+0xe8>)
 8003b84:	22e0      	movs	r2, #224	; 0xe0
 8003b86:	4d39      	ldr	r5, [pc, #228]	; (8003c6c <update_overdrive+0xec>)
	ctrlreg_tx[offset+0].f32=(float)1+menu[bank].enc[0].value*menu[bank].enc[0].value;		//Gain
 8003b88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	uint16_t offset=menu[bank].ctrl_offset;
 8003b8c:	7833      	ldrb	r3, [r6, #0]
void update_overdrive(void){
 8003b8e:	b087      	sub	sp, #28
	ctrlreg_tx[offset+1].f32=(float)1.5-menu[bank].enc[0].value*0.1;	//Attenuation (Convert it to a correction gain)

	if(HP_old!=menu[bank].enc[1].value){
 8003b90:	4f37      	ldr	r7, [pc, #220]	; (8003c70 <update_overdrive+0xf0>)
	uint16_t offset=menu[bank].ctrl_offset;
 8003b92:	fb02 5303 	mla	r3, r2, r3, r5
	ctrlreg_tx[offset+0].f32=(float)1+menu[bank].enc[0].value*menu[bank].enc[0].value;		//Gain
 8003b96:	4a37      	ldr	r2, [pc, #220]	; (8003c74 <update_overdrive+0xf4>)
 8003b98:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
	uint16_t offset=menu[bank].ctrl_offset;
 8003b9c:	8a5c      	ldrh	r4, [r3, #18]
	ctrlreg_tx[offset+0].f32=(float)1+menu[bank].enc[0].value*menu[bank].enc[0].value;		//Gain
 8003b9e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8003ba2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
	ctrlreg_tx[offset+1].f32=(float)1.5-menu[bank].enc[0].value*0.1;	//Attenuation (Convert it to a correction gain)
 8003ba6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003baa:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8003c60 <update_overdrive+0xe0>
	ctrlreg_tx[offset+0].f32=(float)1+menu[bank].enc[0].value*menu[bank].enc[0].value;		//Gain
 8003bae:	edc1 7a00 	vstr	s15, [r1]
	ctrlreg_tx[offset+1].f32=(float)1.5-menu[bank].enc[0].value*0.1;	//Attenuation (Convert it to a correction gain)
 8003bb2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8003bb6:	eea6 7b45 	vfms.f64	d7, d6, d5
 8003bba:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	if(HP_old!=menu[bank].enc[1].value){
 8003bbe:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
	ctrlreg_tx[offset+1].f32=(float)1.5-menu[bank].enc[0].value*0.1;	//Attenuation (Convert it to a correction gain)
 8003bc2:	ed81 7a01 	vstr	s14, [r1, #4]
	if(HP_old!=menu[bank].enc[1].value){
 8003bc6:	ed97 7a00 	vldr	s14, [r7]
 8003bca:	eef4 7a47 	vcmp.f32	s15, s14
 8003bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd2:	d015      	beq.n	8003c00 <update_overdrive+0x80>
		//High pass variables
		uint16_t HP_offset=offset+2;		//Offset of ctrlreg_tx to write
 8003bd4:	1ca3      	adds	r3, r4, #2
		uint8_t HP_type=1;					//High pass
		float HP_G=-10;						//Gain
		float HP_F=menu[bank].enc[1].value;	//Frequency
		float HP_Q=0.7;						//Quality
		write_bqf_param(&HP_offset, &HP_type,&HP_G,&HP_F,&HP_Q);
 8003bd6:	aa03      	add	r2, sp, #12
 8003bd8:	f10d 0109 	add.w	r1, sp, #9
 8003bdc:	f10d 000a 	add.w	r0, sp, #10
		uint16_t HP_offset=offset+2;		//Offset of ctrlreg_tx to write
 8003be0:	f8ad 300a 	strh.w	r3, [sp, #10]
		uint8_t HP_type=1;					//High pass
 8003be4:	2301      	movs	r3, #1
		float HP_F=menu[bank].enc[1].value;	//Frequency
 8003be6:	edcd 7a04 	vstr	s15, [sp, #16]
		uint8_t HP_type=1;					//High pass
 8003bea:	f88d 3009 	strb.w	r3, [sp, #9]
		float HP_G=-10;						//Gain
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <update_overdrive+0xf8>)
 8003bf0:	9303      	str	r3, [sp, #12]
		float HP_Q=0.7;						//Quality
 8003bf2:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <update_overdrive+0xfc>)
 8003bf4:	9305      	str	r3, [sp, #20]
		write_bqf_param(&HP_offset, &HP_type,&HP_G,&HP_F,&HP_Q);
 8003bf6:	ab05      	add	r3, sp, #20
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	ab04      	add	r3, sp, #16
 8003bfc:	f7ff fd78 	bl	80036f0 <write_bqf_param>
	}
	HP_old=menu[bank].enc[1].value;
 8003c00:	22e0      	movs	r2, #224	; 0xe0
 8003c02:	7833      	ldrb	r3, [r6, #0]
 8003c04:	fb02 5303 	mla	r3, r2, r3, r5
 8003c08:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c

	if(LP_old!=menu[bank].enc[2].value){
 8003c0c:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
	HP_old=menu[bank].enc[1].value;
 8003c10:	603a      	str	r2, [r7, #0]
	if(LP_old!=menu[bank].enc[2].value){
 8003c12:	4f1b      	ldr	r7, [pc, #108]	; (8003c80 <update_overdrive+0x100>)
 8003c14:	ed97 7a00 	vldr	s14, [r7]
 8003c18:	eef4 7a47 	vcmp.f32	s15, s14
 8003c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c20:	d015      	beq.n	8003c4e <update_overdrive+0xce>
		//Low pass variables
		uint16_t LP_offset=offset+7;		//Offset of ctrlreg_tx to write
		uint8_t LP_type=0;					//High pass
 8003c22:	2300      	movs	r3, #0
		uint16_t LP_offset=offset+7;		//Offset of ctrlreg_tx to write
 8003c24:	3407      	adds	r4, #7
		float LP_G=-10;						//Gain
		float LP_F=menu[bank].enc[2].value;	//Frequency
		float LP_Q=0.7;						//Quality
		write_bqf_param(&LP_offset, &LP_type,&LP_G,&LP_F,&LP_Q);
 8003c26:	aa03      	add	r2, sp, #12
 8003c28:	f10d 0109 	add.w	r1, sp, #9
		uint8_t LP_type=0;					//High pass
 8003c2c:	f88d 3009 	strb.w	r3, [sp, #9]
		write_bqf_param(&LP_offset, &LP_type,&LP_G,&LP_F,&LP_Q);
 8003c30:	f10d 000a 	add.w	r0, sp, #10
		float LP_G=-10;						//Gain
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <update_overdrive+0xf8>)
		uint16_t LP_offset=offset+7;		//Offset of ctrlreg_tx to write
 8003c36:	f8ad 400a 	strh.w	r4, [sp, #10]
		float LP_G=-10;						//Gain
 8003c3a:	9303      	str	r3, [sp, #12]
		float LP_Q=0.7;						//Quality
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <update_overdrive+0xfc>)
		float LP_F=menu[bank].enc[2].value;	//Frequency
 8003c3e:	edcd 7a04 	vstr	s15, [sp, #16]
		float LP_Q=0.7;						//Quality
 8003c42:	9305      	str	r3, [sp, #20]
		write_bqf_param(&LP_offset, &LP_type,&LP_G,&LP_F,&LP_Q);
 8003c44:	ab05      	add	r3, sp, #20
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	ab04      	add	r3, sp, #16
 8003c4a:	f7ff fd51 	bl	80036f0 <write_bqf_param>
	}
	LP_old=menu[bank].enc[2].value;
 8003c4e:	7833      	ldrb	r3, [r6, #0]
 8003c50:	22e0      	movs	r2, #224	; 0xe0
 8003c52:	fb02 5503 	mla	r5, r2, r3, r5
 8003c56:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
 8003c5a:	603b      	str	r3, [r7, #0]

}
 8003c5c:	b007      	add	sp, #28
 8003c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c60:	9999999a 	.word	0x9999999a
 8003c64:	3fb99999 	.word	0x3fb99999
 8003c68:	20000fe8 	.word	0x20000fe8
 8003c6c:	2000026c 	.word	0x2000026c
 8003c70:	200010c4 	.word	0x200010c4
 8003c74:	20000890 	.word	0x20000890
 8003c78:	c1200000 	.word	0xc1200000
 8003c7c:	3f333333 	.word	0x3f333333
 8003c80:	20000fe0 	.word	0x20000fe0

08003c84 <init_events>:

int16_t enc[4];
uint8_t but[6];


void init_events(void){
 8003c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	//Process lock on
	P_LOCK=1;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4d3e      	ldr	r5, [pc, #248]	; (8003d84 <init_events+0x100>)

	//Event triggers
	UI_updated=0;
 8003c8c:	2400      	movs	r4, #0
	t_but_update=0;
	//Encoder update table
	t_enc_update=0;

	//Port&Pins for encoder 0
	enc_GPIO_Port[0][0]=ENC0A_PORT;
 8003c8e:	4a3e      	ldr	r2, [pc, #248]	; (8003d88 <init_events+0x104>)
	P_LOCK=1;
 8003c90:	702b      	strb	r3, [r5, #0]
	enc_GPIO_Port[0][1]=ENC0B_PORT;
	enc_GPIO_Pin[0][1]=ENC0B_PIN;

	//Port&Pins for encoder 1
	enc_GPIO_Port[1][0]=ENC1A_PORT;
	enc_GPIO_Pin[1][0]=ENC1A_PIN;
 8003c92:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	UI_updated=0;
 8003c96:	4b3d      	ldr	r3, [pc, #244]	; (8003d8c <init_events+0x108>)
	enc_GPIO_Pin[0][1]=ENC0B_PIN;
 8003c98:	2040      	movs	r0, #64	; 0x40
	enc_GPIO_Pin[0][0]=ENC0A_PIN;
 8003c9a:	f44f 4680 	mov.w	r6, #16384	; 0x4000
	enc_GPIO_Port[0][1]=ENC0B_PORT;
 8003c9e:	493c      	ldr	r1, [pc, #240]	; (8003d90 <init_events+0x10c>)
	UI_updated=0;
 8003ca0:	701c      	strb	r4, [r3, #0]
 8003ca2:	46a9      	mov	r9, r5
	t_but_update=0;
 8003ca4:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <init_events+0x110>)
 8003ca6:	4688      	mov	r8, r1
	enc_GPIO_Pin[1][1]=ENC1B_PIN;

	//Port&Pins for encoder 2
	enc_GPIO_Port[2][0]=ENC2A_PORT;
	enc_GPIO_Pin[2][0]=ENC2A_PIN;
	enc_GPIO_Port[2][1]=ENC2B_PORT;
 8003ca8:	f8df a110 	ldr.w	sl, [pc, #272]	; 8003dbc <init_events+0x138>
	t_but_update=0;
 8003cac:	701c      	strb	r4, [r3, #0]
	t_enc_update=0;
 8003cae:	4b3a      	ldr	r3, [pc, #232]	; (8003d98 <init_events+0x114>)
	enc_GPIO_Port[0][1]=ENC0B_PORT;
 8003cb0:	6051      	str	r1, [r2, #4]
	t_enc_update=0;
 8003cb2:	701c      	strb	r4, [r3, #0]
	enc_GPIO_Port[0][0]=ENC0A_PORT;
 8003cb4:	4b39      	ldr	r3, [pc, #228]	; (8003d9c <init_events+0x118>)
	enc_GPIO_Port[2][1]=ENC2B_PORT;
 8003cb6:	f8c2 a014 	str.w	sl, [r2, #20]
	enc_GPIO_Port[0][0]=ENC0A_PORT;
 8003cba:	6013      	str	r3, [r2, #0]
	enc_GPIO_Pin[0][0]=ENC0A_PIN;
 8003cbc:	4b38      	ldr	r3, [pc, #224]	; (8003da0 <init_events+0x11c>)
	enc_GPIO_Pin[2][1]=ENC2B_PIN;

	//Port&Pins for encoder 3
	enc_GPIO_Port[3][0]=ENC3A_PORT;
	enc_GPIO_Pin[3][0]=ENC3A_PIN;
	enc_GPIO_Port[3][1]=ENC3B_PORT;
 8003cbe:	61d1      	str	r1, [r2, #28]
	enc_GPIO_Pin[1][0]=ENC1A_PIN;
 8003cc0:	809f      	strh	r7, [r3, #4]
	enc_GPIO_Pin[1][1]=ENC1B_PIN;
 8003cc2:	2710      	movs	r7, #16
	enc_GPIO_Pin[0][1]=ENC0B_PIN;
 8003cc4:	8058      	strh	r0, [r3, #2]
 8003cc6:	461d      	mov	r5, r3
	enc_GPIO_Pin[1][1]=ENC1B_PIN;
 8003cc8:	80df      	strh	r7, [r3, #6]
	enc_GPIO_Port[2][0]=ENC2A_PORT;
 8003cca:	4f36      	ldr	r7, [pc, #216]	; (8003da4 <init_events+0x120>)
	enc_GPIO_Port[1][0]=ENC1A_PORT;
 8003ccc:	4836      	ldr	r0, [pc, #216]	; (8003da8 <init_events+0x124>)
	enc_GPIO_Port[2][0]=ENC2A_PORT;
 8003cce:	6117      	str	r7, [r2, #16]
	enc_GPIO_Pin[2][0]=ENC2A_PIN;
 8003cd0:	2704      	movs	r7, #4
	enc_GPIO_Pin[0][0]=ENC0A_PIN;
 8003cd2:	801e      	strh	r6, [r3, #0]
	enc_GPIO_Pin[2][0]=ENC2A_PIN;
 8003cd4:	811f      	strh	r7, [r3, #8]
	enc_GPIO_Pin[2][1]=ENC2B_PIN;
 8003cd6:	f44f 5700 	mov.w	r7, #8192	; 0x2000
	enc_GPIO_Port[1][0]=ENC1A_PORT;
 8003cda:	6090      	str	r0, [r2, #8]
	enc_GPIO_Port[1][1]=ENC1B_PORT;
 8003cdc:	60d0      	str	r0, [r2, #12]
	enc_GPIO_Pin[2][1]=ENC2B_PIN;
 8003cde:	815f      	strh	r7, [r3, #10]
	enc_GPIO_Port[3][0]=ENC3A_PORT;
 8003ce0:	6190      	str	r0, [r2, #24]
	enc_GPIO_Pin[3][1]=ENC3B_PIN;
 8003ce2:	2002      	movs	r0, #2
	enc_GPIO_Pin[3][0]=ENC3A_PIN;
 8003ce4:	819e      	strh	r6, [r3, #12]
 8003ce6:	4616      	mov	r6, r2
 8003ce8:	4f30      	ldr	r7, [pc, #192]	; (8003dac <init_events+0x128>)
	enc_GPIO_Pin[3][1]=ENC3B_PIN;
 8003cea:	81d8      	strh	r0, [r3, #14]

	//Initialize grey codes of encoders
	for(int i=0;i<4;i++){
		//Evaluate grey code
		enc_greycode[i]=(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<1);
 8003cec:	192a      	adds	r2, r5, r4
 8003cee:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 8003cf2:	5b29      	ldrh	r1, [r5, r4]
 8003cf4:	f856 0014 	ldr.w	r0, [r6, r4, lsl #1]
 8003cf8:	9201      	str	r2, [sp, #4]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	f7fc ff9c 	bl	8000c38 <HAL_GPIO_ReadPin>
		enc_greycode[i]|=HAL_GPIO_ReadPin(enc_GPIO_Port[i][1],enc_GPIO_Pin[i][1]);
 8003d00:	9a01      	ldr	r2, [sp, #4]
		enc_greycode[i]=(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<1);
 8003d02:	0040      	lsls	r0, r0, #1
		enc_greycode[i]|=HAL_GPIO_ReadPin(enc_GPIO_Port[i][1],enc_GPIO_Pin[i][1]);
 8003d04:	9b00      	ldr	r3, [sp, #0]
 8003d06:	8851      	ldrh	r1, [r2, #2]
		enc_greycode[i]=(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<1);
 8003d08:	7078      	strb	r0, [r7, #1]
		enc_greycode[i]|=HAL_GPIO_ReadPin(enc_GPIO_Port[i][1],enc_GPIO_Pin[i][1]);
 8003d0a:	6858      	ldr	r0, [r3, #4]
 8003d0c:	f7fc ff94 	bl	8000c38 <HAL_GPIO_ReadPin>
 8003d10:	787b      	ldrb	r3, [r7, #1]
		enc_greycode[i]|=(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<3);
 8003d12:	5b29      	ldrh	r1, [r5, r4]
		enc_greycode[i]|=HAL_GPIO_ReadPin(enc_GPIO_Port[i][1],enc_GPIO_Pin[i][1]);
 8003d14:	4318      	orrs	r0, r3
 8003d16:	7078      	strb	r0, [r7, #1]
		enc_greycode[i]|=(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<3);
 8003d18:	f856 0014 	ldr.w	r0, [r6, r4, lsl #1]
 8003d1c:	f7fc ff8c 	bl	8000c38 <HAL_GPIO_ReadPin>
 8003d20:	787b      	ldrb	r3, [r7, #1]
		enc_greycode[i]|=(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<2);
 8003d22:	5b29      	ldrh	r1, [r5, r4]
		enc_greycode[i]|=(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<3);
 8003d24:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8003d28:	7078      	strb	r0, [r7, #1]
		enc_greycode[i]|=(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<2);
 8003d2a:	f856 0014 	ldr.w	r0, [r6, r4, lsl #1]
 8003d2e:	3404      	adds	r4, #4
 8003d30:	f7fc ff82 	bl	8000c38 <HAL_GPIO_ReadPin>
 8003d34:	787b      	ldrb	r3, [r7, #1]
	for(int i=0;i<4;i++){
 8003d36:	2c10      	cmp	r4, #16
		enc_greycode[i]|=(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<2);
 8003d38:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
 8003d3c:	f807 0f01 	strb.w	r0, [r7, #1]!
	for(int i=0;i<4;i++){
 8003d40:	d1d4      	bne.n	8003cec <init_events+0x68>
	}

	//Port&Pins for button 0
	but_GPIO_Port[0]=BUT0_PORT;
	but_GPIO_Pin[0]=BUT0_PIN;
 8003d42:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <init_events+0x12c>)
	//Port&Pins for GPIOC 1
	but_GPIO_Port[1]=BUT1_PORT;
	but_GPIO_Pin[1]=BUT1_PIN;
 8003d44:	f44f 6080 	mov.w	r0, #1024	; 0x400
	but_GPIO_Port[0]=BUT0_PORT;
 8003d48:	4a1a      	ldr	r2, [pc, #104]	; (8003db4 <init_events+0x130>)
	but_GPIO_Pin[0]=BUT0_PIN;
 8003d4a:	2101      	movs	r1, #1
	but_GPIO_Pin[1]=BUT1_PIN;
 8003d4c:	8058      	strh	r0, [r3, #2]
	//Port&Pins for button 2
	but_GPIO_Port[2]=BUT2_PORT;
 8003d4e:	481a      	ldr	r0, [pc, #104]	; (8003db8 <init_events+0x134>)
	but_GPIO_Pin[0]=BUT0_PIN;
 8003d50:	8019      	strh	r1, [r3, #0]
	but_GPIO_Port[2]=BUT2_PORT;
 8003d52:	6090      	str	r0, [r2, #8]
	but_GPIO_Pin[2]=BUT2_PIN;
	//Port&Pins for button 3
	but_GPIO_Port[3]=BUT3_PORT;
	but_GPIO_Pin[3]=BUT3_PIN;
 8003d54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	but_GPIO_Pin[2]=BUT2_PIN;
 8003d58:	8099      	strh	r1, [r3, #4]
	but_GPIO_Pin[3]=BUT3_PIN;
 8003d5a:	80d8      	strh	r0, [r3, #6]
	//Port&Pins for button 4
	but_GPIO_Port[4]=BUT4_PORT;
	but_GPIO_Pin[4]=BUT4_PIN;
 8003d5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
	//Port&Pins for button 5
	but_GPIO_Port[5]=BUT5_PORT;
	but_GPIO_Pin[5]=BUT5_PIN;
 8003d60:	8159      	strh	r1, [r3, #10]
	but_GPIO_Pin[4]=BUT4_PIN;
 8003d62:	8118      	strh	r0, [r3, #8]

	P_LOCK=0;
 8003d64:	2300      	movs	r3, #0
	but_GPIO_Port[0]=BUT0_PORT;
 8003d66:	f8c2 8000 	str.w	r8, [r2]
	but_GPIO_Port[1]=BUT1_PORT;
 8003d6a:	f8c2 8004 	str.w	r8, [r2, #4]
	but_GPIO_Port[3]=BUT3_PORT;
 8003d6e:	f8c2 a00c 	str.w	sl, [r2, #12]
	but_GPIO_Port[4]=BUT4_PORT;
 8003d72:	f8c2 8010 	str.w	r8, [r2, #16]
	but_GPIO_Port[5]=BUT5_PORT;
 8003d76:	f8c2 a014 	str.w	sl, [r2, #20]
	P_LOCK=0;
 8003d7a:	f889 3000 	strb.w	r3, [r9]

}
 8003d7e:	b003      	add	sp, #12
 8003d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d84:	20001134 	.word	0x20001134
 8003d88:	200010cc 	.word	0x200010cc
 8003d8c:	20001135 	.word	0x20001135
 8003d90:	40020400 	.word	0x40020400
 8003d94:	20001118 	.word	0x20001118
 8003d98:	2000111f 	.word	0x2000111f
 8003d9c:	40021800 	.word	0x40021800
 8003da0:	20000258 	.word	0x20000258
 8003da4:	40020800 	.word	0x40020800
 8003da8:	40021400 	.word	0x40021400
 8003dac:	2000111f 	.word	0x2000111f
 8003db0:	200010b8 	.word	0x200010b8
 8003db4:	200010ec 	.word	0x200010ec
 8003db8:	40020000 	.word	0x40020000
 8003dbc:	40021000 	.word	0x40021000

08003dc0 <capture_events>:

void capture_events(void){
 8003dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}


	if(capture_status){
 8003dc4:	4b3b      	ldr	r3, [pc, #236]	; (8003eb4 <capture_events+0xf4>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d061      	beq.n	8003e90 <capture_events+0xd0>
 8003dcc:	4e3a      	ldr	r6, [pc, #232]	; (8003eb8 <capture_events+0xf8>)
 8003dce:	2500      	movs	r5, #0
	//Capture encoders
		for(int i=0;i<4;i++){
			//Evaluate grey code
			enc_greycode[i]=0b00001100&(enc_greycode[i]<<2);	//Shift to left by 2
			enc_greycode[i]=enc_greycode[i]|(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<1);		//Put the first pin value to the second place from right
 8003dd0:	4f3a      	ldr	r7, [pc, #232]	; (8003ebc <capture_events+0xfc>)
 8003dd2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8003ee4 <capture_events+0x124>
			enc_greycode[i]=enc_greycode[i]|HAL_GPIO_ReadPin(enc_GPIO_Port[i][1],enc_GPIO_Pin[i][1]);			//Put the first pin value to the right

			//Get the counter value of the grey code counter
			ctr=lut[enc_greycode[i]];
 8003dd6:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8003ee8 <capture_events+0x128>
			enc_greycode[i]=0b00001100&(enc_greycode[i]<<2);	//Shift to left by 2
 8003dda:	7874      	ldrb	r4, [r6, #1]
			enc_greycode[i]=enc_greycode[i]|(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<1);		//Put the first pin value to the second place from right
 8003ddc:	eb07 0b85 	add.w	fp, r7, r5, lsl #2
 8003de0:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
 8003de4:	eb08 0ac5 	add.w	sl, r8, r5, lsl #3
			enc_greycode[i]=0b00001100&(enc_greycode[i]<<2);	//Shift to left by 2
 8003de8:	00a4      	lsls	r4, r4, #2
			enc_greycode[i]=enc_greycode[i]|(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<1);		//Put the first pin value to the second place from right
 8003dea:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
			enc_greycode[i]=0b00001100&(enc_greycode[i]<<2);	//Shift to left by 2
 8003dee:	f004 040c 	and.w	r4, r4, #12
 8003df2:	7074      	strb	r4, [r6, #1]
			enc_greycode[i]=enc_greycode[i]|(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<1);		//Put the first pin value to the second place from right
 8003df4:	f7fc ff20 	bl	8000c38 <HAL_GPIO_ReadPin>
			enc_greycode[i]=enc_greycode[i]|HAL_GPIO_ReadPin(enc_GPIO_Port[i][1],enc_GPIO_Pin[i][1]);			//Put the first pin value to the right
 8003df8:	f8bb 1002 	ldrh.w	r1, [fp, #2]
			enc_greycode[i]=enc_greycode[i]|(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<1);		//Put the first pin value to the second place from right
 8003dfc:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
			enc_greycode[i]=enc_greycode[i]|HAL_GPIO_ReadPin(enc_GPIO_Port[i][1],enc_GPIO_Pin[i][1]);			//Put the first pin value to the right
 8003e00:	f8da 0004 	ldr.w	r0, [sl, #4]
			enc_greycode[i]=enc_greycode[i]|(HAL_GPIO_ReadPin(enc_GPIO_Port[i][0],enc_GPIO_Pin[i][0])<<1);		//Put the first pin value to the second place from right
 8003e04:	b2e4      	uxtb	r4, r4
 8003e06:	7074      	strb	r4, [r6, #1]
			enc_greycode[i]=enc_greycode[i]|HAL_GPIO_ReadPin(enc_GPIO_Port[i][1],enc_GPIO_Pin[i][1]);			//Put the first pin value to the right
 8003e08:	f7fc ff16 	bl	8000c38 <HAL_GPIO_ReadPin>
 8003e0c:	4320      	orrs	r0, r4
			ctr=lut[enc_greycode[i]];
 8003e0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ec0 <capture_events+0x100>)
			enc_greycode[i]=enc_greycode[i]|HAL_GPIO_ReadPin(enc_GPIO_Port[i][1],enc_GPIO_Pin[i][1]);			//Put the first pin value to the right
 8003e10:	b2c0      	uxtb	r0, r0
			ctr=lut[enc_greycode[i]];
 8003e12:	f819 3000 	ldrb.w	r3, [r9, r0]
			enc_greycode[i]=enc_greycode[i]|HAL_GPIO_ReadPin(enc_GPIO_Port[i][1],enc_GPIO_Pin[i][1]);			//Put the first pin value to the right
 8003e16:	f806 0f01 	strb.w	r0, [r6, #1]!
			ctr=lut[enc_greycode[i]];
 8003e1a:	7013      	strb	r3, [r2, #0]

			//Take action if any changes
			if(ctr!=0){
 8003e1c:	b163      	cbz	r3, 8003e38 <capture_events+0x78>
				enc_fifo[i]=enc_fifo[i]+ctr;
 8003e1e:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <capture_events+0x104>)
 8003e20:	5ca9      	ldrb	r1, [r5, r2]
 8003e22:	440b      	add	r3, r1
	//			printf("Update enc %d:%d\n",i,enc_fifo[i]);
				//Save the encoders which are affected
				t_enc_update=t_enc_update|(1<<i);
 8003e24:	4928      	ldr	r1, [pc, #160]	; (8003ec8 <capture_events+0x108>)
				enc_fifo[i]=enc_fifo[i]+ctr;
 8003e26:	54ab      	strb	r3, [r5, r2]
				t_enc_update=t_enc_update|(1<<i);
 8003e28:	2201      	movs	r2, #1
 8003e2a:	7808      	ldrb	r0, [r1, #0]
 8003e2c:	fa02 f305 	lsl.w	r3, r2, r5
 8003e30:	4303      	orrs	r3, r0
 8003e32:	700b      	strb	r3, [r1, #0]
				//Set GUI update
				UI_updated=1;
 8003e34:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <capture_events+0x10c>)
 8003e36:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<4;i++){
 8003e38:	3501      	adds	r5, #1
 8003e3a:	2d04      	cmp	r5, #4
 8003e3c:	d1cd      	bne.n	8003dda <capture_events+0x1a>
 8003e3e:	4e24      	ldr	r6, [pc, #144]	; (8003ed0 <capture_events+0x110>)
 8003e40:	2400      	movs	r4, #0
 8003e42:	4d24      	ldr	r5, [pc, #144]	; (8003ed4 <capture_events+0x114>)
		}

		//Capture buttons
		for(int k=0;k<6;k++){
			//Debounce
			if(!HAL_GPIO_ReadPin(but_GPIO_Port[k],but_GPIO_Pin[k])){	//If button pressed (polarity high)
 8003e44:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003eec <capture_events+0x12c>
 8003e48:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8003ef0 <capture_events+0x130>
			  tic[k]=HAL_GetTick();										//Set counter start
			  release[k]=1;												//Release lock
			}else if(release[k]&&HAL_GetTick()>tic[k]+t_debounce){		//If release time filled
 8003e4c:	4f22      	ldr	r7, [pc, #136]	; (8003ed8 <capture_events+0x118>)
			if(!HAL_GPIO_ReadPin(but_GPIO_Port[k],but_GPIO_Pin[k])){	//If button pressed (polarity high)
 8003e4e:	f838 1014 	ldrh.w	r1, [r8, r4, lsl #1]
 8003e52:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8003e56:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 8003e5a:	f7fc feed 	bl	8000c38 <HAL_GPIO_ReadPin>
 8003e5e:	b9c8      	cbnz	r0, 8003e94 <capture_events+0xd4>
			  tic[k]=HAL_GetTick();										//Set counter start
 8003e60:	f7fc fc0a 	bl	8000678 <HAL_GetTick>
			  release[k]=1;												//Release lock
 8003e64:	2301      	movs	r3, #1
			  tic[k]=HAL_GetTick();										//Set counter start
 8003e66:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
			  key_debounced[k]=1;										//Set key debounced flag
			  release[k]=0;												//Unrelease
 8003e6a:	702b      	strb	r3, [r5, #0]
			}

			//Action
			if(key_debounced[k]){										//If debounced
 8003e6c:	7833      	ldrb	r3, [r6, #0]
 8003e6e:	b153      	cbz	r3, 8003e86 <capture_events+0xc6>
			  t_but_update=t_but_update|(1<<k);							//Update corresponding button flag
 8003e70:	491a      	ldr	r1, [pc, #104]	; (8003edc <capture_events+0x11c>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	7808      	ldrb	r0, [r1, #0]
 8003e76:	fa02 f304 	lsl.w	r3, r2, r4
 8003e7a:	4303      	orrs	r3, r0
 8003e7c:	700b      	strb	r3, [r1, #0]
	//		  printf("Button %d update\n",k);
			  key_debounced[k]=0;										//Unset debounced flag
 8003e7e:	2300      	movs	r3, #0
 8003e80:	7033      	strb	r3, [r6, #0]
			  UI_updated=1;												//Set updated flag
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <capture_events+0x10c>)
 8003e84:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<6;k++){
 8003e86:	3401      	adds	r4, #1
 8003e88:	3601      	adds	r6, #1
 8003e8a:	3501      	adds	r5, #1
 8003e8c:	2c06      	cmp	r4, #6
 8003e8e:	d1de      	bne.n	8003e4e <capture_events+0x8e>
 8003e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}else if(release[k]&&HAL_GetTick()>tic[k]+t_debounce){		//If release time filled
 8003e94:	782b      	ldrb	r3, [r5, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0e8      	beq.n	8003e6c <capture_events+0xac>
 8003e9a:	f7fc fbed 	bl	8000678 <HAL_GetTick>
 8003e9e:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <capture_events+0x120>)
 8003ea0:	f85a 2007 	ldr.w	r2, [sl, r7]
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	4298      	cmp	r0, r3
 8003eaa:	d9df      	bls.n	8003e6c <capture_events+0xac>
			  key_debounced[k]=1;										//Set key debounced flag
 8003eac:	2301      	movs	r3, #1
 8003eae:	7033      	strb	r3, [r6, #0]
			  release[k]=0;												//Unrelease
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e7da      	b.n	8003e6a <capture_events+0xaa>
 8003eb4:	2000115a 	.word	0x2000115a
 8003eb8:	2000111f 	.word	0x2000111f
 8003ebc:	20000258 	.word	0x20000258
 8003ec0:	20000246 	.word	0x20000246
 8003ec4:	20001150 	.word	0x20001150
 8003ec8:	2000111f 	.word	0x2000111f
 8003ecc:	20001135 	.word	0x20001135
 8003ed0:	20001119 	.word	0x20001119
 8003ed4:	2000112d 	.word	0x2000112d
 8003ed8:	20001138 	.word	0x20001138
 8003edc:	20001118 	.word	0x20001118
 8003ee0:	2000001c 	.word	0x2000001c
 8003ee4:	200010cc 	.word	0x200010cc
 8003ee8:	2000000c 	.word	0x2000000c
 8003eec:	200010b8 	.word	0x200010b8
 8003ef0:	200010ec 	.word	0x200010ec

08003ef4 <evm>:
	}
}


/*Main event manager*/
void evm(void){
 8003ef4:	b570      	push	{r4, r5, r6, lr}
	uint8_t last_but_id;
	uint8_t last_enc_id;
	int8_t getval;

	//UI processing
	if(!P_LOCK){									//Check if there's a process lock
 8003ef6:	4c26      	ldr	r4, [pc, #152]	; (8003f90 <evm+0x9c>)
 8003ef8:	7823      	ldrb	r3, [r4, #0]
 8003efa:	bb2b      	cbnz	r3, 8003f48 <evm+0x54>
		if(UI_updated){								//Check if there's an update
 8003efc:	4a25      	ldr	r2, [pc, #148]	; (8003f94 <evm+0xa0>)
 8003efe:	7811      	ldrb	r1, [r2, #0]
 8003f00:	b301      	cbz	r1, 8003f44 <evm+0x50>
			P_LOCK=1;								//Set process lock
 8003f02:	2101      	movs	r1, #1
			UI_updated=0;							//Raise down UI updated flag
 8003f04:	7013      	strb	r3, [r2, #0]

			//Get encoder number
			for(int i=0;i<4;i++){
				if(t_enc_update&(1<<i)){
 8003f06:	4a24      	ldr	r2, [pc, #144]	; (8003f98 <evm+0xa4>)
			P_LOCK=1;								//Set process lock
 8003f08:	7021      	strb	r1, [r4, #0]
				if(t_enc_update&(1<<i)){
 8003f0a:	7811      	ldrb	r1, [r2, #0]
 8003f0c:	fa41 f003 	asr.w	r0, r1, r3
 8003f10:	07c5      	lsls	r5, r0, #31
 8003f12:	d52d      	bpl.n	8003f70 <evm+0x7c>
					t_enc_update=0;					//Raise down encoder updated flags
 8003f14:	2000      	movs	r0, #0
					getval=enc_fifo[i];				//Write down the value in FIFO...
					enc_fifo[i]=0;					//...and reset it.
					last_enc_id=i;					//Encoder id

				/*******BEGIN Process encoder changes********/
				if(last_enc_id==3){					//Enc ID 3 is context encoder
 8003f16:	2b03      	cmp	r3, #3
					t_enc_update=0;					//Raise down encoder updated flags
 8003f18:	7010      	strb	r0, [r2, #0]
					getval=enc_fifo[i];				//Write down the value in FIFO...
 8003f1a:	4a20      	ldr	r2, [pc, #128]	; (8003f9c <evm+0xa8>)
 8003f1c:	56d1      	ldrsb	r1, [r2, r3]
					enc_fifo[i]=0;					//...and reset it.
 8003f1e:	54d0      	strb	r0, [r2, r3]
				if(last_enc_id==3){					//Enc ID 3 is context encoder
 8003f20:	d122      	bne.n	8003f68 <evm+0x74>
					update_ui_context(getval);
 8003f22:	4608      	mov	r0, r1
 8003f24:	f7fe fb40 	bl	80025a8 <update_ui_context>
				}
			}

			//Get button number
			for(int i=0;i<6;i++){
				if(t_but_update&(1<<i)){
 8003f28:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <evm+0xac>)
			for(int i=0;i<6;i++){
 8003f2a:	2300      	movs	r3, #0
				if(t_but_update&(1<<i)){
 8003f2c:	7811      	ldrb	r1, [r2, #0]
 8003f2e:	fa41 f003 	asr.w	r0, r1, r3
 8003f32:	07c0      	lsls	r0, r0, #31
 8003f34:	d528      	bpl.n	8003f88 <evm+0x94>
					t_but_update=0;					//Raise down button updated flags
 8003f36:	2100      	movs	r1, #0
					last_but_id=i;					//Button id

					/*******BEGIN Process button changes********/
					if(last_but_id==4){
 8003f38:	2b04      	cmp	r3, #4
					last_but_id=i;					//Button id
 8003f3a:	b2d8      	uxtb	r0, r3
					t_but_update=0;					//Raise down button updated flags
 8003f3c:	7011      	strb	r1, [r2, #0]
					if(last_but_id==4){
 8003f3e:	d11b      	bne.n	8003f78 <evm+0x84>
						toggle_dsp();
 8003f40:	f7fe f940 	bl	80021c4 <toggle_dsp>
			}
		}



		P_LOCK=0;									//Unset process lock
 8003f44:	2300      	movs	r3, #0
 8003f46:	7023      	strb	r3, [r4, #0]
	}


	//Tuner processing
	if(mute_state && !tuner_update_lock){				//Mute active=>Turn on tuner
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <evm+0xb0>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b15b      	cbz	r3, 8003f66 <evm+0x72>
 8003f4e:	4c16      	ldr	r4, [pc, #88]	; (8003fa8 <evm+0xb4>)
 8003f50:	7825      	ldrb	r5, [r4, #0]
 8003f52:	b945      	cbnz	r5, 8003f66 <evm+0x72>
		if(tnr_update){									//Tuner update request on
 8003f54:	4e15      	ldr	r6, [pc, #84]	; (8003fac <evm+0xb8>)
 8003f56:	7833      	ldrb	r3, [r6, #0]
 8003f58:	b12b      	cbz	r3, 8003f66 <evm+0x72>
			tuner_update_lock=1;						//Lock tuner update
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	7023      	strb	r3, [r4, #0]
			update_tuner();								//Update tuner
 8003f5e:	f000 fd89 	bl	8004a74 <update_tuner>
			tnr_update=0;								//Raise down the tuner update request
 8003f62:	7035      	strb	r5, [r6, #0]
			tuner_update_lock=0;						//Unlock tuner update
 8003f64:	7025      	strb	r5, [r4, #0]
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
					update_encoder(last_enc_id,getval);
 8003f68:	b2d8      	uxtb	r0, r3
 8003f6a:	f7fe ff5f 	bl	8002e2c <update_encoder>
 8003f6e:	e7db      	b.n	8003f28 <evm+0x34>
			for(int i=0;i<4;i++){
 8003f70:	3301      	adds	r3, #1
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d1ca      	bne.n	8003f0c <evm+0x18>
 8003f76:	e7d7      	b.n	8003f28 <evm+0x34>
					}else if(last_but_id==5){
 8003f78:	2b05      	cmp	r3, #5
 8003f7a:	d102      	bne.n	8003f82 <evm+0x8e>
						toggle_mute();
 8003f7c:	f7fe ff0a 	bl	8002d94 <toggle_mute>
 8003f80:	e7e0      	b.n	8003f44 <evm+0x50>
						update_button(last_but_id);
 8003f82:	f7fe ff71 	bl	8002e68 <update_button>
 8003f86:	e7dd      	b.n	8003f44 <evm+0x50>
			for(int i=0;i<6;i++){
 8003f88:	3301      	adds	r3, #1
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d1cf      	bne.n	8003f2e <evm+0x3a>
 8003f8e:	e7d9      	b.n	8003f44 <evm+0x50>
 8003f90:	20001134 	.word	0x20001134
 8003f94:	20001135 	.word	0x20001135
 8003f98:	2000111f 	.word	0x2000111f
 8003f9c:	20001150 	.word	0x20001150
 8003fa0:	20001118 	.word	0x20001118
 8003fa4:	20000245 	.word	0x20000245
 8003fa8:	2000112c 	.word	0x2000112c
 8003fac:	20001133 	.word	0x20001133

08003fb0 <tuner_handler>:
}


void tuner_handler(void){
	//Raise tuner update flag
	tnr_update=1;
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	4b01      	ldr	r3, [pc, #4]	; (8003fb8 <tuner_handler+0x8>)
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	4770      	bx	lr
 8003fb8:	20001133 	.word	0x20001133

08003fbc <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fbc:	4b38      	ldr	r3, [pc, #224]	; (80040a0 <SystemClock_Config+0xe4>)
 8003fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8003fc4:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
{
 8003fc8:	b0b8      	sub	sp, #224	; 0xe0
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fcc:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fce:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003fd0:	2504      	movs	r5, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fd6:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fdc:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <SystemClock_Config+0xe8>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fe8:	9607      	str	r6, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fee:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ff0:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003ff6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ffa:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003ffc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ffe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004002:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004004:	23d8      	movs	r3, #216	; 0xd8
 8004006:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004008:	2309      	movs	r3, #9
 800400a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800400c:	f7fc fe7c 	bl	8000d08 <HAL_RCC_OscConfig>
 8004010:	b118      	cbz	r0, 800401a <SystemClock_Config+0x5e>
}

void _Error_Handler(char *file, int line)
{

	printf("HAL ERROR!\n");
 8004012:	4825      	ldr	r0, [pc, #148]	; (80040a8 <SystemClock_Config+0xec>)
 8004014:	f001 faca 	bl	80055ac <puts>
 8004018:	e7fe      	b.n	8004018 <SystemClock_Config+0x5c>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800401a:	f7fc fe3d 	bl	8000c98 <HAL_PWREx_EnableOverDrive>
 800401e:	b118      	cbz	r0, 8004028 <SystemClock_Config+0x6c>
	printf("HAL ERROR!\n");
 8004020:	4821      	ldr	r0, [pc, #132]	; (80040a8 <SystemClock_Config+0xec>)
 8004022:	f001 fac3 	bl	80055ac <puts>
 8004026:	e7fe      	b.n	8004026 <SystemClock_Config+0x6a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004028:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800402a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800402c:	2107      	movs	r1, #7
 800402e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004030:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004032:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004036:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004038:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800403a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800403e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004040:	f7fd f824 	bl	800108c <HAL_RCC_ClockConfig>
 8004044:	b118      	cbz	r0, 800404e <SystemClock_Config+0x92>
	printf("HAL ERROR!\n");
 8004046:	4818      	ldr	r0, [pc, #96]	; (80040a8 <SystemClock_Config+0xec>)
 8004048:	f001 fab0 	bl	80055ac <puts>
 800404c:	e7fe      	b.n	800404c <SystemClock_Config+0x90>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SAI1
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <SystemClock_Config+0xf0>)
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8004050:	901c      	str	r0, [sp, #112]	; 0x70
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SAI1
 8004052:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8004054:	2360      	movs	r3, #96	; 0x60
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004056:	901f      	str	r0, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8004058:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800405a:	2303      	movs	r3, #3
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800405c:	9023      	str	r0, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800405e:	9027      	str	r0, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004060:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004062:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004064:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8004066:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004068:	961e      	str	r6, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800406a:	f7fd f8b3 	bl	80011d4 <HAL_RCCEx_PeriphCLKConfig>
 800406e:	4604      	mov	r4, r0
 8004070:	b118      	cbz	r0, 800407a <SystemClock_Config+0xbe>
	printf("HAL ERROR!\n");
 8004072:	480d      	ldr	r0, [pc, #52]	; (80040a8 <SystemClock_Config+0xec>)
 8004074:	f001 fa9a 	bl	80055ac <puts>
 8004078:	e7fe      	b.n	8004078 <SystemClock_Config+0xbc>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800407a:	f7fd f8a5 	bl	80011c8 <HAL_RCC_GetHCLKFreq>
 800407e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004082:	fbb0 f0f3 	udiv	r0, r0, r3
 8004086:	f7fc fb65 	bl	8000754 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800408a:	4628      	mov	r0, r5
 800408c:	f7fc fb78 	bl	8000780 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004090:	4622      	mov	r2, r4
 8004092:	4621      	mov	r1, r4
 8004094:	f04f 30ff 	mov.w	r0, #4294967295
 8004098:	f7fc fb18 	bl	80006cc <HAL_NVIC_SetPriority>
}
 800409c:	b038      	add	sp, #224	; 0xe0
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40007000 	.word	0x40007000
 80040a8:	08009583 	.word	0x08009583
 80040ac:	00280100 	.word	0x00280100

080040b0 <main>:
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b090      	sub	sp, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b4:	2400      	movs	r4, #0
  HAL_Init();
 80040b6:	f7fc fac7 	bl	8000648 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ba:	2501      	movs	r5, #1
  SystemClock_Config();
 80040bc:	f7ff ff7e 	bl	8003fbc <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80040c0:	4b9b      	ldr	r3, [pc, #620]	; (8004330 <main+0x280>)
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80040c2:	2143      	movs	r1, #67	; 0x43
 80040c4:	489b      	ldr	r0, [pc, #620]	; (8004334 <main+0x284>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80040c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		  GPIO_InitStruct.Pin = enc_GPIO_Pin[i][j];
 80040c8:	4f9b      	ldr	r7, [pc, #620]	; (8004338 <main+0x288>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80040ca:	f042 0210 	orr.w	r2, r2, #16
		  HAL_GPIO_Init(enc_GPIO_Port[i][j], &GPIO_InitStruct);
 80040ce:	4e9b      	ldr	r6, [pc, #620]	; (800433c <main+0x28c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
 80040d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d4:	f002 0210 	and.w	r2, r2, #16
 80040d8:	9200      	str	r2, [sp, #0]
 80040da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040de:	f042 0204 	orr.w	r2, r2, #4
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
 80040e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e6:	f002 0204 	and.w	r2, r2, #4
 80040ea:	9201      	str	r2, [sp, #4]
 80040ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f0:	f042 0220 	orr.w	r2, r2, #32
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
 80040f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f8:	f002 0220 	and.w	r2, r2, #32
 80040fc:	9202      	str	r2, [sp, #8]
 80040fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004102:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
 8004108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800410e:	9203      	str	r2, [sp, #12]
 8004110:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
 800411a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411c:	f002 0201 	and.w	r2, r2, #1
 8004120:	9204      	str	r2, [sp, #16]
 8004122:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
 800412c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004132:	9205      	str	r2, [sp, #20]
 8004134:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004138:	f042 0202 	orr.w	r2, r2, #2
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
 800413e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004140:	f002 0202 	and.w	r2, r2, #2
 8004144:	9206      	str	r2, [sp, #24]
 8004146:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414a:	f042 0208 	orr.w	r2, r2, #8
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004150:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	9307      	str	r3, [sp, #28]
 800415a:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800415c:	f7fc fd72 	bl	8000c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004160:	2200      	movs	r2, #0
 8004162:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8004166:	4876      	ldr	r0, [pc, #472]	; (8004340 <main+0x290>)
 8004168:	f7fc fd6c 	bl	8000c44 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DP_RST_PIN;
 800416c:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(DP_RST_PORT, &GPIO_InitStruct);
 8004170:	a90b      	add	r1, sp, #44	; 0x2c
 8004172:	4874      	ldr	r0, [pc, #464]	; (8004344 <main+0x294>)
  GPIO_InitStruct.Pin = DP_RST_PIN;
 8004174:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004176:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004178:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(DP_RST_PORT, &GPIO_InitStruct);
 800417a:	f7fc fc73 	bl	8000a64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DP_CS_PIN;
 800417e:	2304      	movs	r3, #4
  HAL_GPIO_Init(DP_CS_PORT, &GPIO_InitStruct);
 8004180:	a90b      	add	r1, sp, #44	; 0x2c
 8004182:	4871      	ldr	r0, [pc, #452]	; (8004348 <main+0x298>)
  GPIO_InitStruct.Pin = DP_CS_PIN;
 8004184:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004186:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004188:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(DP_CS_PORT, &GPIO_InitStruct);
 800418a:	f7fc fc6b 	bl	8000a64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DP_DC_PIN;
 800418e:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(DP_DC_PORT, &GPIO_InitStruct);
 8004192:	a90b      	add	r1, sp, #44	; 0x2c
 8004194:	486b      	ldr	r0, [pc, #428]	; (8004344 <main+0x294>)
  GPIO_InitStruct.Pin = DP_DC_PIN;
 8004196:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004198:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(DP_DC_PORT, &GPIO_InitStruct);
 800419c:	f7fc fc62 	bl	8000a64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_R_PIN | LED_G_PIN | LED_B_PIN;
 80041a0:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(LED_RGB_PORT, &GPIO_InitStruct);
 80041a2:	a90b      	add	r1, sp, #44	; 0x2c
 80041a4:	4869      	ldr	r0, [pc, #420]	; (800434c <main+0x29c>)
  GPIO_InitStruct.Pin = LED_R_PIN | LED_G_PIN | LED_B_PIN;
 80041a6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041aa:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LED_RGB_PORT, &GPIO_InitStruct);
 80041ac:	f7fc fc5a 	bl	8000a64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PA_Standby_PIN;
 80041b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(PA_Standby_Port, &GPIO_InitStruct);
 80041b4:	a90b      	add	r1, sp, #44	; 0x2c
 80041b6:	4866      	ldr	r0, [pc, #408]	; (8004350 <main+0x2a0>)
  GPIO_InitStruct.Pin = PA_Standby_PIN;
 80041b8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ba:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041bc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(PA_Standby_Port, &GPIO_InitStruct);
 80041be:	f7fc fc51 	bl	8000a64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80041c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80041c6:	a90b      	add	r1, sp, #44	; 0x2c
 80041c8:	485e      	ldr	r0, [pc, #376]	; (8004344 <main+0x294>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80041ca:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041cc:	4b61      	ldr	r3, [pc, #388]	; (8004354 <main+0x2a4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ce:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041d0:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80041d2:	f7fc fc47 	bl	8000a64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 80041d6:	2343      	movs	r3, #67	; 0x43
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80041d8:	a90b      	add	r1, sp, #44	; 0x2c
 80041da:	4856      	ldr	r0, [pc, #344]	; (8004334 <main+0x284>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 80041dc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041de:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80041e4:	f7fc fc3e 	bl	8000a64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80041e8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ec:	950c      	str	r5, [sp, #48]	; 0x30
		  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041ee:	4625      	mov	r5, r4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f0:	a90b      	add	r1, sp, #44	; 0x2c
 80041f2:	4853      	ldr	r0, [pc, #332]	; (8004340 <main+0x290>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80041f4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041fa:	f7fc fc33 	bl	8000a64 <HAL_GPIO_Init>
		  GPIO_InitStruct.Pin = enc_GPIO_Pin[i][j];
 80041fe:	5be3      	ldrh	r3, [r4, r7]
 8004200:	eb04 0907 	add.w	r9, r4, r7
		  HAL_GPIO_Init(enc_GPIO_Port[i][j], &GPIO_InitStruct);
 8004204:	f856 0014 	ldr.w	r0, [r6, r4, lsl #1]
 8004208:	eb06 0844 	add.w	r8, r6, r4, lsl #1
 800420c:	a90b      	add	r1, sp, #44	; 0x2c
		  GPIO_InitStruct.Pin = enc_GPIO_Pin[i][j];
 800420e:	930b      	str	r3, [sp, #44]	; 0x2c
		  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004210:	950c      	str	r5, [sp, #48]	; 0x30
 8004212:	3404      	adds	r4, #4
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004214:	950d      	str	r5, [sp, #52]	; 0x34
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004216:	950e      	str	r5, [sp, #56]	; 0x38
		  HAL_GPIO_Init(enc_GPIO_Port[i][j], &GPIO_InitStruct);
 8004218:	f7fc fc24 	bl	8000a64 <HAL_GPIO_Init>
		  GPIO_InitStruct.Pin = enc_GPIO_Pin[i][j];
 800421c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
		  HAL_GPIO_Init(enc_GPIO_Port[i][j], &GPIO_InitStruct);
 8004220:	a90b      	add	r1, sp, #44	; 0x2c
 8004222:	f8d8 0004 	ldr.w	r0, [r8, #4]
		  GPIO_InitStruct.Pin = enc_GPIO_Pin[i][j];
 8004226:	930b      	str	r3, [sp, #44]	; 0x2c
		  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004228:	950c      	str	r5, [sp, #48]	; 0x30
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	950d      	str	r5, [sp, #52]	; 0x34
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422c:	950e      	str	r5, [sp, #56]	; 0x38
		  HAL_GPIO_Init(enc_GPIO_Port[i][j], &GPIO_InitStruct);
 800422e:	f7fc fc19 	bl	8000a64 <HAL_GPIO_Init>
  for(int i=0;i<4;i++){
 8004232:	2c10      	cmp	r4, #16
 8004234:	d1e3      	bne.n	80041fe <main+0x14e>
 8004236:	2500      	movs	r5, #0
	  GPIO_InitStruct.Pin = but_GPIO_Pin[i];
 8004238:	4f47      	ldr	r7, [pc, #284]	; (8004358 <main+0x2a8>)
	  HAL_GPIO_Init(but_GPIO_Port[i], &GPIO_InitStruct);
 800423a:	4e48      	ldr	r6, [pc, #288]	; (800435c <main+0x2ac>)
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800423c:	462c      	mov	r4, r5
	  GPIO_InitStruct.Pin = but_GPIO_Pin[i];
 800423e:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
	  HAL_GPIO_Init(but_GPIO_Port[i], &GPIO_InitStruct);
 8004242:	a90b      	add	r1, sp, #44	; 0x2c
 8004244:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
  for(int i=0;i<6;i++){
 8004248:	3501      	adds	r5, #1
	  GPIO_InitStruct.Pin = but_GPIO_Pin[i];
 800424a:	930b      	str	r3, [sp, #44]	; 0x2c
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800424c:	940c      	str	r4, [sp, #48]	; 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424e:	940d      	str	r4, [sp, #52]	; 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004250:	940e      	str	r4, [sp, #56]	; 0x38
	  HAL_GPIO_Init(but_GPIO_Port[i], &GPIO_InitStruct);
 8004252:	f7fc fc07 	bl	8000a64 <HAL_GPIO_Init>
  for(int i=0;i<6;i++){
 8004256:	2d06      	cmp	r5, #6
 8004258:	d1f1      	bne.n	800423e <main+0x18e>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800425a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800425c:	4835      	ldr	r0, [pc, #212]	; (8004334 <main+0x284>)
 800425e:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004260:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004262:	930b      	str	r3, [sp, #44]	; 0x2c
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004264:	f44f 7882 	mov.w	r8, #260	; 0x104
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800426a:	f7fc fbfb 	bl	8000a64 <HAL_GPIO_Init>
  hspi3.Instance = SPI3;
 800426e:	483c      	ldr	r0, [pc, #240]	; (8004360 <main+0x2b0>)
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004270:	f44f 67e0 	mov.w	r7, #1792	; 0x700
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004274:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <main+0x2b4>)
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004276:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800427a:	6084      	str	r4, [r0, #8]
  hspi3.Init.CRCPolynomial = 7;
 800427c:	2507      	movs	r5, #7
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800427e:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004280:	6144      	str	r4, [r0, #20]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004282:	61c4      	str	r4, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004284:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004286:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004288:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800428a:	6304      	str	r4, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800428c:	2408      	movs	r4, #8
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800428e:	60c7      	str	r7, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004290:	6186      	str	r6, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8004292:	62c5      	str	r5, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004294:	6344      	str	r4, [r0, #52]	; 0x34
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004296:	e880 0108 	stmia.w	r0, {r3, r8}
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800429a:	f7fd facd 	bl	8001838 <HAL_SPI_Init>
 800429e:	b118      	cbz	r0, 80042a8 <main+0x1f8>
	printf("HAL ERROR!\n");
 80042a0:	4831      	ldr	r0, [pc, #196]	; (8004368 <main+0x2b8>)
 80042a2:	f001 f983 	bl	80055ac <puts>
 80042a6:	e7fe      	b.n	80042a6 <main+0x1f6>
	hspi5.Instance = SPI5;
 80042a8:	4b30      	ldr	r3, [pc, #192]	; (800436c <main+0x2bc>)
 80042aa:	4a31      	ldr	r2, [pc, #196]	; (8004370 <main+0x2c0>)
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80042ac:	6098      	str	r0, [r3, #8]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042ae:	6118      	str	r0, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042b0:	6158      	str	r0, [r3, #20]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042b2:	6218      	str	r0, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80042b4:	6258      	str	r0, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042b6:	6298      	str	r0, [r3, #40]	; 0x28
	hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80042b8:	6318      	str	r0, [r3, #48]	; 0x30
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80042ba:	4618      	mov	r0, r3
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80042bc:	60df      	str	r7, [r3, #12]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80042be:	619e      	str	r6, [r3, #24]
	hspi5.Init.CRCPolynomial = 7;
 80042c0:	62dd      	str	r5, [r3, #44]	; 0x2c
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042c2:	635c      	str	r4, [r3, #52]	; 0x34
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80042c4:	e883 0104 	stmia.w	r3, {r2, r8}
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80042c8:	2228      	movs	r2, #40	; 0x28
 80042ca:	61da      	str	r2, [r3, #28]
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80042cc:	f7fd fab4 	bl	8001838 <HAL_SPI_Init>
 80042d0:	b118      	cbz	r0, 80042da <main+0x22a>
	printf("HAL ERROR!\n");
 80042d2:	4825      	ldr	r0, [pc, #148]	; (8004368 <main+0x2b8>)
 80042d4:	f001 f96a 	bl	80055ac <puts>
 80042d8:	e7fe      	b.n	80042d8 <main+0x228>
  htim2.Instance = TIM2;
 80042da:	4d26      	ldr	r5, [pc, #152]	; (8004374 <main+0x2c4>)
  htim2.Init.Prescaler = 1000;
 80042dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e4:	60a8      	str	r0, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042e6:	6128      	str	r0, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042e8:	61a8      	str	r0, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042ea:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 1000;
 80042ec:	e885 000a 	stmia.w	r5, {r1, r3}
  htim2.Init.Period = 32;
 80042f0:	2320      	movs	r3, #32
 80042f2:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042f4:	f7fd fd6e 	bl	8001dd4 <HAL_TIM_Base_Init>
 80042f8:	b118      	cbz	r0, 8004302 <main+0x252>
	printf("HAL ERROR!\n");
 80042fa:	481b      	ldr	r0, [pc, #108]	; (8004368 <main+0x2b8>)
 80042fc:	f001 f956 	bl	80055ac <puts>
 8004300:	e7fe      	b.n	8004300 <main+0x250>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004302:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004306:	a90b      	add	r1, sp, #44	; 0x2c
 8004308:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800430a:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800430c:	f7fd fd86 	bl	8001e1c <HAL_TIM_ConfigClockSource>
 8004310:	b118      	cbz	r0, 800431a <main+0x26a>
	printf("HAL ERROR!\n");
 8004312:	4815      	ldr	r0, [pc, #84]	; (8004368 <main+0x2b8>)
 8004314:	f001 f94a 	bl	80055ac <puts>
 8004318:	e7fe      	b.n	8004318 <main+0x268>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800431a:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800431c:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800431e:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004320:	4628      	mov	r0, r5
 8004322:	f7fd fe09 	bl	8001f38 <HAL_TIMEx_MasterConfigSynchronization>
 8004326:	b338      	cbz	r0, 8004378 <main+0x2c8>
	printf("HAL ERROR!\n");
 8004328:	480f      	ldr	r0, [pc, #60]	; (8004368 <main+0x2b8>)
 800432a:	f001 f93f 	bl	80055ac <puts>
 800432e:	e7fe      	b.n	800432e <main+0x27e>
 8004330:	40023800 	.word	0x40023800
 8004334:	40021800 	.word	0x40021800
 8004338:	20000258 	.word	0x20000258
 800433c:	200010cc 	.word	0x200010cc
 8004340:	40020400 	.word	0x40020400
 8004344:	40020800 	.word	0x40020800
 8004348:	40020c00 	.word	0x40020c00
 800434c:	40020000 	.word	0x40020000
 8004350:	40021400 	.word	0x40021400
 8004354:	10110000 	.word	0x10110000
 8004358:	200010b8 	.word	0x200010b8
 800435c:	200010ec 	.word	0x200010ec
 8004360:	20000ec8 	.word	0x20000ec8
 8004364:	40003c00 	.word	0x40003c00
 8004368:	08009583 	.word	0x08009583
 800436c:	20000940 	.word	0x20000940
 8004370:	40015000 	.word	0x40015000
 8004374:	20001050 	.word	0x20001050
  htim3.Instance = TIM3;
 8004378:	4c32      	ldr	r4, [pc, #200]	; (8004444 <main+0x394>)
  htim3.Init.Prescaler = 10000;
 800437a:	f242 7310 	movw	r3, #10000	; 0x2710
 800437e:	4a32      	ldr	r2, [pc, #200]	; (8004448 <main+0x398>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004380:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004382:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004384:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004386:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 10000;
 8004388:	e884 000c 	stmia.w	r4, {r2, r3}
  htim3.Init.Period = 1600;
 800438c:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8004390:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004392:	f7fd fd1f 	bl	8001dd4 <HAL_TIM_Base_Init>
 8004396:	b118      	cbz	r0, 80043a0 <main+0x2f0>
	printf("HAL ERROR!\n");
 8004398:	482c      	ldr	r0, [pc, #176]	; (800444c <main+0x39c>)
 800439a:	f001 f907 	bl	80055ac <puts>
 800439e:	e7fe      	b.n	800439e <main+0x2ee>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80043a0:	a90b      	add	r1, sp, #44	; 0x2c
 80043a2:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043a4:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80043a6:	f7fd fd39 	bl	8001e1c <HAL_TIM_ConfigClockSource>
 80043aa:	b118      	cbz	r0, 80043b4 <main+0x304>
	printf("HAL ERROR!\n");
 80043ac:	4827      	ldr	r0, [pc, #156]	; (800444c <main+0x39c>)
 80043ae:	f001 f8fd 	bl	80055ac <puts>
 80043b2:	e7fe      	b.n	80043b2 <main+0x302>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043b4:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043b6:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043b8:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043ba:	4620      	mov	r0, r4
 80043bc:	f7fd fdbc 	bl	8001f38 <HAL_TIMEx_MasterConfigSynchronization>
 80043c0:	4606      	mov	r6, r0
 80043c2:	b118      	cbz	r0, 80043cc <main+0x31c>
	printf("HAL ERROR!\n");
 80043c4:	4821      	ldr	r0, [pc, #132]	; (800444c <main+0x39c>)
 80043c6:	f001 f8f1 	bl	80055ac <puts>
 80043ca:	e7fe      	b.n	80043ca <main+0x31a>
  HAL_TIM_Base_Start_IT(&htim2);
 80043cc:	4628      	mov	r0, r5
 80043ce:	f7fd fbd9 	bl	8001b84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80043d2:	4620      	mov	r0, r4
	  capture_status=0;
 80043d4:	4c1e      	ldr	r4, [pc, #120]	; (8004450 <main+0x3a0>)
  HAL_TIM_Base_Start_IT(&htim3);
 80043d6:	f7fd fbd5 	bl	8001b84 <HAL_TIM_Base_Start_IT>
	  printf("Initializing...\n");
 80043da:	481e      	ldr	r0, [pc, #120]	; (8004454 <main+0x3a4>)
	  capture_status=0;
 80043dc:	7026      	strb	r6, [r4, #0]
	  printf("Initializing...\n");
 80043de:	f001 f8e5 	bl	80055ac <puts>
	  __HAL_RCC_RTC_ENABLE();
 80043e2:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <main+0x3a8>)
 80043e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ea:	671a      	str	r2, [r3, #112]	; 0x70
	  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 80043ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80043fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	  HAL_PWR_EnableBkUpAccess();
 80043fe:	f7fc fc27 	bl	8000c50 <HAL_PWR_EnableBkUpAccess>
	  HAL_PWREx_EnableBkUpReg();
 8004402:	f7fc fc2d 	bl	8000c60 <HAL_PWREx_EnableBkUpReg>
	  printf("Backup SRAM initialized\n");
 8004406:	4815      	ldr	r0, [pc, #84]	; (800445c <main+0x3ac>)
 8004408:	f001 f8d0 	bl	80055ac <puts>
	  printf("Waiting for the DSP\n");
 800440c:	4814      	ldr	r0, [pc, #80]	; (8004460 <main+0x3b0>)
 800440e:	f001 f8cd 	bl	80055ac <puts>
	  HAL_Delay(10);
 8004412:	200a      	movs	r0, #10
 8004414:	f7fc f936 	bl	8000684 <HAL_Delay>
	  init_display();
 8004418:	f7fe fdd4 	bl	8002fc4 <init_display>
	  HAL_Delay(10);
 800441c:	200a      	movs	r0, #10
 800441e:	f7fc f931 	bl	8000684 <HAL_Delay>
	  init_display();
 8004422:	f7fe fdcf 	bl	8002fc4 <init_display>
	  printf("Display initialized\n");
 8004426:	480f      	ldr	r0, [pc, #60]	; (8004464 <main+0x3b4>)
 8004428:	f001 f8c0 	bl	80055ac <puts>
	  init_menu();
 800442c:	f7fe f8d0 	bl	80025d0 <init_menu>
	  printf("Menu initialized\n");
 8004430:	480d      	ldr	r0, [pc, #52]	; (8004468 <main+0x3b8>)
 8004432:	f001 f8bb 	bl	80055ac <puts>
	  init_events();
 8004436:	f7ff fc25 	bl	8003c84 <init_events>
	  capture_status=1;
 800443a:	2301      	movs	r3, #1
 800443c:	7023      	strb	r3, [r4, #0]
		evm();
 800443e:	f7ff fd59 	bl	8003ef4 <evm>
 8004442:	e7fc      	b.n	800443e <main+0x38e>
 8004444:	20000e80 	.word	0x20000e80
 8004448:	40000400 	.word	0x40000400
 800444c:	08009583 	.word	0x08009583
 8004450:	2000115a 	.word	0x2000115a
 8004454:	0800958e 	.word	0x0800958e
 8004458:	40023800 	.word	0x40023800
 800445c:	0800959e 	.word	0x0800959e
 8004460:	080095b6 	.word	0x080095b6
 8004464:	080095ca 	.word	0x080095ca
 8004468:	080095de 	.word	0x080095de

0800446c <_Error_Handler>:
{
 800446c:	b508      	push	{r3, lr}
	printf("HAL ERROR!\n");
 800446e:	4802      	ldr	r0, [pc, #8]	; (8004478 <_Error_Handler+0xc>)
 8004470:	f001 f89c 	bl	80055ac <puts>
 8004474:	e7fe      	b.n	8004474 <_Error_Handler+0x8>
 8004476:	bf00      	nop
 8004478:	08009583 	.word	0x08009583

0800447c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800447c:	4b21      	ldr	r3, [pc, #132]	; (8004504 <HAL_MspInit+0x88>)
{
 800447e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004482:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8004484:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004488:	641a      	str	r2, [r3, #64]	; 0x40
 800448a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800448c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004490:	9200      	str	r2, [sp, #0]
 8004492:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800449a:	645a      	str	r2, [r3, #68]	; 0x44
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044a6:	f7fc f8ff 	bl	80006a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80044aa:	2200      	movs	r2, #0
 80044ac:	f06f 000b 	mvn.w	r0, #11
 80044b0:	4611      	mov	r1, r2
 80044b2:	f7fc f90b 	bl	80006cc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80044b6:	2200      	movs	r2, #0
 80044b8:	f06f 000a 	mvn.w	r0, #10
 80044bc:	4611      	mov	r1, r2
 80044be:	f7fc f905 	bl	80006cc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80044c2:	2200      	movs	r2, #0
 80044c4:	f06f 0009 	mvn.w	r0, #9
 80044c8:	4611      	mov	r1, r2
 80044ca:	f7fc f8ff 	bl	80006cc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80044ce:	2200      	movs	r2, #0
 80044d0:	f06f 0004 	mvn.w	r0, #4
 80044d4:	4611      	mov	r1, r2
 80044d6:	f7fc f8f9 	bl	80006cc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80044da:	2200      	movs	r2, #0
 80044dc:	f06f 0003 	mvn.w	r0, #3
 80044e0:	4611      	mov	r1, r2
 80044e2:	f7fc f8f3 	bl	80006cc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80044e6:	2200      	movs	r2, #0
 80044e8:	f06f 0001 	mvn.w	r0, #1
 80044ec:	4611      	mov	r1, r2
 80044ee:	f7fc f8ed 	bl	80006cc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80044f2:	2200      	movs	r2, #0
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	4611      	mov	r1, r2
 80044fa:	f7fc f8e7 	bl	80006cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044fe:	b003      	add	sp, #12
 8004500:	f85d fb04 	ldr.w	pc, [sp], #4
 8004504:	40023800 	.word	0x40023800

08004508 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	4605      	mov	r5, r0
 800450c:	b088      	sub	sp, #32

	printf("SPI MSP Init\n");
 800450e:	484b      	ldr	r0, [pc, #300]	; (800463c <HAL_SPI_MspInit+0x134>)
 8004510:	f001 f84c 	bl	80055ac <puts>

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI3)
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	4a4a      	ldr	r2, [pc, #296]	; (8004640 <HAL_SPI_MspInit+0x138>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d11a      	bne.n	8004552 <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800451c:	4b49      	ldr	r3, [pc, #292]	; (8004644 <HAL_SPI_MspInit+0x13c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800451e:	a903      	add	r1, sp, #12
 8004520:	4849      	ldr	r0, [pc, #292]	; (8004648 <HAL_SPI_MspInit+0x140>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004524:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004534:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004538:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453a:	2302      	movs	r3, #2
 800453c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	2300      	movs	r3, #0
 8004540:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004542:	2303      	movs	r3, #3
 8004544:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004546:	2306      	movs	r3, #6
 8004548:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800454a:	f7fc fa8b 	bl	8000a64 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);

  }

}
 800454e:	b008      	add	sp, #32
 8004550:	bd70      	pop	{r4, r5, r6, pc}
  else if(hspi->Instance==SPI5)
 8004552:	4a3e      	ldr	r2, [pc, #248]	; (800464c <HAL_SPI_MspInit+0x144>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d1fa      	bne.n	800454e <HAL_SPI_MspInit+0x46>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004558:	4b3a      	ldr	r3, [pc, #232]	; (8004644 <HAL_SPI_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455a:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800455c:	483c      	ldr	r0, [pc, #240]	; (8004650 <HAL_SPI_MspInit+0x148>)
 800455e:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8004562:	4c3c      	ldr	r4, [pc, #240]	; (8004654 <HAL_SPI_MspInit+0x14c>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004564:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004568:	645a      	str	r2, [r3, #68]	; 0x44
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456c:	9605      	str	r6, [sp, #20]
    __HAL_RCC_SPI5_CLK_ENABLE();
 800456e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004576:	f44f 7360 	mov.w	r3, #896	; 0x380
 800457a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457c:	2302      	movs	r3, #2
 800457e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004580:	2303      	movs	r3, #3
 8004582:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004584:	2305      	movs	r3, #5
 8004586:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004588:	f7fc fa6c 	bl	8000a64 <HAL_GPIO_Init>
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800458c:	4b32      	ldr	r3, [pc, #200]	; (8004658 <HAL_SPI_MspInit+0x150>)
 800458e:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 8004592:	f04f 0e40 	mov.w	lr, #64	; 0x40
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8004596:	4620      	mov	r0, r4
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004598:	60e6      	str	r6, [r4, #12]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 800459a:	61e6      	str	r6, [r4, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800459c:	6226      	str	r6, [r4, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800459e:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045a0:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045a8:	6123      	str	r3, [r4, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045ae:	6163      	str	r3, [r4, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045b4:	61a3      	str	r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 80045b6:	f7fc f90b 	bl	80007d0 <HAL_DMA_Init>
 80045ba:	b118      	cbz	r0, 80045c4 <HAL_SPI_MspInit+0xbc>
      _Error_Handler(__FILE__, __LINE__);
 80045bc:	2175      	movs	r1, #117	; 0x75
 80045be:	4827      	ldr	r0, [pc, #156]	; (800465c <HAL_SPI_MspInit+0x154>)
 80045c0:	f7ff ff54 	bl	800446c <_Error_Handler>
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 80045c8:	656c      	str	r4, [r5, #84]	; 0x54
 80045ca:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 80045cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    hdma_spi5_rx.Instance = DMA2_Stream3;
 80045d0:	4c23      	ldr	r4, [pc, #140]	; (8004660 <HAL_SPI_MspInit+0x158>)
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 80045d2:	4824      	ldr	r0, [pc, #144]	; (8004664 <HAL_SPI_MspInit+0x15c>)
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045d4:	6122      	str	r2, [r4, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 80045da:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045de:	6162      	str	r2, [r4, #20]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045e0:	2300      	movs	r3, #0
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80045e6:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045e8:	60a3      	str	r3, [r4, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045ea:	60e3      	str	r3, [r4, #12]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045ec:	61a2      	str	r2, [r4, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80045ee:	61e3      	str	r3, [r4, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045f0:	6223      	str	r3, [r4, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045f2:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80045f4:	f7fc f8ec 	bl	80007d0 <HAL_DMA_Init>
 80045f8:	b118      	cbz	r0, 8004602 <HAL_SPI_MspInit+0xfa>
      _Error_Handler(__FILE__, __LINE__);
 80045fa:	2187      	movs	r1, #135	; 0x87
 80045fc:	4817      	ldr	r0, [pc, #92]	; (800465c <HAL_SPI_MspInit+0x154>)
 80045fe:	f7ff ff35 	bl	800446c <_Error_Handler>
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_SPI_MspInit+0x13c>)
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004604:	203b      	movs	r0, #59	; 0x3b
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
 8004606:	65ac      	str	r4, [r5, #88]	; 0x58
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
 800460a:	63a5      	str	r5, [r4, #56]	; 0x38
	__HAL_RCC_DMA2_CLK_ENABLE();
 800460c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004612:	2200      	movs	r2, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004616:	4611      	mov	r1, r2
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461c:	9302      	str	r3, [sp, #8]
 800461e:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004620:	f7fc f854 	bl	80006cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004624:	203b      	movs	r0, #59	; 0x3b
 8004626:	f7fc f889 	bl	800073c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800462a:	2200      	movs	r2, #0
 800462c:	203c      	movs	r0, #60	; 0x3c
 800462e:	4611      	mov	r1, r2
 8004630:	f7fc f84c 	bl	80006cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004634:	203c      	movs	r0, #60	; 0x3c
 8004636:	f7fc f881 	bl	800073c <HAL_NVIC_EnableIRQ>
}
 800463a:	e788      	b.n	800454e <HAL_SPI_MspInit+0x46>
 800463c:	080095ef 	.word	0x080095ef
 8004640:	40003c00 	.word	0x40003c00
 8004644:	40023800 	.word	0x40023800
 8004648:	40020800 	.word	0x40020800
 800464c:	40015000 	.word	0x40015000
 8004650:	40021400 	.word	0x40021400
 8004654:	20000fec 	.word	0x20000fec
 8004658:	40026470 	.word	0x40026470
 800465c:	080095fc 	.word	0x080095fc
 8004660:	20000e1c 	.word	0x20000e1c
 8004664:	40026458 	.word	0x40026458

08004668 <HAL_TIM_Base_MspInit>:
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{


  //Event manager
  if(htim_base->Instance==TIM2){
 8004668:	6803      	ldr	r3, [r0, #0]
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800466e:	b513      	push	{r0, r1, r4, lr}
 8004670:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM2){
 8004672:	d112      	bne.n	800469a <HAL_TIM_Base_MspInit+0x32>

	  /* Peripheral clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8004674:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
	/* TIM2 interrupt Init */
	HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8004678:	201c      	movs	r0, #28
 800467a:	2102      	movs	r1, #2
	__HAL_RCC_TIM2_CLK_ENABLE();
 800467c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8004684:	2200      	movs	r2, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8004690:	f7fc f81c 	bl	80006cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004694:	201c      	movs	r0, #28
 8004696:	f7fc f851 	bl	800073c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */
  }

		//Tuner timer
	if(htim_base->Instance==TIM3){
 800469a:	6822      	ldr	r2, [r4, #0]
 800469c:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <HAL_TIM_Base_MspInit+0x68>)
 800469e:	429a      	cmp	r2, r3
 80046a0:	d114      	bne.n	80046cc <HAL_TIM_Base_MspInit+0x64>
		printf("Enabling tuner timer\n");
 80046a2:	480c      	ldr	r0, [pc, #48]	; (80046d4 <HAL_TIM_Base_MspInit+0x6c>)
 80046a4:	f000 ff82 	bl	80055ac <puts>

		  /* Peripheral clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_TIM_Base_MspInit+0x70>)
		/* TIM1 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80046aa:	201d      	movs	r0, #29
 80046ac:	2103      	movs	r1, #3
		__HAL_RCC_TIM3_CLK_ENABLE();
 80046ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b0:	f042 0202 	orr.w	r2, r2, #2
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80046b6:	2200      	movs	r2, #0
		__HAL_RCC_TIM3_CLK_ENABLE();
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80046c2:	f7fc f803 	bl	80006cc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80046c6:	201d      	movs	r0, #29
 80046c8:	f7fc f838 	bl	800073c <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN TIM1_MspInit 1 */

	/* USER CODE END TIM1_MspInit 1 */
	}

}
 80046cc:	b002      	add	sp, #8
 80046ce:	bd10      	pop	{r4, pc}
 80046d0:	40000400 	.word	0x40000400
 80046d4:	08009617 	.word	0x08009617
 80046d8:	40023800 	.word	0x40023800

080046dc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80046dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046de:	f7fb ffbf 	bl	8000660 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80046e6:	f7fc b858 	b.w	800079a <HAL_SYSTICK_IRQHandler>
	...

080046ec <SPI5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/

void SPI5_IRQHandler(void)
{
 80046ec:	b508      	push	{r3, lr}

	printf("SPI IRQ\n");
 80046ee:	4804      	ldr	r0, [pc, #16]	; (8004700 <SPI5_IRQHandler+0x14>)
 80046f0:	f000 ff5c 	bl	80055ac <puts>
  HAL_SPI_IRQHandler(&hspi5);
 80046f4:	4803      	ldr	r0, [pc, #12]	; (8004704 <SPI5_IRQHandler+0x18>)

}
 80046f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SPI_IRQHandler(&hspi5);
 80046fa:	f7fd b99f 	b.w	8001a3c <HAL_SPI_IRQHandler>
 80046fe:	bf00      	nop
 8004700:	0800962c 	.word	0x0800962c
 8004704:	20000940 	.word	0x20000940

08004708 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8004708:	b508      	push	{r3, lr}
	capture_events();
 800470a:	f7ff fb59 	bl	8003dc0 <capture_events>
	HAL_TIM_IRQHandler(&htim2);
 800470e:	4802      	ldr	r0, [pc, #8]	; (8004718 <TIM2_IRQHandler+0x10>)
}
 8004710:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_IRQHandler(&htim2);
 8004714:	f7fd ba46 	b.w	8001ba4 <HAL_TIM_IRQHandler>
 8004718:	20001050 	.word	0x20001050

0800471c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800471c:	b508      	push	{r3, lr}
	tuner_handler();
 800471e:	f7ff fc47 	bl	8003fb0 <tuner_handler>
	HAL_TIM_IRQHandler(&htim3);
 8004722:	4802      	ldr	r0, [pc, #8]	; (800472c <TIM3_IRQHandler+0x10>)
}
 8004724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_IRQHandler(&htim3);
 8004728:	f7fd ba3c 	b.w	8001ba4 <HAL_TIM_IRQHandler>
 800472c:	20000e80 	.word	0x20000e80

08004730 <DMA2_Stream3_IRQHandler>:


void DMA2_Stream3_IRQHandler(void)
{
//	printf("DMA SPI5 RX\n");
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8004730:	4801      	ldr	r0, [pc, #4]	; (8004738 <DMA2_Stream3_IRQHandler+0x8>)
 8004732:	f7fc b8dd 	b.w	80008f0 <HAL_DMA_IRQHandler>
 8004736:	bf00      	nop
 8004738:	20000e1c 	.word	0x20000e1c

0800473c <DMA2_Stream4_IRQHandler>:
* @brief This function handles DMA2 stream4 global interrupt.
*/
void DMA2_Stream4_IRQHandler(void)
{
//	printf("DMA SPI5 TX\n");
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 800473c:	4801      	ldr	r0, [pc, #4]	; (8004744 <DMA2_Stream4_IRQHandler+0x8>)
 800473e:	f7fc b8d7 	b.w	80008f0 <HAL_DMA_IRQHandler>
 8004742:	bf00      	nop
 8004744:	20000fec 	.word	0x20000fec

08004748 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8004748:	b510      	push	{r4, lr}
	/* Implement your write code here, this is used by puts and printf for example */
	  /* Implement your write code here, this is used by puts and printf for example */
	  int i=0;
	  for(i=0 ; i<len ; i++)
 800474a:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800474c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8004750:	4293      	cmp	r3, r2
 8004752:	db01      	blt.n	8004758 <_write+0x10>
	    ITM_SendChar((*ptr++));
	  return len;
}
 8004754:	4610      	mov	r0, r2
 8004756:	bd10      	pop	{r4, pc}
 8004758:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 800475c:	07c0      	lsls	r0, r0, #31
 800475e:	d503      	bpl.n	8004768 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004760:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004764:	07c0      	lsls	r0, r0, #31
 8004766:	d402      	bmi.n	800476e <_write+0x26>
	  for(i=0 ; i<len ; i++)
 8004768:	3301      	adds	r3, #1
 800476a:	e7f1      	b.n	8004750 <_write+0x8>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800476c:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800476e:	6820      	ldr	r0, [r4, #0]
 8004770:	2800      	cmp	r0, #0
 8004772:	d0fb      	beq.n	800476c <_write+0x24>
	    ITM_SendChar((*ptr++));
 8004774:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004776:	7020      	strb	r0, [r4, #0]
 8004778:	e7f6      	b.n	8004768 <_write+0x20>
	...

0800477c <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <_sbrk+0x14>)
{
 800477e:	4602      	mov	r2, r0
	if (heap_end == 0) {
 8004780:	6819      	ldr	r1, [r3, #0]
 8004782:	b909      	cbnz	r1, 8004788 <_sbrk+0xc>
		heap_end = & end;
 8004784:	4903      	ldr	r1, [pc, #12]	; (8004794 <_sbrk+0x18>)
 8004786:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 8004788:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 800478a:	4402      	add	r2, r0
 800478c:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 800478e:	4770      	bx	lr
 8004790:	20000248 	.word	0x20000248
 8004794:	200014a8 	.word	0x200014a8

08004798 <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 8004798:	2258      	movs	r2, #88	; 0x58
 800479a:	4b02      	ldr	r3, [pc, #8]	; (80047a4 <_close+0xc>)
	return -1;
}
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
	errno = ENOSYS;
 80047a0:	601a      	str	r2, [r3, #0]
}
 80047a2:	4770      	bx	lr
 80047a4:	200014a4 	.word	0x200014a4

080047a8 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 80047a8:	2258      	movs	r2, #88	; 0x58
 80047aa:	4b02      	ldr	r3, [pc, #8]	; (80047b4 <_fstat+0xc>)
	return -1;
}
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
	errno = ENOSYS;
 80047b0:	601a      	str	r2, [r3, #0]
}
 80047b2:	4770      	bx	lr
 80047b4:	200014a4 	.word	0x200014a4

080047b8 <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 80047b8:	2258      	movs	r2, #88	; 0x58
 80047ba:	4b02      	ldr	r3, [pc, #8]	; (80047c4 <_isatty+0xc>)
	return 0;
}
 80047bc:	2000      	movs	r0, #0
	errno = ENOSYS;
 80047be:	601a      	str	r2, [r3, #0]
}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	200014a4 	.word	0x200014a4

080047c8 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 80047c8:	2258      	movs	r2, #88	; 0x58
 80047ca:	4b02      	ldr	r3, [pc, #8]	; (80047d4 <_lseek+0xc>)
	return -1;
}
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
	errno = ENOSYS;
 80047d0:	601a      	str	r2, [r3, #0]
}
 80047d2:	4770      	bx	lr
 80047d4:	200014a4 	.word	0x200014a4

080047d8 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
	errno = ENOSYS;
 80047d8:	2258      	movs	r2, #88	; 0x58
 80047da:	4b02      	ldr	r3, [pc, #8]	; (80047e4 <_read+0xc>)
	return -1;
}
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295
	errno = ENOSYS;
 80047e0:	601a      	str	r2, [r3, #0]
}
 80047e2:	4770      	bx	lr
 80047e4:	200014a4 	.word	0x200014a4

080047e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047e8:	490f      	ldr	r1, [pc, #60]	; (8004828 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047ea:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047ec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80047f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80047f8:	4b0c      	ldr	r3, [pc, #48]	; (800482c <SystemInit+0x44>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	f042 0201 	orr.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004802:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800480a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800480e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004810:	4a07      	ldr	r2, [pc, #28]	; (8004830 <SystemInit+0x48>)
 8004812:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800481a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800481c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800481e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004822:	608b      	str	r3, [r1, #8]
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	e000ed00 	.word	0xe000ed00
 800482c:	40023800 	.word	0x40023800
 8004830:	24003010 	.word	0x24003010

08004834 <visualize_cent>:
	cnt++;

}

/*Visualizing cent on the display*/
void visualize_cent(bool valid){
 8004834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int8_t n_col;	//Number of cent columns
	int8_t n;
	uint8_t line_offset_y=40;
	uint8_t block_width=15;
	uint8_t block_height=15;
	uint16_t match_color=calc_RGB565(75,100,75);
 8004838:	224b      	movs	r2, #75	; 0x4b
void visualize_cent(bool valid){
 800483a:	4681      	mov	r9, r0
	uint16_t match_color=calc_RGB565(75,100,75);
 800483c:	2164      	movs	r1, #100	; 0x64

	uint16_t temp_color;

	//Number of columns
	n_col=(int8_t) round(act_cent/5);
 800483e:	f04f 37ff 	mov.w	r7, #4294967295
	uint16_t match_color=calc_RGB565(75,100,75);
 8004842:	4610      	mov	r0, r2
	n_col=(int8_t) round(act_cent/5);
 8004844:	2491      	movs	r4, #145	; 0x91
	uint16_t match_color=calc_RGB565(75,100,75);
 8004846:	f7fe ff13 	bl	8003670 <calc_RGB565>
	n_col=(int8_t) round(act_cent/5);
 800484a:	4b3e      	ldr	r3, [pc, #248]	; (8004944 <visualize_cent+0x110>)
 800484c:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
	uint16_t match_color=calc_RGB565(75,100,75);
 8004850:	4682      	mov	sl, r0
	n_col=(int8_t) round(act_cent/5);
 8004852:	25a0      	movs	r5, #160	; 0xa0
 8004854:	f04f 085a 	mov.w	r8, #90	; 0x5a
 8004858:	ed93 5b00 	vldr	d5, [r3]
 800485c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004860:	feb8 7b47 	vrinta.f64	d7, d7
 8004864:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004868:	edcd 7a03 	vstr	s15, [sp, #12]
 800486c:	f99d 600c 	ldrsb.w	r6, [sp, #12]
	for(n=1;n<=10;n++){

		//Visualize columns

		//Set color of the column
		temp_color=calc_RGB565(100,100-n*10,100-10*n);
 8004870:	4642      	mov	r2, r8
 8004872:	4641      	mov	r1, r8
 8004874:	2064      	movs	r0, #100	; 0x64
 8004876:	f7fe fefb 	bl	8003670 <calc_RGB565>
 800487a:	4602      	mov	r2, r0

		if(valid){
 800487c:	f1b9 0f00 	cmp.w	r9, #0
 8004880:	d055      	beq.n	800492e <visualize_cent+0xfa>
			if (n_col>0){
 8004882:	2e00      	cmp	r6, #0
 8004884:	dd13      	ble.n	80048ae <visualize_cent+0x7a>
	//			printf("Show pos\n");
				//Show positive columns
				if(n_col>=n){
 8004886:	427b      	negs	r3, r7
 8004888:	b228      	sxth	r0, r5
					draw_hline(DP_WIDTH/2+(n-1)*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,temp_color);
				}else{
					draw_hline(DP_WIDTH/2+(n-1)*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 800488a:	2150      	movs	r1, #80	; 0x50
				if(n_col>=n){
 800488c:	b25b      	sxtb	r3, r3
 800488e:	429e      	cmp	r6, r3
					draw_hline(DP_WIDTH/2+(n-1)*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 8004890:	bfb6      	itet	lt
 8004892:	2300      	movlt	r3, #0
					draw_hline(DP_WIDTH/2+(n-1)*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,temp_color);
 8004894:	9200      	strge	r2, [sp, #0]
					draw_hline(DP_WIDTH/2+(n-1)*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 8004896:	9300      	strlt	r3, [sp, #0]
 8004898:	230f      	movs	r3, #15
 800489a:	461a      	mov	r2, r3
 800489c:	f7fe fd16 	bl	80032cc <draw_hline>
				}

				//Hide negative columns
				draw_hline(DP_WIDTH/2-n*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 80048a0:	2300      	movs	r3, #0
 80048a2:	9300      	str	r3, [sp, #0]

			}

		}else{
			draw_hline(DP_WIDTH/2+(n-1)*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
			draw_hline(DP_WIDTH/2-n*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 80048a4:	230f      	movs	r3, #15
 80048a6:	2150      	movs	r1, #80	; 0x50
 80048a8:	b220      	sxth	r0, r4
 80048aa:	461a      	mov	r2, r3
 80048ac:	e012      	b.n	80048d4 <visualize_cent+0xa0>
			}else if(n_col<0){
 80048ae:	d022      	beq.n	80048f6 <visualize_cent+0xc2>
				if(n_col<=(-1*n)){
 80048b0:	42be      	cmp	r6, r7
 80048b2:	b220      	sxth	r0, r4
					draw_hline(DP_WIDTH/2-n*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 80048b4:	f04f 0150 	mov.w	r1, #80	; 0x50
 80048b8:	bfca      	itet	gt
 80048ba:	2300      	movgt	r3, #0
					draw_hline(DP_WIDTH/2-n*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,temp_color);
 80048bc:	9200      	strle	r2, [sp, #0]
					draw_hline(DP_WIDTH/2-n*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 80048be:	9300      	strgt	r3, [sp, #0]
 80048c0:	230f      	movs	r3, #15
 80048c2:	461a      	mov	r2, r3
 80048c4:	f7fe fd02 	bl	80032cc <draw_hline>
				draw_hline(DP_WIDTH/2+(n-1)*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 80048c8:	2300      	movs	r3, #0
 80048ca:	2150      	movs	r1, #80	; 0x50
 80048cc:	b228      	sxth	r0, r5
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	230f      	movs	r3, #15
 80048d2:	461a      	mov	r2, r3
 80048d4:	3f01      	subs	r7, #1
			draw_hline(DP_WIDTH/2-n*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 80048d6:	f7fe fcf9 	bl	80032cc <draw_hline>
 80048da:	f1a8 080a 	sub.w	r8, r8, #10
 80048de:	350f      	adds	r5, #15
 80048e0:	3c0f      	subs	r4, #15
	for(n=1;n<=10;n++){
 80048e2:	f117 0f0b 	cmn.w	r7, #11
 80048e6:	fa5f f888 	uxtb.w	r8, r8
 80048ea:	b2ad      	uxth	r5, r5
 80048ec:	b2a4      	uxth	r4, r4
 80048ee:	d1bf      	bne.n	8004870 <visualize_cent+0x3c>
		}

	}


}
 80048f0:	b004      	add	sp, #16
 80048f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if(n==1){
 80048f6:	427b      	negs	r3, r7
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d10e      	bne.n	800491c <visualize_cent+0xe8>
					draw_hline(DP_WIDTH/2-n*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,match_color);
 80048fe:	230f      	movs	r3, #15
 8004900:	2150      	movs	r1, #80	; 0x50
 8004902:	2091      	movs	r0, #145	; 0x91
 8004904:	f8cd a000 	str.w	sl, [sp]
 8004908:	461a      	mov	r2, r3
 800490a:	f7fe fcdf 	bl	80032cc <draw_hline>
					draw_hline(DP_WIDTH/2+(n-1)*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,match_color);
 800490e:	230f      	movs	r3, #15
 8004910:	f8cd a000 	str.w	sl, [sp]
 8004914:	2150      	movs	r1, #80	; 0x50
 8004916:	461a      	mov	r2, r3
 8004918:	20a0      	movs	r0, #160	; 0xa0
 800491a:	e7db      	b.n	80048d4 <visualize_cent+0xa0>
					draw_hline(DP_WIDTH/2+(n-1)*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 800491c:	230f      	movs	r3, #15
 800491e:	9600      	str	r6, [sp, #0]
 8004920:	2150      	movs	r1, #80	; 0x50
 8004922:	b228      	sxth	r0, r5
 8004924:	461a      	mov	r2, r3
 8004926:	f7fe fcd1 	bl	80032cc <draw_hline>
					draw_hline(DP_WIDTH/2-n*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 800492a:	9600      	str	r6, [sp, #0]
 800492c:	e7ba      	b.n	80048a4 <visualize_cent+0x70>
			draw_hline(DP_WIDTH/2+(n-1)*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 800492e:	230f      	movs	r3, #15
 8004930:	f8cd 9000 	str.w	r9, [sp]
 8004934:	2150      	movs	r1, #80	; 0x50
 8004936:	b228      	sxth	r0, r5
 8004938:	461a      	mov	r2, r3
 800493a:	f7fe fcc7 	bl	80032cc <draw_hline>
			draw_hline(DP_WIDTH/2-n*block_width,DP_HEIGHT/2-line_offset_y,block_width,block_height,0);
 800493e:	f8cd 9000 	str.w	r9, [sp]
 8004942:	e7af      	b.n	80048a4 <visualize_cent+0x70>
 8004944:	20001488 	.word	0x20001488

08004948 <update_note_bins>:

//	printf("Note bins updating with f:%f\n",freq_A4);



	notes[0]=((double) freq_A4 / (double)16);
 8004948:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80049a8 <update_note_bins+0x60>
 800494c:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <update_note_bins+0x70>)
	note_bins[0]= notes[0] * pow((double) 2,(double) -1/24);		//A0 + 50cents
 800494e:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <update_note_bins+0x74>)
	notes[0]=((double) freq_A4 / (double)16);
 8004950:	ee20 0b07 	vmul.f64	d0, d0, d7


	uint8_t i;
	for(i=1;i<num_notes;i++){
		note_bins[i]=(double) note_bins[i-1]*root2_12;
 8004954:	491a      	ldr	r1, [pc, #104]	; (80049c0 <update_note_bins+0x78>)
	note_bins[0]= notes[0] * pow((double) 2,(double) -1/24);		//A0 + 50cents
 8004956:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80049b0 <update_note_bins+0x68>
void update_note_bins(double freq_A4){
 800495a:	e92d 4800 	stmdb	sp!, {fp, lr}
	notes[0]=((double) freq_A4 / (double)16);
 800495e:	ed82 0b00 	vstr	d0, [r2]
	note_bins[0]= notes[0] * pow((double) 2,(double) -1/24);		//A0 + 50cents
 8004962:	ee20 0b07 	vmul.f64	d0, d0, d7
		note_bins[i]=(double) note_bins[i-1]*root2_12;
 8004966:	ed91 6b00 	vldr	d6, [r1]
 800496a:	f503 71c4 	add.w	r1, r3, #392	; 0x188
	note_bins[0]= notes[0] * pow((double) 2,(double) -1/24);		//A0 + 50cents
 800496e:	ed83 0b00 	vstr	d0, [r3]
		note_bins[i]=(double) note_bins[i-1]*root2_12;
 8004972:	ed93 7b00 	vldr	d7, [r3]
 8004976:	ee27 7b06 	vmul.f64	d7, d7, d6
 800497a:	ec5c bb17 	vmov	fp, ip, d7
		notes[i]=(double) notes[i-1]*root2_12;
 800497e:	ed92 7b00 	vldr	d7, [r2]
		note_bins[i]=(double) note_bins[i-1]*root2_12;
 8004982:	f843 bf08 	str.w	fp, [r3, #8]!
 8004986:	f8c3 c004 	str.w	ip, [r3, #4]
	for(i=1;i<num_notes;i++){
 800498a:	428b      	cmp	r3, r1
		notes[i]=(double) notes[i-1]*root2_12;
 800498c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004990:	ec5c bb17 	vmov	fp, ip, d7
 8004994:	f842 bf08 	str.w	fp, [r2, #8]!
 8004998:	f8c2 c004 	str.w	ip, [r2, #4]
	for(i=1;i<num_notes;i++){
 800499c:	d1e9      	bne.n	8004972 <update_note_bins+0x2a>
//
//	}
//
//	printf("Ready\n");

}
 800499e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
 80049a2:	bf00      	nop
 80049a4:	f3af 8000 	nop.w
 80049a8:	00000000 	.word	0x00000000
 80049ac:	3fb00000 	.word	0x3fb00000
 80049b0:	2748c5b4 	.word	0x2748c5b4
 80049b4:	3fef16ca 	.word	0x3fef16ca
 80049b8:	200012f8 	.word	0x200012f8
 80049bc:	20001168 	.word	0x20001168
 80049c0:	200010b0 	.word	0x200010b0
 80049c4:	00000000 	.word	0x00000000

080049c8 <calculate_cent>:

//	printf("f:%.2f \t [%.2f - %.2f] \t %s %f\n",(float)freq, note_bins[note_index],note_bins[note_index+1],act_note,act_cent);
}

/*Calculate cent*/
double calculate_cent(double f, double fr){
 80049c8:	b508      	push	{r3, lr}

	//Calculate cents
	return 1200*log2(f/fr);
 80049ca:	ee80 0b01 	vdiv.f64	d0, d0, d1
 80049ce:	f002 fe93 	bl	80076f8 <log>
 80049d2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80049e8 <calculate_cent+0x20>
 80049d6:	ee80 0b07 	vdiv.f64	d0, d0, d7
}
 80049da:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80049f0 <calculate_cent+0x28>
 80049de:	ee20 0b07 	vmul.f64	d0, d0, d7
 80049e2:	bd08      	pop	{r3, pc}
 80049e4:	f3af 8000 	nop.w
 80049e8:	fefa39ef 	.word	0xfefa39ef
 80049ec:	3fe62e42 	.word	0x3fe62e42
 80049f0:	00000000 	.word	0x00000000
 80049f4:	4092c000 	.word	0x4092c000

080049f8 <find_note_index>:


/*Modified binary search*/
uint8_t find_note_index(double freq){
 80049f8:	b510      	push	{r4, lr}
	uint8_t l,r,c;

	//Start values
	l=0;
	r=num_notes;
	c=floor((l+r)/2);
 80049fa:	2019      	movs	r0, #25
	r=num_notes;
 80049fc:	2232      	movs	r2, #50	; 0x32
	l=0;
 80049fe:	2300      	movs	r3, #0

	//Binary search algorithm
	while((r-l)>1){

		if(freq>=note_bins[c]){
 8004a00:	4c0a      	ldr	r4, [pc, #40]	; (8004a2c <find_note_index+0x34>)
	while((r-l)>1){
 8004a02:	1ad1      	subs	r1, r2, r3
 8004a04:	2901      	cmp	r1, #1
 8004a06:	dc00      	bgt.n	8004a0a <find_note_index+0x12>

		c=floor((l+r)/2);
	}

	return c;
}
 8004a08:	bd10      	pop	{r4, pc}
		if(freq>=note_bins[c]){
 8004a0a:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
 8004a0e:	ed91 7b00 	vldr	d7, [r1]
 8004a12:	eeb4 7bc0 	vcmpe.f64	d7, d0
 8004a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1a:	bf84      	itt	hi
 8004a1c:	4602      	movhi	r2, r0
 8004a1e:	4618      	movhi	r0, r3
		c=floor((l+r)/2);
 8004a20:	1881      	adds	r1, r0, r2
 8004a22:	4603      	mov	r3, r0
 8004a24:	f3c1 0047 	ubfx	r0, r1, #1, #8
 8004a28:	e7eb      	b.n	8004a02 <find_note_index+0xa>
 8004a2a:	bf00      	nop
 8004a2c:	20001168 	.word	0x20001168

08004a30 <calculate_note>:
void calculate_note(double freq){
 8004a30:	b508      	push	{r3, lr}
	note_index = find_note_index(freq);
 8004a32:	f7ff ffe1 	bl	80049f8 <find_note_index>
	act_note=s_notes[note_index%12];
 8004a36:	220c      	movs	r2, #12
 8004a38:	fbb0 f3f2 	udiv	r3, r0, r2
 8004a3c:	fb02 0313 	mls	r3, r2, r3, r0
 8004a40:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <calculate_note+0x34>)
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a48:	4b07      	ldr	r3, [pc, #28]	; (8004a68 <calculate_note+0x38>)
 8004a4a:	601a      	str	r2, [r3, #0]
	act_cent=calculate_cent(freq,notes[note_index]);
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <calculate_note+0x3c>)
 8004a4e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004a52:	ed90 1b00 	vldr	d1, [r0]
 8004a56:	f7ff ffb7 	bl	80049c8 <calculate_cent>
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <calculate_note+0x40>)
 8004a5c:	ed83 0b00 	vstr	d0, [r3]
 8004a60:	bd08      	pop	{r3, pc}
 8004a62:	bf00      	nop
 8004a64:	20000024 	.word	0x20000024
 8004a68:	200014a0 	.word	0x200014a0
 8004a6c:	200012f8 	.word	0x200012f8
 8004a70:	20001488 	.word	0x20001488

08004a74 <update_tuner>:
	freq=ctrlreg_rx[reg_f_tuner].f32;
 8004a74:	4b36      	ldr	r3, [pc, #216]	; (8004b50 <update_tuner+0xdc>)
void update_tuner(void){
 8004a76:	b500      	push	{lr}
 8004a78:	ed2d 8b04 	vpush	{d8-d9}
	freq=ctrlreg_rx[reg_f_tuner].f32;
 8004a7c:	ed93 8a04 	vldr	s16, [r3, #16]
void update_tuner(void){
 8004a80:	b083      	sub	sp, #12
	if(freq>freq_lower_limit && freq<freq_upper_limit ){
 8004a82:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
	calculate_note(freq);
 8004a86:	eeb7 9ac8 	vcvt.f64.f32	d9, s16
 8004a8a:	eeb0 0b49 	vmov.f64	d0, d9
 8004a8e:	f7ff ffcf 	bl	8004a30 <calculate_note>
	printf("%f\n",freq);
 8004a92:	4830      	ldr	r0, [pc, #192]	; (8004b54 <update_tuner+0xe0>)
 8004a94:	ec53 2b19 	vmov	r2, r3, d9
 8004a98:	f000 fd14 	bl	80054c4 <iprintf>
	set_text_size(2);
 8004a9c:	2002      	movs	r0, #2
 8004a9e:	f7fe fdd7 	bl	8003650 <set_text_size>
	set_text_color(val_color,0);
 8004aa2:	4b2d      	ldr	r3, [pc, #180]	; (8004b58 <update_tuner+0xe4>)
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	8818      	ldrh	r0, [r3, #0]
 8004aa8:	f7fe fdd8 	bl	800365c <set_text_color>
	if(freq>freq_lower_limit && freq<freq_upper_limit ){
 8004aac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004ab0:	239b      	movs	r3, #155	; 0x9b
		print_num(freq,"%.1f Hz",5,12,DP_WIDTH/2,DP_HEIGHT/2+35);
 8004ab2:	220c      	movs	r2, #12
 8004ab4:	2105      	movs	r1, #5
	if(freq>freq_lower_limit && freq<freq_upper_limit ){
 8004ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		print_num(freq,"%.1f Hz",5,12,DP_WIDTH/2,DP_HEIGHT/2+35);
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
	if(freq>freq_lower_limit && freq<freq_upper_limit ){
 8004ac0:	dd32      	ble.n	8004b28 <update_tuner+0xb4>
 8004ac2:	eddf 7a26 	vldr	s15, [pc, #152]	; 8004b5c <update_tuner+0xe8>
 8004ac6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ace:	d52b      	bpl.n	8004b28 <update_tuner+0xb4>
		print_num(freq,"%.1f Hz",5,12,DP_WIDTH/2,DP_HEIGHT/2+35);
 8004ad0:	4823      	ldr	r0, [pc, #140]	; (8004b60 <update_tuner+0xec>)
		print_num(freq," ",5,12,DP_WIDTH/2,DP_HEIGHT/2+35);
 8004ad2:	eeb0 0a48 	vmov.f32	s0, s16
 8004ad6:	f7fe fda5 	bl	8003624 <print_num>
	set_text_size(note_text_size);
 8004ada:	2005      	movs	r0, #5
 8004adc:	f7fe fdb8 	bl	8003650 <set_text_size>
	set_text_color(desc_color,0);
 8004ae0:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <update_tuner+0xf0>)
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	8818      	ldrh	r0, [r3, #0]
 8004ae6:	f7fe fdb9 	bl	800365c <set_text_color>
	if(freq>freq_lower_limit && freq<freq_upper_limit ){
 8004aea:	eeb4 8ae8 	vcmpe.f32	s16, s17
		print_static(act_note,DP_WIDTH/2+15,DP_HEIGHT/2,12);
 8004aee:	230c      	movs	r3, #12
 8004af0:	2278      	movs	r2, #120	; 0x78
 8004af2:	21af      	movs	r1, #175	; 0xaf
	if(freq>freq_lower_limit && freq<freq_upper_limit ){
 8004af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af8:	dd18      	ble.n	8004b2c <update_tuner+0xb8>
 8004afa:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004b5c <update_tuner+0xe8>
 8004afe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b06:	d511      	bpl.n	8004b2c <update_tuner+0xb8>
		print_static(act_note,DP_WIDTH/2+15,DP_HEIGHT/2,12);
 8004b08:	4817      	ldr	r0, [pc, #92]	; (8004b68 <update_tuner+0xf4>)
 8004b0a:	6800      	ldr	r0, [r0, #0]
 8004b0c:	f7fe fd4c 	bl	80035a8 <print_static>
		visualize_cent(1);
 8004b10:	2001      	movs	r0, #1
		visualize_cent(0);
 8004b12:	f7ff fe8f 	bl	8004834 <visualize_cent>
	cnt++;
 8004b16:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <update_tuner+0xf8>)
 8004b18:	6813      	ldr	r3, [r2, #0]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	6013      	str	r3, [r2, #0]
}
 8004b1e:	b003      	add	sp, #12
 8004b20:	ecbd 8b04 	vpop	{d8-d9}
 8004b24:	f85d fb04 	ldr.w	pc, [sp], #4
		print_num(freq," ",5,12,DP_WIDTH/2,DP_HEIGHT/2+35);
 8004b28:	4811      	ldr	r0, [pc, #68]	; (8004b70 <update_tuner+0xfc>)
 8004b2a:	e7d2      	b.n	8004ad2 <update_tuner+0x5e>
		print_static("-",DP_WIDTH/2+15,DP_HEIGHT/2,12);
 8004b2c:	4811      	ldr	r0, [pc, #68]	; (8004b74 <update_tuner+0x100>)
 8004b2e:	f7fe fd3b 	bl	80035a8 <print_static>
	if(freq>freq_lower_limit && freq<freq_upper_limit ){
 8004b32:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3a:	dd06      	ble.n	8004b4a <update_tuner+0xd6>
 8004b3c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004b5c <update_tuner+0xe8>
 8004b40:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b48:	d4e2      	bmi.n	8004b10 <update_tuner+0x9c>
		visualize_cent(0);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	e7e1      	b.n	8004b12 <update_tuner+0x9e>
 8004b4e:	bf00      	nop
 8004b50:	20000f30 	.word	0x20000f30
 8004b54:	0800965d 	.word	0x0800965d
 8004b58:	200010c8 	.word	0x200010c8
 8004b5c:	43eb0000 	.word	0x43eb0000
 8004b60:	08009661 	.word	0x08009661
 8004b64:	20000f2c 	.word	0x20000f2c
 8004b68:	200014a0 	.word	0x200014a0
 8004b6c:	20001490 	.word	0x20001490
 8004b70:	08009810 	.word	0x08009810
 8004b74:	08009669 	.word	0x08009669

08004b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b7e:	e003      	b.n	8004b88 <LoopCopyDataInit>

08004b80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b80:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004b82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b86:	3104      	adds	r1, #4

08004b88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b88:	480b      	ldr	r0, [pc, #44]	; (8004bb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004b8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b90:	d3f6      	bcc.n	8004b80 <CopyDataInit>
  ldr  r2, =_sbss
 8004b92:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004b94:	e002      	b.n	8004b9c <LoopFillZerobss>

08004b96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b98:	f842 3b04 	str.w	r3, [r2], #4

08004b9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004b9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ba0:	d3f9      	bcc.n	8004b96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ba2:	f7ff fe21 	bl	80047e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ba6:	f000 f811 	bl	8004bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004baa:	f7ff fa81 	bl	80040b0 <main>
  bx  lr    
 8004bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004bb0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004bb4:	08009b60 	.word	0x08009b60
  ldr  r0, =_sdata
 8004bb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004bbc:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 8004bc0:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8004bc4:	200014a8 	.word	0x200014a8

08004bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bc8:	e7fe      	b.n	8004bc8 <ADC_IRQHandler>
	...

08004bcc <__libc_init_array>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	4e0d      	ldr	r6, [pc, #52]	; (8004c04 <__libc_init_array+0x38>)
 8004bd0:	4c0d      	ldr	r4, [pc, #52]	; (8004c08 <__libc_init_array+0x3c>)
 8004bd2:	1ba4      	subs	r4, r4, r6
 8004bd4:	10a4      	asrs	r4, r4, #2
 8004bd6:	2500      	movs	r5, #0
 8004bd8:	42a5      	cmp	r5, r4
 8004bda:	d109      	bne.n	8004bf0 <__libc_init_array+0x24>
 8004bdc:	4e0b      	ldr	r6, [pc, #44]	; (8004c0c <__libc_init_array+0x40>)
 8004bde:	4c0c      	ldr	r4, [pc, #48]	; (8004c10 <__libc_init_array+0x44>)
 8004be0:	f004 faec 	bl	80091bc <_init>
 8004be4:	1ba4      	subs	r4, r4, r6
 8004be6:	10a4      	asrs	r4, r4, #2
 8004be8:	2500      	movs	r5, #0
 8004bea:	42a5      	cmp	r5, r4
 8004bec:	d105      	bne.n	8004bfa <__libc_init_array+0x2e>
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bf4:	4798      	blx	r3
 8004bf6:	3501      	adds	r5, #1
 8004bf8:	e7ee      	b.n	8004bd8 <__libc_init_array+0xc>
 8004bfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bfe:	4798      	blx	r3
 8004c00:	3501      	adds	r5, #1
 8004c02:	e7f2      	b.n	8004bea <__libc_init_array+0x1e>
 8004c04:	08009b58 	.word	0x08009b58
 8004c08:	08009b58 	.word	0x08009b58
 8004c0c:	08009b58 	.word	0x08009b58
 8004c10:	08009b5c 	.word	0x08009b5c

08004c14 <memcpy>:
 8004c14:	b510      	push	{r4, lr}
 8004c16:	1e43      	subs	r3, r0, #1
 8004c18:	440a      	add	r2, r1
 8004c1a:	4291      	cmp	r1, r2
 8004c1c:	d100      	bne.n	8004c20 <memcpy+0xc>
 8004c1e:	bd10      	pop	{r4, pc}
 8004c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c28:	e7f7      	b.n	8004c1a <memcpy+0x6>

08004c2a <__cvt>:
 8004c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c2c:	ed2d 8b02 	vpush	{d8}
 8004c30:	eeb0 8b40 	vmov.f64	d8, d0
 8004c34:	b085      	sub	sp, #20
 8004c36:	4617      	mov	r7, r2
 8004c38:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004c3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004c3c:	ee18 2a90 	vmov	r2, s17
 8004c40:	f025 0520 	bic.w	r5, r5, #32
 8004c44:	2a00      	cmp	r2, #0
 8004c46:	bfb6      	itet	lt
 8004c48:	222d      	movlt	r2, #45	; 0x2d
 8004c4a:	2200      	movge	r2, #0
 8004c4c:	eeb1 8b40 	vneglt.f64	d8, d0
 8004c50:	2d46      	cmp	r5, #70	; 0x46
 8004c52:	460c      	mov	r4, r1
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	d004      	beq.n	8004c62 <__cvt+0x38>
 8004c58:	2d45      	cmp	r5, #69	; 0x45
 8004c5a:	d100      	bne.n	8004c5e <__cvt+0x34>
 8004c5c:	3401      	adds	r4, #1
 8004c5e:	2102      	movs	r1, #2
 8004c60:	e000      	b.n	8004c64 <__cvt+0x3a>
 8004c62:	2103      	movs	r1, #3
 8004c64:	ab03      	add	r3, sp, #12
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	ab02      	add	r3, sp, #8
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	4622      	mov	r2, r4
 8004c6e:	4633      	mov	r3, r6
 8004c70:	eeb0 0b48 	vmov.f64	d0, d8
 8004c74:	f000 fe1c 	bl	80058b0 <_dtoa_r>
 8004c78:	2d47      	cmp	r5, #71	; 0x47
 8004c7a:	d101      	bne.n	8004c80 <__cvt+0x56>
 8004c7c:	07fb      	lsls	r3, r7, #31
 8004c7e:	d516      	bpl.n	8004cae <__cvt+0x84>
 8004c80:	2d46      	cmp	r5, #70	; 0x46
 8004c82:	eb00 0304 	add.w	r3, r0, r4
 8004c86:	d10c      	bne.n	8004ca2 <__cvt+0x78>
 8004c88:	7802      	ldrb	r2, [r0, #0]
 8004c8a:	2a30      	cmp	r2, #48	; 0x30
 8004c8c:	d107      	bne.n	8004c9e <__cvt+0x74>
 8004c8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c96:	bf1c      	itt	ne
 8004c98:	f1c4 0401 	rsbne	r4, r4, #1
 8004c9c:	6034      	strne	r4, [r6, #0]
 8004c9e:	6832      	ldr	r2, [r6, #0]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004caa:	d10f      	bne.n	8004ccc <__cvt+0xa2>
 8004cac:	9303      	str	r3, [sp, #12]
 8004cae:	9b03      	ldr	r3, [sp, #12]
 8004cb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cb2:	1a1b      	subs	r3, r3, r0
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	b005      	add	sp, #20
 8004cb8:	ecbd 8b02 	vpop	{d8}
 8004cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cbe:	1c54      	adds	r4, r2, #1
 8004cc0:	9403      	str	r4, [sp, #12]
 8004cc2:	7011      	strb	r1, [r2, #0]
 8004cc4:	9a03      	ldr	r2, [sp, #12]
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d8f9      	bhi.n	8004cbe <__cvt+0x94>
 8004cca:	e7f0      	b.n	8004cae <__cvt+0x84>
 8004ccc:	2130      	movs	r1, #48	; 0x30
 8004cce:	e7f9      	b.n	8004cc4 <__cvt+0x9a>

08004cd0 <__exponent>:
 8004cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2900      	cmp	r1, #0
 8004cd6:	bfb8      	it	lt
 8004cd8:	4249      	neglt	r1, r1
 8004cda:	f803 2b02 	strb.w	r2, [r3], #2
 8004cde:	bfb4      	ite	lt
 8004ce0:	222d      	movlt	r2, #45	; 0x2d
 8004ce2:	222b      	movge	r2, #43	; 0x2b
 8004ce4:	2909      	cmp	r1, #9
 8004ce6:	7042      	strb	r2, [r0, #1]
 8004ce8:	dd20      	ble.n	8004d2c <__exponent+0x5c>
 8004cea:	f10d 0207 	add.w	r2, sp, #7
 8004cee:	4617      	mov	r7, r2
 8004cf0:	260a      	movs	r6, #10
 8004cf2:	fb91 f5f6 	sdiv	r5, r1, r6
 8004cf6:	fb06 1115 	mls	r1, r6, r5, r1
 8004cfa:	3130      	adds	r1, #48	; 0x30
 8004cfc:	2d09      	cmp	r5, #9
 8004cfe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004d02:	f102 34ff 	add.w	r4, r2, #4294967295
 8004d06:	4629      	mov	r1, r5
 8004d08:	dc09      	bgt.n	8004d1e <__exponent+0x4e>
 8004d0a:	3130      	adds	r1, #48	; 0x30
 8004d0c:	3a02      	subs	r2, #2
 8004d0e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d12:	42ba      	cmp	r2, r7
 8004d14:	461c      	mov	r4, r3
 8004d16:	d304      	bcc.n	8004d22 <__exponent+0x52>
 8004d18:	1a20      	subs	r0, r4, r0
 8004d1a:	b003      	add	sp, #12
 8004d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d1e:	4622      	mov	r2, r4
 8004d20:	e7e7      	b.n	8004cf2 <__exponent+0x22>
 8004d22:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004d26:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2a:	e7f2      	b.n	8004d12 <__exponent+0x42>
 8004d2c:	2230      	movs	r2, #48	; 0x30
 8004d2e:	461c      	mov	r4, r3
 8004d30:	4411      	add	r1, r2
 8004d32:	f804 2b02 	strb.w	r2, [r4], #2
 8004d36:	7059      	strb	r1, [r3, #1]
 8004d38:	e7ee      	b.n	8004d18 <__exponent+0x48>
 8004d3a:	0000      	movs	r0, r0
 8004d3c:	0000      	movs	r0, r0
	...

08004d40 <_printf_float>:
 8004d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d44:	b08d      	sub	sp, #52	; 0x34
 8004d46:	460c      	mov	r4, r1
 8004d48:	4616      	mov	r6, r2
 8004d4a:	461f      	mov	r7, r3
 8004d4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004d50:	4605      	mov	r5, r0
 8004d52:	f001 fc95 	bl	8006680 <_localeconv_r>
 8004d56:	f8d0 b000 	ldr.w	fp, [r0]
 8004d5a:	4658      	mov	r0, fp
 8004d5c:	f7fb fa70 	bl	8000240 <strlen>
 8004d60:	2300      	movs	r3, #0
 8004d62:	930a      	str	r3, [sp, #40]	; 0x28
 8004d64:	f8d8 3000 	ldr.w	r3, [r8]
 8004d68:	9005      	str	r0, [sp, #20]
 8004d6a:	3307      	adds	r3, #7
 8004d6c:	f023 0307 	bic.w	r3, r3, #7
 8004d70:	f103 0108 	add.w	r1, r3, #8
 8004d74:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004d78:	6822      	ldr	r2, [r4, #0]
 8004d7a:	f8c8 1000 	str.w	r1, [r8]
 8004d7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d82:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8004d86:	ed9f 7ba0 	vldr	d7, [pc, #640]	; 8005008 <_printf_float+0x2c8>
 8004d8a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004d8e:	eeb0 6bc0 	vabs.f64	d6, d0
 8004d92:	eeb4 6b47 	vcmp.f64	d6, d7
 8004d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9a:	f340 81ef 	ble.w	800517c <_printf_float+0x43c>
 8004d9e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da6:	d502      	bpl.n	8004dae <_printf_float+0x6e>
 8004da8:	232d      	movs	r3, #45	; 0x2d
 8004daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dae:	4b98      	ldr	r3, [pc, #608]	; (8005010 <_printf_float+0x2d0>)
 8004db0:	4998      	ldr	r1, [pc, #608]	; (8005014 <_printf_float+0x2d4>)
 8004db2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004db6:	bf8c      	ite	hi
 8004db8:	4688      	movhi	r8, r1
 8004dba:	4698      	movls	r8, r3
 8004dbc:	f022 0204 	bic.w	r2, r2, #4
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	6123      	str	r3, [r4, #16]
 8004dc4:	6022      	str	r2, [r4, #0]
 8004dc6:	f04f 0a00 	mov.w	sl, #0
 8004dca:	9700      	str	r7, [sp, #0]
 8004dcc:	4633      	mov	r3, r6
 8004dce:	aa0b      	add	r2, sp, #44	; 0x2c
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f000 f9e0 	bl	8005198 <_printf_common>
 8004dd8:	3001      	adds	r0, #1
 8004dda:	f040 8090 	bne.w	8004efe <_printf_float+0x1be>
 8004dde:	f04f 30ff 	mov.w	r0, #4294967295
 8004de2:	b00d      	add	sp, #52	; 0x34
 8004de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de8:	6861      	ldr	r1, [r4, #4]
 8004dea:	1c4b      	adds	r3, r1, #1
 8004dec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004df0:	a80a      	add	r0, sp, #40	; 0x28
 8004df2:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8004df6:	d13c      	bne.n	8004e72 <_printf_float+0x132>
 8004df8:	2306      	movs	r3, #6
 8004dfa:	6063      	str	r3, [r4, #4]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	9303      	str	r3, [sp, #12]
 8004e00:	9002      	str	r0, [sp, #8]
 8004e02:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e06:	6022      	str	r2, [r4, #0]
 8004e08:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e0c:	f8cd e000 	str.w	lr, [sp]
 8004e10:	6861      	ldr	r1, [r4, #4]
 8004e12:	4628      	mov	r0, r5
 8004e14:	f7ff ff09 	bl	8004c2a <__cvt>
 8004e18:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8004e1c:	2b47      	cmp	r3, #71	; 0x47
 8004e1e:	4680      	mov	r8, r0
 8004e20:	d109      	bne.n	8004e36 <_printf_float+0xf6>
 8004e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e24:	1cd8      	adds	r0, r3, #3
 8004e26:	db02      	blt.n	8004e2e <_printf_float+0xee>
 8004e28:	6862      	ldr	r2, [r4, #4]
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	dd54      	ble.n	8004ed8 <_printf_float+0x198>
 8004e2e:	f1a9 0902 	sub.w	r9, r9, #2
 8004e32:	fa5f f989 	uxtb.w	r9, r9
 8004e36:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e3c:	d831      	bhi.n	8004ea2 <_printf_float+0x162>
 8004e3e:	3901      	subs	r1, #1
 8004e40:	464a      	mov	r2, r9
 8004e42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e46:	9109      	str	r1, [sp, #36]	; 0x24
 8004e48:	f7ff ff42 	bl	8004cd0 <__exponent>
 8004e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e4e:	1883      	adds	r3, r0, r2
 8004e50:	2a01      	cmp	r2, #1
 8004e52:	4682      	mov	sl, r0
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	dc02      	bgt.n	8004e5e <_printf_float+0x11e>
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	07d1      	lsls	r1, r2, #31
 8004e5c:	d501      	bpl.n	8004e62 <_printf_float+0x122>
 8004e5e:	3301      	adds	r3, #1
 8004e60:	6123      	str	r3, [r4, #16]
 8004e62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0af      	beq.n	8004dca <_printf_float+0x8a>
 8004e6a:	232d      	movs	r3, #45	; 0x2d
 8004e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e70:	e7ab      	b.n	8004dca <_printf_float+0x8a>
 8004e72:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8004e76:	d002      	beq.n	8004e7e <_printf_float+0x13e>
 8004e78:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004e7c:	d1be      	bne.n	8004dfc <_printf_float+0xbc>
 8004e7e:	b171      	cbz	r1, 8004e9e <_printf_float+0x15e>
 8004e80:	2300      	movs	r3, #0
 8004e82:	9303      	str	r3, [sp, #12]
 8004e84:	9002      	str	r0, [sp, #8]
 8004e86:	6022      	str	r2, [r4, #0]
 8004e88:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e8c:	f8cd e000 	str.w	lr, [sp]
 8004e90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e94:	4628      	mov	r0, r5
 8004e96:	f7ff fec8 	bl	8004c2a <__cvt>
 8004e9a:	4680      	mov	r8, r0
 8004e9c:	e7c1      	b.n	8004e22 <_printf_float+0xe2>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e7ab      	b.n	8004dfa <_printf_float+0xba>
 8004ea2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004ea6:	d119      	bne.n	8004edc <_printf_float+0x19c>
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	6863      	ldr	r3, [r4, #4]
 8004eac:	dd0c      	ble.n	8004ec8 <_printf_float+0x188>
 8004eae:	6121      	str	r1, [r4, #16]
 8004eb0:	b913      	cbnz	r3, 8004eb8 <_printf_float+0x178>
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	07d2      	lsls	r2, r2, #31
 8004eb6:	d502      	bpl.n	8004ebe <_printf_float+0x17e>
 8004eb8:	3301      	adds	r3, #1
 8004eba:	440b      	add	r3, r1
 8004ebc:	6123      	str	r3, [r4, #16]
 8004ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec0:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ec2:	f04f 0a00 	mov.w	sl, #0
 8004ec6:	e7cc      	b.n	8004e62 <_printf_float+0x122>
 8004ec8:	b913      	cbnz	r3, 8004ed0 <_printf_float+0x190>
 8004eca:	6822      	ldr	r2, [r4, #0]
 8004ecc:	07d0      	lsls	r0, r2, #31
 8004ece:	d501      	bpl.n	8004ed4 <_printf_float+0x194>
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	e7f3      	b.n	8004ebc <_printf_float+0x17c>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e7f1      	b.n	8004ebc <_printf_float+0x17c>
 8004ed8:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	db05      	blt.n	8004ef0 <_printf_float+0x1b0>
 8004ee4:	6822      	ldr	r2, [r4, #0]
 8004ee6:	6123      	str	r3, [r4, #16]
 8004ee8:	07d1      	lsls	r1, r2, #31
 8004eea:	d5e8      	bpl.n	8004ebe <_printf_float+0x17e>
 8004eec:	3301      	adds	r3, #1
 8004eee:	e7e5      	b.n	8004ebc <_printf_float+0x17c>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bfd4      	ite	le
 8004ef4:	f1c3 0302 	rsble	r3, r3, #2
 8004ef8:	2301      	movgt	r3, #1
 8004efa:	4413      	add	r3, r2
 8004efc:	e7de      	b.n	8004ebc <_printf_float+0x17c>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	055a      	lsls	r2, r3, #21
 8004f02:	d407      	bmi.n	8004f14 <_printf_float+0x1d4>
 8004f04:	6923      	ldr	r3, [r4, #16]
 8004f06:	4642      	mov	r2, r8
 8004f08:	4631      	mov	r1, r6
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	47b8      	blx	r7
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d12a      	bne.n	8004f68 <_printf_float+0x228>
 8004f12:	e764      	b.n	8004dde <_printf_float+0x9e>
 8004f14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f18:	f240 80e5 	bls.w	80050e6 <_printf_float+0x3a6>
 8004f1c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004f20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f28:	d13c      	bne.n	8004fa4 <_printf_float+0x264>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4a3a      	ldr	r2, [pc, #232]	; (8005018 <_printf_float+0x2d8>)
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b8      	blx	r7
 8004f34:	3001      	adds	r0, #1
 8004f36:	f43f af52 	beq.w	8004dde <_printf_float+0x9e>
 8004f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	db02      	blt.n	8004f48 <_printf_float+0x208>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	07d8      	lsls	r0, r3, #31
 8004f46:	d50f      	bpl.n	8004f68 <_printf_float+0x228>
 8004f48:	9b05      	ldr	r3, [sp, #20]
 8004f4a:	465a      	mov	r2, fp
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	f43f af43 	beq.w	8004dde <_printf_float+0x9e>
 8004f58:	f04f 0800 	mov.w	r8, #0
 8004f5c:	f104 091a 	add.w	r9, r4, #26
 8004f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f62:	3b01      	subs	r3, #1
 8004f64:	4598      	cmp	r8, r3
 8004f66:	db12      	blt.n	8004f8e <_printf_float+0x24e>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	079b      	lsls	r3, r3, #30
 8004f6c:	d509      	bpl.n	8004f82 <_printf_float+0x242>
 8004f6e:	f04f 0800 	mov.w	r8, #0
 8004f72:	f104 0919 	add.w	r9, r4, #25
 8004f76:	68e3      	ldr	r3, [r4, #12]
 8004f78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f7a:	1a9b      	subs	r3, r3, r2
 8004f7c:	4598      	cmp	r8, r3
 8004f7e:	f2c0 80f2 	blt.w	8005166 <_printf_float+0x426>
 8004f82:	68e0      	ldr	r0, [r4, #12]
 8004f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f86:	4298      	cmp	r0, r3
 8004f88:	bfb8      	it	lt
 8004f8a:	4618      	movlt	r0, r3
 8004f8c:	e729      	b.n	8004de2 <_printf_float+0xa2>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	464a      	mov	r2, r9
 8004f92:	4631      	mov	r1, r6
 8004f94:	4628      	mov	r0, r5
 8004f96:	47b8      	blx	r7
 8004f98:	3001      	adds	r0, #1
 8004f9a:	f43f af20 	beq.w	8004dde <_printf_float+0x9e>
 8004f9e:	f108 0801 	add.w	r8, r8, #1
 8004fa2:	e7dd      	b.n	8004f60 <_printf_float+0x220>
 8004fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	dc38      	bgt.n	800501c <_printf_float+0x2dc>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4a1a      	ldr	r2, [pc, #104]	; (8005018 <_printf_float+0x2d8>)
 8004fae:	4631      	mov	r1, r6
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	47b8      	blx	r7
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	f43f af12 	beq.w	8004dde <_printf_float+0x9e>
 8004fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fbc:	b923      	cbnz	r3, 8004fc8 <_printf_float+0x288>
 8004fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc0:	b913      	cbnz	r3, 8004fc8 <_printf_float+0x288>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	07d9      	lsls	r1, r3, #31
 8004fc6:	d5cf      	bpl.n	8004f68 <_printf_float+0x228>
 8004fc8:	9b05      	ldr	r3, [sp, #20]
 8004fca:	465a      	mov	r2, fp
 8004fcc:	4631      	mov	r1, r6
 8004fce:	4628      	mov	r0, r5
 8004fd0:	47b8      	blx	r7
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	f43f af03 	beq.w	8004dde <_printf_float+0x9e>
 8004fd8:	f04f 0900 	mov.w	r9, #0
 8004fdc:	f104 0a1a 	add.w	sl, r4, #26
 8004fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe2:	425b      	negs	r3, r3
 8004fe4:	4599      	cmp	r9, r3
 8004fe6:	db01      	blt.n	8004fec <_printf_float+0x2ac>
 8004fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fea:	e78c      	b.n	8004f06 <_printf_float+0x1c6>
 8004fec:	2301      	movs	r3, #1
 8004fee:	4652      	mov	r2, sl
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	f43f aef1 	beq.w	8004dde <_printf_float+0x9e>
 8004ffc:	f109 0901 	add.w	r9, r9, #1
 8005000:	e7ee      	b.n	8004fe0 <_printf_float+0x2a0>
 8005002:	bf00      	nop
 8005004:	f3af 8000 	nop.w
 8005008:	ffffffff 	.word	0xffffffff
 800500c:	7fefffff 	.word	0x7fefffff
 8005010:	0800966b 	.word	0x0800966b
 8005014:	0800966f 	.word	0x0800966f
 8005018:	0800967b 	.word	0x0800967b
 800501c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800501e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005020:	429a      	cmp	r2, r3
 8005022:	bfa8      	it	ge
 8005024:	461a      	movge	r2, r3
 8005026:	2a00      	cmp	r2, #0
 8005028:	4691      	mov	r9, r2
 800502a:	dc38      	bgt.n	800509e <_printf_float+0x35e>
 800502c:	f104 031a 	add.w	r3, r4, #26
 8005030:	f04f 0a00 	mov.w	sl, #0
 8005034:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005038:	9307      	str	r3, [sp, #28]
 800503a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800503c:	9306      	str	r3, [sp, #24]
 800503e:	eba3 0309 	sub.w	r3, r3, r9
 8005042:	459a      	cmp	sl, r3
 8005044:	db33      	blt.n	80050ae <_printf_float+0x36e>
 8005046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800504a:	429a      	cmp	r2, r3
 800504c:	db3a      	blt.n	80050c4 <_printf_float+0x384>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	07da      	lsls	r2, r3, #31
 8005052:	d437      	bmi.n	80050c4 <_printf_float+0x384>
 8005054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005056:	9a06      	ldr	r2, [sp, #24]
 8005058:	9909      	ldr	r1, [sp, #36]	; 0x24
 800505a:	1a9a      	subs	r2, r3, r2
 800505c:	eba3 0901 	sub.w	r9, r3, r1
 8005060:	4591      	cmp	r9, r2
 8005062:	bfa8      	it	ge
 8005064:	4691      	movge	r9, r2
 8005066:	f1b9 0f00 	cmp.w	r9, #0
 800506a:	dc33      	bgt.n	80050d4 <_printf_float+0x394>
 800506c:	f04f 0800 	mov.w	r8, #0
 8005070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005074:	f104 0a1a 	add.w	sl, r4, #26
 8005078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800507a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800507c:	1a9b      	subs	r3, r3, r2
 800507e:	eba3 0309 	sub.w	r3, r3, r9
 8005082:	4598      	cmp	r8, r3
 8005084:	f6bf af70 	bge.w	8004f68 <_printf_float+0x228>
 8005088:	2301      	movs	r3, #1
 800508a:	4652      	mov	r2, sl
 800508c:	4631      	mov	r1, r6
 800508e:	4628      	mov	r0, r5
 8005090:	47b8      	blx	r7
 8005092:	3001      	adds	r0, #1
 8005094:	f43f aea3 	beq.w	8004dde <_printf_float+0x9e>
 8005098:	f108 0801 	add.w	r8, r8, #1
 800509c:	e7ec      	b.n	8005078 <_printf_float+0x338>
 800509e:	4613      	mov	r3, r2
 80050a0:	4631      	mov	r1, r6
 80050a2:	4642      	mov	r2, r8
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b8      	blx	r7
 80050a8:	3001      	adds	r0, #1
 80050aa:	d1bf      	bne.n	800502c <_printf_float+0x2ec>
 80050ac:	e697      	b.n	8004dde <_printf_float+0x9e>
 80050ae:	2301      	movs	r3, #1
 80050b0:	9a07      	ldr	r2, [sp, #28]
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	47b8      	blx	r7
 80050b8:	3001      	adds	r0, #1
 80050ba:	f43f ae90 	beq.w	8004dde <_printf_float+0x9e>
 80050be:	f10a 0a01 	add.w	sl, sl, #1
 80050c2:	e7ba      	b.n	800503a <_printf_float+0x2fa>
 80050c4:	9b05      	ldr	r3, [sp, #20]
 80050c6:	465a      	mov	r2, fp
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	d1c0      	bne.n	8005054 <_printf_float+0x314>
 80050d2:	e684      	b.n	8004dde <_printf_float+0x9e>
 80050d4:	9a06      	ldr	r2, [sp, #24]
 80050d6:	464b      	mov	r3, r9
 80050d8:	4442      	add	r2, r8
 80050da:	4631      	mov	r1, r6
 80050dc:	4628      	mov	r0, r5
 80050de:	47b8      	blx	r7
 80050e0:	3001      	adds	r0, #1
 80050e2:	d1c3      	bne.n	800506c <_printf_float+0x32c>
 80050e4:	e67b      	b.n	8004dde <_printf_float+0x9e>
 80050e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050e8:	2a01      	cmp	r2, #1
 80050ea:	dc01      	bgt.n	80050f0 <_printf_float+0x3b0>
 80050ec:	07db      	lsls	r3, r3, #31
 80050ee:	d537      	bpl.n	8005160 <_printf_float+0x420>
 80050f0:	2301      	movs	r3, #1
 80050f2:	4642      	mov	r2, r8
 80050f4:	4631      	mov	r1, r6
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b8      	blx	r7
 80050fa:	3001      	adds	r0, #1
 80050fc:	f43f ae6f 	beq.w	8004dde <_printf_float+0x9e>
 8005100:	9b05      	ldr	r3, [sp, #20]
 8005102:	465a      	mov	r2, fp
 8005104:	4631      	mov	r1, r6
 8005106:	4628      	mov	r0, r5
 8005108:	47b8      	blx	r7
 800510a:	3001      	adds	r0, #1
 800510c:	f43f ae67 	beq.w	8004dde <_printf_float+0x9e>
 8005110:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005114:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511c:	d10b      	bne.n	8005136 <_printf_float+0x3f6>
 800511e:	f04f 0800 	mov.w	r8, #0
 8005122:	f104 091a 	add.w	r9, r4, #26
 8005126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005128:	3b01      	subs	r3, #1
 800512a:	4598      	cmp	r8, r3
 800512c:	db0d      	blt.n	800514a <_printf_float+0x40a>
 800512e:	4653      	mov	r3, sl
 8005130:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005134:	e6e8      	b.n	8004f08 <_printf_float+0x1c8>
 8005136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005138:	f108 0201 	add.w	r2, r8, #1
 800513c:	3b01      	subs	r3, #1
 800513e:	4631      	mov	r1, r6
 8005140:	4628      	mov	r0, r5
 8005142:	47b8      	blx	r7
 8005144:	3001      	adds	r0, #1
 8005146:	d1f2      	bne.n	800512e <_printf_float+0x3ee>
 8005148:	e649      	b.n	8004dde <_printf_float+0x9e>
 800514a:	2301      	movs	r3, #1
 800514c:	464a      	mov	r2, r9
 800514e:	4631      	mov	r1, r6
 8005150:	4628      	mov	r0, r5
 8005152:	47b8      	blx	r7
 8005154:	3001      	adds	r0, #1
 8005156:	f43f ae42 	beq.w	8004dde <_printf_float+0x9e>
 800515a:	f108 0801 	add.w	r8, r8, #1
 800515e:	e7e2      	b.n	8005126 <_printf_float+0x3e6>
 8005160:	2301      	movs	r3, #1
 8005162:	4642      	mov	r2, r8
 8005164:	e7eb      	b.n	800513e <_printf_float+0x3fe>
 8005166:	2301      	movs	r3, #1
 8005168:	464a      	mov	r2, r9
 800516a:	4631      	mov	r1, r6
 800516c:	4628      	mov	r0, r5
 800516e:	47b8      	blx	r7
 8005170:	3001      	adds	r0, #1
 8005172:	f43f ae34 	beq.w	8004dde <_printf_float+0x9e>
 8005176:	f108 0801 	add.w	r8, r8, #1
 800517a:	e6fc      	b.n	8004f76 <_printf_float+0x236>
 800517c:	eeb4 0b40 	vcmp.f64	d0, d0
 8005180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005184:	f5ff ae30 	bvc.w	8004de8 <_printf_float+0xa8>
 8005188:	4b01      	ldr	r3, [pc, #4]	; (8005190 <_printf_float+0x450>)
 800518a:	4902      	ldr	r1, [pc, #8]	; (8005194 <_printf_float+0x454>)
 800518c:	e611      	b.n	8004db2 <_printf_float+0x72>
 800518e:	bf00      	nop
 8005190:	08009673 	.word	0x08009673
 8005194:	08009677 	.word	0x08009677

08005198 <_printf_common>:
 8005198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	4691      	mov	r9, r2
 800519e:	461f      	mov	r7, r3
 80051a0:	688a      	ldr	r2, [r1, #8]
 80051a2:	690b      	ldr	r3, [r1, #16]
 80051a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051a8:	4293      	cmp	r3, r2
 80051aa:	bfb8      	it	lt
 80051ac:	4613      	movlt	r3, r2
 80051ae:	f8c9 3000 	str.w	r3, [r9]
 80051b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051b6:	4606      	mov	r6, r0
 80051b8:	460c      	mov	r4, r1
 80051ba:	b112      	cbz	r2, 80051c2 <_printf_common+0x2a>
 80051bc:	3301      	adds	r3, #1
 80051be:	f8c9 3000 	str.w	r3, [r9]
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	0699      	lsls	r1, r3, #26
 80051c6:	bf42      	ittt	mi
 80051c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80051cc:	3302      	addmi	r3, #2
 80051ce:	f8c9 3000 	strmi.w	r3, [r9]
 80051d2:	6825      	ldr	r5, [r4, #0]
 80051d4:	f015 0506 	ands.w	r5, r5, #6
 80051d8:	d107      	bne.n	80051ea <_printf_common+0x52>
 80051da:	f104 0a19 	add.w	sl, r4, #25
 80051de:	68e3      	ldr	r3, [r4, #12]
 80051e0:	f8d9 2000 	ldr.w	r2, [r9]
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	429d      	cmp	r5, r3
 80051e8:	db29      	blt.n	800523e <_printf_common+0xa6>
 80051ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	3300      	adds	r3, #0
 80051f2:	bf18      	it	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	0692      	lsls	r2, r2, #26
 80051f8:	d42e      	bmi.n	8005258 <_printf_common+0xc0>
 80051fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051fe:	4639      	mov	r1, r7
 8005200:	4630      	mov	r0, r6
 8005202:	47c0      	blx	r8
 8005204:	3001      	adds	r0, #1
 8005206:	d021      	beq.n	800524c <_printf_common+0xb4>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	68e5      	ldr	r5, [r4, #12]
 800520c:	f8d9 2000 	ldr.w	r2, [r9]
 8005210:	f003 0306 	and.w	r3, r3, #6
 8005214:	2b04      	cmp	r3, #4
 8005216:	bf08      	it	eq
 8005218:	1aad      	subeq	r5, r5, r2
 800521a:	68a3      	ldr	r3, [r4, #8]
 800521c:	6922      	ldr	r2, [r4, #16]
 800521e:	bf0c      	ite	eq
 8005220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005224:	2500      	movne	r5, #0
 8005226:	4293      	cmp	r3, r2
 8005228:	bfc4      	itt	gt
 800522a:	1a9b      	subgt	r3, r3, r2
 800522c:	18ed      	addgt	r5, r5, r3
 800522e:	f04f 0900 	mov.w	r9, #0
 8005232:	341a      	adds	r4, #26
 8005234:	454d      	cmp	r5, r9
 8005236:	d11b      	bne.n	8005270 <_printf_common+0xd8>
 8005238:	2000      	movs	r0, #0
 800523a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800523e:	2301      	movs	r3, #1
 8005240:	4652      	mov	r2, sl
 8005242:	4639      	mov	r1, r7
 8005244:	4630      	mov	r0, r6
 8005246:	47c0      	blx	r8
 8005248:	3001      	adds	r0, #1
 800524a:	d103      	bne.n	8005254 <_printf_common+0xbc>
 800524c:	f04f 30ff 	mov.w	r0, #4294967295
 8005250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005254:	3501      	adds	r5, #1
 8005256:	e7c2      	b.n	80051de <_printf_common+0x46>
 8005258:	18e1      	adds	r1, r4, r3
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	2030      	movs	r0, #48	; 0x30
 800525e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005262:	4422      	add	r2, r4
 8005264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800526c:	3302      	adds	r3, #2
 800526e:	e7c4      	b.n	80051fa <_printf_common+0x62>
 8005270:	2301      	movs	r3, #1
 8005272:	4622      	mov	r2, r4
 8005274:	4639      	mov	r1, r7
 8005276:	4630      	mov	r0, r6
 8005278:	47c0      	blx	r8
 800527a:	3001      	adds	r0, #1
 800527c:	d0e6      	beq.n	800524c <_printf_common+0xb4>
 800527e:	f109 0901 	add.w	r9, r9, #1
 8005282:	e7d7      	b.n	8005234 <_printf_common+0x9c>

08005284 <_printf_i>:
 8005284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005288:	4617      	mov	r7, r2
 800528a:	7e0a      	ldrb	r2, [r1, #24]
 800528c:	b085      	sub	sp, #20
 800528e:	2a6e      	cmp	r2, #110	; 0x6e
 8005290:	4698      	mov	r8, r3
 8005292:	4606      	mov	r6, r0
 8005294:	460c      	mov	r4, r1
 8005296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005298:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800529c:	f000 80bc 	beq.w	8005418 <_printf_i+0x194>
 80052a0:	d81a      	bhi.n	80052d8 <_printf_i+0x54>
 80052a2:	2a63      	cmp	r2, #99	; 0x63
 80052a4:	d02e      	beq.n	8005304 <_printf_i+0x80>
 80052a6:	d80a      	bhi.n	80052be <_printf_i+0x3a>
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	f000 80c8 	beq.w	800543e <_printf_i+0x1ba>
 80052ae:	2a58      	cmp	r2, #88	; 0x58
 80052b0:	f000 808a 	beq.w	80053c8 <_printf_i+0x144>
 80052b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80052bc:	e02a      	b.n	8005314 <_printf_i+0x90>
 80052be:	2a64      	cmp	r2, #100	; 0x64
 80052c0:	d001      	beq.n	80052c6 <_printf_i+0x42>
 80052c2:	2a69      	cmp	r2, #105	; 0x69
 80052c4:	d1f6      	bne.n	80052b4 <_printf_i+0x30>
 80052c6:	6821      	ldr	r1, [r4, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80052ce:	d023      	beq.n	8005318 <_printf_i+0x94>
 80052d0:	1d11      	adds	r1, r2, #4
 80052d2:	6019      	str	r1, [r3, #0]
 80052d4:	6813      	ldr	r3, [r2, #0]
 80052d6:	e027      	b.n	8005328 <_printf_i+0xa4>
 80052d8:	2a73      	cmp	r2, #115	; 0x73
 80052da:	f000 80b4 	beq.w	8005446 <_printf_i+0x1c2>
 80052de:	d808      	bhi.n	80052f2 <_printf_i+0x6e>
 80052e0:	2a6f      	cmp	r2, #111	; 0x6f
 80052e2:	d02a      	beq.n	800533a <_printf_i+0xb6>
 80052e4:	2a70      	cmp	r2, #112	; 0x70
 80052e6:	d1e5      	bne.n	80052b4 <_printf_i+0x30>
 80052e8:	680a      	ldr	r2, [r1, #0]
 80052ea:	f042 0220 	orr.w	r2, r2, #32
 80052ee:	600a      	str	r2, [r1, #0]
 80052f0:	e003      	b.n	80052fa <_printf_i+0x76>
 80052f2:	2a75      	cmp	r2, #117	; 0x75
 80052f4:	d021      	beq.n	800533a <_printf_i+0xb6>
 80052f6:	2a78      	cmp	r2, #120	; 0x78
 80052f8:	d1dc      	bne.n	80052b4 <_printf_i+0x30>
 80052fa:	2278      	movs	r2, #120	; 0x78
 80052fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005300:	496e      	ldr	r1, [pc, #440]	; (80054bc <_printf_i+0x238>)
 8005302:	e064      	b.n	80053ce <_printf_i+0x14a>
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800530a:	1d11      	adds	r1, r2, #4
 800530c:	6019      	str	r1, [r3, #0]
 800530e:	6813      	ldr	r3, [r2, #0]
 8005310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005314:	2301      	movs	r3, #1
 8005316:	e0a3      	b.n	8005460 <_printf_i+0x1dc>
 8005318:	f011 0f40 	tst.w	r1, #64	; 0x40
 800531c:	f102 0104 	add.w	r1, r2, #4
 8005320:	6019      	str	r1, [r3, #0]
 8005322:	d0d7      	beq.n	80052d4 <_printf_i+0x50>
 8005324:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005328:	2b00      	cmp	r3, #0
 800532a:	da03      	bge.n	8005334 <_printf_i+0xb0>
 800532c:	222d      	movs	r2, #45	; 0x2d
 800532e:	425b      	negs	r3, r3
 8005330:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005334:	4962      	ldr	r1, [pc, #392]	; (80054c0 <_printf_i+0x23c>)
 8005336:	220a      	movs	r2, #10
 8005338:	e017      	b.n	800536a <_printf_i+0xe6>
 800533a:	6820      	ldr	r0, [r4, #0]
 800533c:	6819      	ldr	r1, [r3, #0]
 800533e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005342:	d003      	beq.n	800534c <_printf_i+0xc8>
 8005344:	1d08      	adds	r0, r1, #4
 8005346:	6018      	str	r0, [r3, #0]
 8005348:	680b      	ldr	r3, [r1, #0]
 800534a:	e006      	b.n	800535a <_printf_i+0xd6>
 800534c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005350:	f101 0004 	add.w	r0, r1, #4
 8005354:	6018      	str	r0, [r3, #0]
 8005356:	d0f7      	beq.n	8005348 <_printf_i+0xc4>
 8005358:	880b      	ldrh	r3, [r1, #0]
 800535a:	4959      	ldr	r1, [pc, #356]	; (80054c0 <_printf_i+0x23c>)
 800535c:	2a6f      	cmp	r2, #111	; 0x6f
 800535e:	bf14      	ite	ne
 8005360:	220a      	movne	r2, #10
 8005362:	2208      	moveq	r2, #8
 8005364:	2000      	movs	r0, #0
 8005366:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800536a:	6865      	ldr	r5, [r4, #4]
 800536c:	60a5      	str	r5, [r4, #8]
 800536e:	2d00      	cmp	r5, #0
 8005370:	f2c0 809c 	blt.w	80054ac <_printf_i+0x228>
 8005374:	6820      	ldr	r0, [r4, #0]
 8005376:	f020 0004 	bic.w	r0, r0, #4
 800537a:	6020      	str	r0, [r4, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d13f      	bne.n	8005400 <_printf_i+0x17c>
 8005380:	2d00      	cmp	r5, #0
 8005382:	f040 8095 	bne.w	80054b0 <_printf_i+0x22c>
 8005386:	4675      	mov	r5, lr
 8005388:	2a08      	cmp	r2, #8
 800538a:	d10b      	bne.n	80053a4 <_printf_i+0x120>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	07da      	lsls	r2, r3, #31
 8005390:	d508      	bpl.n	80053a4 <_printf_i+0x120>
 8005392:	6923      	ldr	r3, [r4, #16]
 8005394:	6862      	ldr	r2, [r4, #4]
 8005396:	429a      	cmp	r2, r3
 8005398:	bfde      	ittt	le
 800539a:	2330      	movle	r3, #48	; 0x30
 800539c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053a4:	ebae 0305 	sub.w	r3, lr, r5
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	f8cd 8000 	str.w	r8, [sp]
 80053ae:	463b      	mov	r3, r7
 80053b0:	aa03      	add	r2, sp, #12
 80053b2:	4621      	mov	r1, r4
 80053b4:	4630      	mov	r0, r6
 80053b6:	f7ff feef 	bl	8005198 <_printf_common>
 80053ba:	3001      	adds	r0, #1
 80053bc:	d155      	bne.n	800546a <_printf_i+0x1e6>
 80053be:	f04f 30ff 	mov.w	r0, #4294967295
 80053c2:	b005      	add	sp, #20
 80053c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053c8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80053cc:	493c      	ldr	r1, [pc, #240]	; (80054c0 <_printf_i+0x23c>)
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80053d6:	f100 0504 	add.w	r5, r0, #4
 80053da:	601d      	str	r5, [r3, #0]
 80053dc:	d001      	beq.n	80053e2 <_printf_i+0x15e>
 80053de:	6803      	ldr	r3, [r0, #0]
 80053e0:	e002      	b.n	80053e8 <_printf_i+0x164>
 80053e2:	0655      	lsls	r5, r2, #25
 80053e4:	d5fb      	bpl.n	80053de <_printf_i+0x15a>
 80053e6:	8803      	ldrh	r3, [r0, #0]
 80053e8:	07d0      	lsls	r0, r2, #31
 80053ea:	bf44      	itt	mi
 80053ec:	f042 0220 	orrmi.w	r2, r2, #32
 80053f0:	6022      	strmi	r2, [r4, #0]
 80053f2:	b91b      	cbnz	r3, 80053fc <_printf_i+0x178>
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	f022 0220 	bic.w	r2, r2, #32
 80053fa:	6022      	str	r2, [r4, #0]
 80053fc:	2210      	movs	r2, #16
 80053fe:	e7b1      	b.n	8005364 <_printf_i+0xe0>
 8005400:	4675      	mov	r5, lr
 8005402:	fbb3 f0f2 	udiv	r0, r3, r2
 8005406:	fb02 3310 	mls	r3, r2, r0, r3
 800540a:	5ccb      	ldrb	r3, [r1, r3]
 800540c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005410:	4603      	mov	r3, r0
 8005412:	2800      	cmp	r0, #0
 8005414:	d1f5      	bne.n	8005402 <_printf_i+0x17e>
 8005416:	e7b7      	b.n	8005388 <_printf_i+0x104>
 8005418:	6808      	ldr	r0, [r1, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	6949      	ldr	r1, [r1, #20]
 800541e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005422:	d004      	beq.n	800542e <_printf_i+0x1aa>
 8005424:	1d10      	adds	r0, r2, #4
 8005426:	6018      	str	r0, [r3, #0]
 8005428:	6813      	ldr	r3, [r2, #0]
 800542a:	6019      	str	r1, [r3, #0]
 800542c:	e007      	b.n	800543e <_printf_i+0x1ba>
 800542e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005432:	f102 0004 	add.w	r0, r2, #4
 8005436:	6018      	str	r0, [r3, #0]
 8005438:	6813      	ldr	r3, [r2, #0]
 800543a:	d0f6      	beq.n	800542a <_printf_i+0x1a6>
 800543c:	8019      	strh	r1, [r3, #0]
 800543e:	2300      	movs	r3, #0
 8005440:	6123      	str	r3, [r4, #16]
 8005442:	4675      	mov	r5, lr
 8005444:	e7b1      	b.n	80053aa <_printf_i+0x126>
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	1d11      	adds	r1, r2, #4
 800544a:	6019      	str	r1, [r3, #0]
 800544c:	6815      	ldr	r5, [r2, #0]
 800544e:	6862      	ldr	r2, [r4, #4]
 8005450:	2100      	movs	r1, #0
 8005452:	4628      	mov	r0, r5
 8005454:	f7fa fefc 	bl	8000250 <memchr>
 8005458:	b108      	cbz	r0, 800545e <_printf_i+0x1da>
 800545a:	1b40      	subs	r0, r0, r5
 800545c:	6060      	str	r0, [r4, #4]
 800545e:	6863      	ldr	r3, [r4, #4]
 8005460:	6123      	str	r3, [r4, #16]
 8005462:	2300      	movs	r3, #0
 8005464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005468:	e79f      	b.n	80053aa <_printf_i+0x126>
 800546a:	6923      	ldr	r3, [r4, #16]
 800546c:	462a      	mov	r2, r5
 800546e:	4639      	mov	r1, r7
 8005470:	4630      	mov	r0, r6
 8005472:	47c0      	blx	r8
 8005474:	3001      	adds	r0, #1
 8005476:	d0a2      	beq.n	80053be <_printf_i+0x13a>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	079b      	lsls	r3, r3, #30
 800547c:	d507      	bpl.n	800548e <_printf_i+0x20a>
 800547e:	2500      	movs	r5, #0
 8005480:	f104 0919 	add.w	r9, r4, #25
 8005484:	68e3      	ldr	r3, [r4, #12]
 8005486:	9a03      	ldr	r2, [sp, #12]
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	429d      	cmp	r5, r3
 800548c:	db05      	blt.n	800549a <_printf_i+0x216>
 800548e:	68e0      	ldr	r0, [r4, #12]
 8005490:	9b03      	ldr	r3, [sp, #12]
 8005492:	4298      	cmp	r0, r3
 8005494:	bfb8      	it	lt
 8005496:	4618      	movlt	r0, r3
 8005498:	e793      	b.n	80053c2 <_printf_i+0x13e>
 800549a:	2301      	movs	r3, #1
 800549c:	464a      	mov	r2, r9
 800549e:	4639      	mov	r1, r7
 80054a0:	4630      	mov	r0, r6
 80054a2:	47c0      	blx	r8
 80054a4:	3001      	adds	r0, #1
 80054a6:	d08a      	beq.n	80053be <_printf_i+0x13a>
 80054a8:	3501      	adds	r5, #1
 80054aa:	e7eb      	b.n	8005484 <_printf_i+0x200>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1a7      	bne.n	8005400 <_printf_i+0x17c>
 80054b0:	780b      	ldrb	r3, [r1, #0]
 80054b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054ba:	e765      	b.n	8005388 <_printf_i+0x104>
 80054bc:	0800968e 	.word	0x0800968e
 80054c0:	0800967d 	.word	0x0800967d

080054c4 <iprintf>:
 80054c4:	b40f      	push	{r0, r1, r2, r3}
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <iprintf+0x2c>)
 80054c8:	b513      	push	{r0, r1, r4, lr}
 80054ca:	681c      	ldr	r4, [r3, #0]
 80054cc:	b124      	cbz	r4, 80054d8 <iprintf+0x14>
 80054ce:	69a3      	ldr	r3, [r4, #24]
 80054d0:	b913      	cbnz	r3, 80054d8 <iprintf+0x14>
 80054d2:	4620      	mov	r0, r4
 80054d4:	f001 f84a 	bl	800656c <__sinit>
 80054d8:	ab05      	add	r3, sp, #20
 80054da:	9a04      	ldr	r2, [sp, #16]
 80054dc:	68a1      	ldr	r1, [r4, #8]
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	4620      	mov	r0, r4
 80054e2:	f001 fe53 	bl	800718c <_vfiprintf_r>
 80054e6:	b002      	add	sp, #8
 80054e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ec:	b004      	add	sp, #16
 80054ee:	4770      	bx	lr
 80054f0:	20000054 	.word	0x20000054

080054f4 <_puts_r>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	460e      	mov	r6, r1
 80054f8:	4605      	mov	r5, r0
 80054fa:	b118      	cbz	r0, 8005504 <_puts_r+0x10>
 80054fc:	6983      	ldr	r3, [r0, #24]
 80054fe:	b90b      	cbnz	r3, 8005504 <_puts_r+0x10>
 8005500:	f001 f834 	bl	800656c <__sinit>
 8005504:	69ab      	ldr	r3, [r5, #24]
 8005506:	68ac      	ldr	r4, [r5, #8]
 8005508:	b913      	cbnz	r3, 8005510 <_puts_r+0x1c>
 800550a:	4628      	mov	r0, r5
 800550c:	f001 f82e 	bl	800656c <__sinit>
 8005510:	4b23      	ldr	r3, [pc, #140]	; (80055a0 <_puts_r+0xac>)
 8005512:	429c      	cmp	r4, r3
 8005514:	d117      	bne.n	8005546 <_puts_r+0x52>
 8005516:	686c      	ldr	r4, [r5, #4]
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	071b      	lsls	r3, r3, #28
 800551c:	d51d      	bpl.n	800555a <_puts_r+0x66>
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	b1db      	cbz	r3, 800555a <_puts_r+0x66>
 8005522:	3e01      	subs	r6, #1
 8005524:	68a3      	ldr	r3, [r4, #8]
 8005526:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800552a:	3b01      	subs	r3, #1
 800552c:	60a3      	str	r3, [r4, #8]
 800552e:	b9e9      	cbnz	r1, 800556c <_puts_r+0x78>
 8005530:	2b00      	cmp	r3, #0
 8005532:	da2e      	bge.n	8005592 <_puts_r+0x9e>
 8005534:	4622      	mov	r2, r4
 8005536:	210a      	movs	r1, #10
 8005538:	4628      	mov	r0, r5
 800553a:	f000 f86b 	bl	8005614 <__swbuf_r>
 800553e:	3001      	adds	r0, #1
 8005540:	d011      	beq.n	8005566 <_puts_r+0x72>
 8005542:	200a      	movs	r0, #10
 8005544:	bd70      	pop	{r4, r5, r6, pc}
 8005546:	4b17      	ldr	r3, [pc, #92]	; (80055a4 <_puts_r+0xb0>)
 8005548:	429c      	cmp	r4, r3
 800554a:	d101      	bne.n	8005550 <_puts_r+0x5c>
 800554c:	68ac      	ldr	r4, [r5, #8]
 800554e:	e7e3      	b.n	8005518 <_puts_r+0x24>
 8005550:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <_puts_r+0xb4>)
 8005552:	429c      	cmp	r4, r3
 8005554:	bf08      	it	eq
 8005556:	68ec      	ldreq	r4, [r5, #12]
 8005558:	e7de      	b.n	8005518 <_puts_r+0x24>
 800555a:	4621      	mov	r1, r4
 800555c:	4628      	mov	r0, r5
 800555e:	f000 f8ab 	bl	80056b8 <__swsetup_r>
 8005562:	2800      	cmp	r0, #0
 8005564:	d0dd      	beq.n	8005522 <_puts_r+0x2e>
 8005566:	f04f 30ff 	mov.w	r0, #4294967295
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	2b00      	cmp	r3, #0
 800556e:	da04      	bge.n	800557a <_puts_r+0x86>
 8005570:	69a2      	ldr	r2, [r4, #24]
 8005572:	4293      	cmp	r3, r2
 8005574:	db06      	blt.n	8005584 <_puts_r+0x90>
 8005576:	290a      	cmp	r1, #10
 8005578:	d004      	beq.n	8005584 <_puts_r+0x90>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	6022      	str	r2, [r4, #0]
 8005580:	7019      	strb	r1, [r3, #0]
 8005582:	e7cf      	b.n	8005524 <_puts_r+0x30>
 8005584:	4622      	mov	r2, r4
 8005586:	4628      	mov	r0, r5
 8005588:	f000 f844 	bl	8005614 <__swbuf_r>
 800558c:	3001      	adds	r0, #1
 800558e:	d1c9      	bne.n	8005524 <_puts_r+0x30>
 8005590:	e7e9      	b.n	8005566 <_puts_r+0x72>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	200a      	movs	r0, #10
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	6022      	str	r2, [r4, #0]
 800559a:	7018      	strb	r0, [r3, #0]
 800559c:	bd70      	pop	{r4, r5, r6, pc}
 800559e:	bf00      	nop
 80055a0:	080096cc 	.word	0x080096cc
 80055a4:	080096ec 	.word	0x080096ec
 80055a8:	080096ac 	.word	0x080096ac

080055ac <puts>:
 80055ac:	4b02      	ldr	r3, [pc, #8]	; (80055b8 <puts+0xc>)
 80055ae:	4601      	mov	r1, r0
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	f7ff bf9f 	b.w	80054f4 <_puts_r>
 80055b6:	bf00      	nop
 80055b8:	20000054 	.word	0x20000054

080055bc <siprintf>:
 80055bc:	b40e      	push	{r1, r2, r3}
 80055be:	b500      	push	{lr}
 80055c0:	b09c      	sub	sp, #112	; 0x70
 80055c2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80055c6:	ab1d      	add	r3, sp, #116	; 0x74
 80055c8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80055cc:	9002      	str	r0, [sp, #8]
 80055ce:	9006      	str	r0, [sp, #24]
 80055d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055d4:	480a      	ldr	r0, [pc, #40]	; (8005600 <siprintf+0x44>)
 80055d6:	9104      	str	r1, [sp, #16]
 80055d8:	9107      	str	r1, [sp, #28]
 80055da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80055de:	f853 2b04 	ldr.w	r2, [r3], #4
 80055e2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80055e6:	6800      	ldr	r0, [r0, #0]
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	a902      	add	r1, sp, #8
 80055ec:	f001 fcb0 	bl	8006f50 <_svfiprintf_r>
 80055f0:	9b02      	ldr	r3, [sp, #8]
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	b01c      	add	sp, #112	; 0x70
 80055f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055fc:	b003      	add	sp, #12
 80055fe:	4770      	bx	lr
 8005600:	20000054 	.word	0x20000054

08005604 <strcpy>:
 8005604:	4603      	mov	r3, r0
 8005606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800560a:	f803 2b01 	strb.w	r2, [r3], #1
 800560e:	2a00      	cmp	r2, #0
 8005610:	d1f9      	bne.n	8005606 <strcpy+0x2>
 8005612:	4770      	bx	lr

08005614 <__swbuf_r>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	460e      	mov	r6, r1
 8005618:	4614      	mov	r4, r2
 800561a:	4605      	mov	r5, r0
 800561c:	b118      	cbz	r0, 8005626 <__swbuf_r+0x12>
 800561e:	6983      	ldr	r3, [r0, #24]
 8005620:	b90b      	cbnz	r3, 8005626 <__swbuf_r+0x12>
 8005622:	f000 ffa3 	bl	800656c <__sinit>
 8005626:	4b21      	ldr	r3, [pc, #132]	; (80056ac <__swbuf_r+0x98>)
 8005628:	429c      	cmp	r4, r3
 800562a:	d12a      	bne.n	8005682 <__swbuf_r+0x6e>
 800562c:	686c      	ldr	r4, [r5, #4]
 800562e:	69a3      	ldr	r3, [r4, #24]
 8005630:	60a3      	str	r3, [r4, #8]
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	071a      	lsls	r2, r3, #28
 8005636:	d52e      	bpl.n	8005696 <__swbuf_r+0x82>
 8005638:	6923      	ldr	r3, [r4, #16]
 800563a:	b363      	cbz	r3, 8005696 <__swbuf_r+0x82>
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	6820      	ldr	r0, [r4, #0]
 8005640:	1ac0      	subs	r0, r0, r3
 8005642:	6963      	ldr	r3, [r4, #20]
 8005644:	b2f6      	uxtb	r6, r6
 8005646:	4298      	cmp	r0, r3
 8005648:	4637      	mov	r7, r6
 800564a:	db04      	blt.n	8005656 <__swbuf_r+0x42>
 800564c:	4621      	mov	r1, r4
 800564e:	4628      	mov	r0, r5
 8005650:	f000 ff22 	bl	8006498 <_fflush_r>
 8005654:	bb28      	cbnz	r0, 80056a2 <__swbuf_r+0x8e>
 8005656:	68a3      	ldr	r3, [r4, #8]
 8005658:	3b01      	subs	r3, #1
 800565a:	60a3      	str	r3, [r4, #8]
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	6022      	str	r2, [r4, #0]
 8005662:	701e      	strb	r6, [r3, #0]
 8005664:	6963      	ldr	r3, [r4, #20]
 8005666:	3001      	adds	r0, #1
 8005668:	4298      	cmp	r0, r3
 800566a:	d004      	beq.n	8005676 <__swbuf_r+0x62>
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	07db      	lsls	r3, r3, #31
 8005670:	d519      	bpl.n	80056a6 <__swbuf_r+0x92>
 8005672:	2e0a      	cmp	r6, #10
 8005674:	d117      	bne.n	80056a6 <__swbuf_r+0x92>
 8005676:	4621      	mov	r1, r4
 8005678:	4628      	mov	r0, r5
 800567a:	f000 ff0d 	bl	8006498 <_fflush_r>
 800567e:	b190      	cbz	r0, 80056a6 <__swbuf_r+0x92>
 8005680:	e00f      	b.n	80056a2 <__swbuf_r+0x8e>
 8005682:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <__swbuf_r+0x9c>)
 8005684:	429c      	cmp	r4, r3
 8005686:	d101      	bne.n	800568c <__swbuf_r+0x78>
 8005688:	68ac      	ldr	r4, [r5, #8]
 800568a:	e7d0      	b.n	800562e <__swbuf_r+0x1a>
 800568c:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <__swbuf_r+0xa0>)
 800568e:	429c      	cmp	r4, r3
 8005690:	bf08      	it	eq
 8005692:	68ec      	ldreq	r4, [r5, #12]
 8005694:	e7cb      	b.n	800562e <__swbuf_r+0x1a>
 8005696:	4621      	mov	r1, r4
 8005698:	4628      	mov	r0, r5
 800569a:	f000 f80d 	bl	80056b8 <__swsetup_r>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d0cc      	beq.n	800563c <__swbuf_r+0x28>
 80056a2:	f04f 37ff 	mov.w	r7, #4294967295
 80056a6:	4638      	mov	r0, r7
 80056a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056aa:	bf00      	nop
 80056ac:	080096cc 	.word	0x080096cc
 80056b0:	080096ec 	.word	0x080096ec
 80056b4:	080096ac 	.word	0x080096ac

080056b8 <__swsetup_r>:
 80056b8:	4b32      	ldr	r3, [pc, #200]	; (8005784 <__swsetup_r+0xcc>)
 80056ba:	b570      	push	{r4, r5, r6, lr}
 80056bc:	681d      	ldr	r5, [r3, #0]
 80056be:	4606      	mov	r6, r0
 80056c0:	460c      	mov	r4, r1
 80056c2:	b125      	cbz	r5, 80056ce <__swsetup_r+0x16>
 80056c4:	69ab      	ldr	r3, [r5, #24]
 80056c6:	b913      	cbnz	r3, 80056ce <__swsetup_r+0x16>
 80056c8:	4628      	mov	r0, r5
 80056ca:	f000 ff4f 	bl	800656c <__sinit>
 80056ce:	4b2e      	ldr	r3, [pc, #184]	; (8005788 <__swsetup_r+0xd0>)
 80056d0:	429c      	cmp	r4, r3
 80056d2:	d10f      	bne.n	80056f4 <__swsetup_r+0x3c>
 80056d4:	686c      	ldr	r4, [r5, #4]
 80056d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056da:	b29a      	uxth	r2, r3
 80056dc:	0715      	lsls	r5, r2, #28
 80056de:	d42c      	bmi.n	800573a <__swsetup_r+0x82>
 80056e0:	06d0      	lsls	r0, r2, #27
 80056e2:	d411      	bmi.n	8005708 <__swsetup_r+0x50>
 80056e4:	2209      	movs	r2, #9
 80056e6:	6032      	str	r2, [r6, #0]
 80056e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ec:	81a3      	strh	r3, [r4, #12]
 80056ee:	f04f 30ff 	mov.w	r0, #4294967295
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	4b25      	ldr	r3, [pc, #148]	; (800578c <__swsetup_r+0xd4>)
 80056f6:	429c      	cmp	r4, r3
 80056f8:	d101      	bne.n	80056fe <__swsetup_r+0x46>
 80056fa:	68ac      	ldr	r4, [r5, #8]
 80056fc:	e7eb      	b.n	80056d6 <__swsetup_r+0x1e>
 80056fe:	4b24      	ldr	r3, [pc, #144]	; (8005790 <__swsetup_r+0xd8>)
 8005700:	429c      	cmp	r4, r3
 8005702:	bf08      	it	eq
 8005704:	68ec      	ldreq	r4, [r5, #12]
 8005706:	e7e6      	b.n	80056d6 <__swsetup_r+0x1e>
 8005708:	0751      	lsls	r1, r2, #29
 800570a:	d512      	bpl.n	8005732 <__swsetup_r+0x7a>
 800570c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800570e:	b141      	cbz	r1, 8005722 <__swsetup_r+0x6a>
 8005710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005714:	4299      	cmp	r1, r3
 8005716:	d002      	beq.n	800571e <__swsetup_r+0x66>
 8005718:	4630      	mov	r0, r6
 800571a:	f001 fb11 	bl	8006d40 <_free_r>
 800571e:	2300      	movs	r3, #0
 8005720:	6363      	str	r3, [r4, #52]	; 0x34
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005728:	81a3      	strh	r3, [r4, #12]
 800572a:	2300      	movs	r3, #0
 800572c:	6063      	str	r3, [r4, #4]
 800572e:	6923      	ldr	r3, [r4, #16]
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	f043 0308 	orr.w	r3, r3, #8
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	6923      	ldr	r3, [r4, #16]
 800573c:	b94b      	cbnz	r3, 8005752 <__swsetup_r+0x9a>
 800573e:	89a3      	ldrh	r3, [r4, #12]
 8005740:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005748:	d003      	beq.n	8005752 <__swsetup_r+0x9a>
 800574a:	4621      	mov	r1, r4
 800574c:	4630      	mov	r0, r6
 800574e:	f000 ffc9 	bl	80066e4 <__smakebuf_r>
 8005752:	89a2      	ldrh	r2, [r4, #12]
 8005754:	f012 0301 	ands.w	r3, r2, #1
 8005758:	d00c      	beq.n	8005774 <__swsetup_r+0xbc>
 800575a:	2300      	movs	r3, #0
 800575c:	60a3      	str	r3, [r4, #8]
 800575e:	6963      	ldr	r3, [r4, #20]
 8005760:	425b      	negs	r3, r3
 8005762:	61a3      	str	r3, [r4, #24]
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	b953      	cbnz	r3, 800577e <__swsetup_r+0xc6>
 8005768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800576c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005770:	d1ba      	bne.n	80056e8 <__swsetup_r+0x30>
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	0792      	lsls	r2, r2, #30
 8005776:	bf58      	it	pl
 8005778:	6963      	ldrpl	r3, [r4, #20]
 800577a:	60a3      	str	r3, [r4, #8]
 800577c:	e7f2      	b.n	8005764 <__swsetup_r+0xac>
 800577e:	2000      	movs	r0, #0
 8005780:	e7f7      	b.n	8005772 <__swsetup_r+0xba>
 8005782:	bf00      	nop
 8005784:	20000054 	.word	0x20000054
 8005788:	080096cc 	.word	0x080096cc
 800578c:	080096ec 	.word	0x080096ec
 8005790:	080096ac 	.word	0x080096ac

08005794 <quorem>:
 8005794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	6903      	ldr	r3, [r0, #16]
 800579a:	690c      	ldr	r4, [r1, #16]
 800579c:	429c      	cmp	r4, r3
 800579e:	4680      	mov	r8, r0
 80057a0:	f300 8082 	bgt.w	80058a8 <quorem+0x114>
 80057a4:	3c01      	subs	r4, #1
 80057a6:	f101 0714 	add.w	r7, r1, #20
 80057aa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80057ae:	f100 0614 	add.w	r6, r0, #20
 80057b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80057b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80057ba:	eb06 030e 	add.w	r3, r6, lr
 80057be:	3501      	adds	r5, #1
 80057c0:	eb07 090e 	add.w	r9, r7, lr
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	fbb0 f5f5 	udiv	r5, r0, r5
 80057ca:	b395      	cbz	r5, 8005832 <quorem+0x9e>
 80057cc:	f04f 0a00 	mov.w	sl, #0
 80057d0:	4638      	mov	r0, r7
 80057d2:	46b4      	mov	ip, r6
 80057d4:	46d3      	mov	fp, sl
 80057d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80057da:	b293      	uxth	r3, r2
 80057dc:	fb05 a303 	mla	r3, r5, r3, sl
 80057e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	ebab 0303 	sub.w	r3, fp, r3
 80057ea:	0c12      	lsrs	r2, r2, #16
 80057ec:	f8bc b000 	ldrh.w	fp, [ip]
 80057f0:	fb05 a202 	mla	r2, r5, r2, sl
 80057f4:	fa13 f38b 	uxtah	r3, r3, fp
 80057f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80057fc:	fa1f fb82 	uxth.w	fp, r2
 8005800:	f8dc 2000 	ldr.w	r2, [ip]
 8005804:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005808:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800580c:	b29b      	uxth	r3, r3
 800580e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005812:	4581      	cmp	r9, r0
 8005814:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005818:	f84c 3b04 	str.w	r3, [ip], #4
 800581c:	d2db      	bcs.n	80057d6 <quorem+0x42>
 800581e:	f856 300e 	ldr.w	r3, [r6, lr]
 8005822:	b933      	cbnz	r3, 8005832 <quorem+0x9e>
 8005824:	9b01      	ldr	r3, [sp, #4]
 8005826:	3b04      	subs	r3, #4
 8005828:	429e      	cmp	r6, r3
 800582a:	461a      	mov	r2, r3
 800582c:	d330      	bcc.n	8005890 <quorem+0xfc>
 800582e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005832:	4640      	mov	r0, r8
 8005834:	f001 f9af 	bl	8006b96 <__mcmp>
 8005838:	2800      	cmp	r0, #0
 800583a:	db25      	blt.n	8005888 <quorem+0xf4>
 800583c:	3501      	adds	r5, #1
 800583e:	4630      	mov	r0, r6
 8005840:	f04f 0e00 	mov.w	lr, #0
 8005844:	f857 2b04 	ldr.w	r2, [r7], #4
 8005848:	f8d0 c000 	ldr.w	ip, [r0]
 800584c:	b293      	uxth	r3, r2
 800584e:	ebae 0303 	sub.w	r3, lr, r3
 8005852:	0c12      	lsrs	r2, r2, #16
 8005854:	fa13 f38c 	uxtah	r3, r3, ip
 8005858:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800585c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005860:	b29b      	uxth	r3, r3
 8005862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005866:	45b9      	cmp	r9, r7
 8005868:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800586c:	f840 3b04 	str.w	r3, [r0], #4
 8005870:	d2e8      	bcs.n	8005844 <quorem+0xb0>
 8005872:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005876:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800587a:	b92a      	cbnz	r2, 8005888 <quorem+0xf4>
 800587c:	3b04      	subs	r3, #4
 800587e:	429e      	cmp	r6, r3
 8005880:	461a      	mov	r2, r3
 8005882:	d30b      	bcc.n	800589c <quorem+0x108>
 8005884:	f8c8 4010 	str.w	r4, [r8, #16]
 8005888:	4628      	mov	r0, r5
 800588a:	b003      	add	sp, #12
 800588c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	3b04      	subs	r3, #4
 8005894:	2a00      	cmp	r2, #0
 8005896:	d1ca      	bne.n	800582e <quorem+0x9a>
 8005898:	3c01      	subs	r4, #1
 800589a:	e7c5      	b.n	8005828 <quorem+0x94>
 800589c:	6812      	ldr	r2, [r2, #0]
 800589e:	3b04      	subs	r3, #4
 80058a0:	2a00      	cmp	r2, #0
 80058a2:	d1ef      	bne.n	8005884 <quorem+0xf0>
 80058a4:	3c01      	subs	r4, #1
 80058a6:	e7ea      	b.n	800587e <quorem+0xea>
 80058a8:	2000      	movs	r0, #0
 80058aa:	e7ee      	b.n	800588a <quorem+0xf6>
 80058ac:	0000      	movs	r0, r0
	...

080058b0 <_dtoa_r>:
 80058b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b4:	ec57 6b10 	vmov	r6, r7, d0
 80058b8:	b095      	sub	sp, #84	; 0x54
 80058ba:	e9cd 6700 	strd	r6, r7, [sp]
 80058be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058c0:	9107      	str	r1, [sp, #28]
 80058c2:	4605      	mov	r5, r0
 80058c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80058c6:	9310      	str	r3, [sp, #64]	; 0x40
 80058c8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80058ca:	b93e      	cbnz	r6, 80058dc <_dtoa_r+0x2c>
 80058cc:	2010      	movs	r0, #16
 80058ce:	f000 ff49 	bl	8006764 <malloc>
 80058d2:	6268      	str	r0, [r5, #36]	; 0x24
 80058d4:	6046      	str	r6, [r0, #4]
 80058d6:	6086      	str	r6, [r0, #8]
 80058d8:	6006      	str	r6, [r0, #0]
 80058da:	60c6      	str	r6, [r0, #12]
 80058dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058de:	6819      	ldr	r1, [r3, #0]
 80058e0:	b151      	cbz	r1, 80058f8 <_dtoa_r+0x48>
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	604a      	str	r2, [r1, #4]
 80058e6:	2301      	movs	r3, #1
 80058e8:	4093      	lsls	r3, r2
 80058ea:	608b      	str	r3, [r1, #8]
 80058ec:	4628      	mov	r0, r5
 80058ee:	f000 ff7d 	bl	80067ec <_Bfree>
 80058f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	9b01      	ldr	r3, [sp, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	bfbf      	itttt	lt
 80058fe:	2301      	movlt	r3, #1
 8005900:	6023      	strlt	r3, [r4, #0]
 8005902:	9b01      	ldrlt	r3, [sp, #4]
 8005904:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005908:	bfb2      	itee	lt
 800590a:	9301      	strlt	r3, [sp, #4]
 800590c:	2300      	movge	r3, #0
 800590e:	6023      	strge	r3, [r4, #0]
 8005910:	9c01      	ldr	r4, [sp, #4]
 8005912:	4b73      	ldr	r3, [pc, #460]	; (8005ae0 <_dtoa_r+0x230>)
 8005914:	43a3      	bics	r3, r4
 8005916:	d118      	bne.n	800594a <_dtoa_r+0x9a>
 8005918:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800591a:	f242 730f 	movw	r3, #9999	; 0x270f
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	9b00      	ldr	r3, [sp, #0]
 8005922:	b923      	cbnz	r3, 800592e <_dtoa_r+0x7e>
 8005924:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005928:	2c00      	cmp	r4, #0
 800592a:	f000 8518 	beq.w	800635e <_dtoa_r+0xaae>
 800592e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005930:	b93b      	cbnz	r3, 8005942 <_dtoa_r+0x92>
 8005932:	4b6c      	ldr	r3, [pc, #432]	; (8005ae4 <_dtoa_r+0x234>)
 8005934:	e01d      	b.n	8005972 <_dtoa_r+0xc2>
 8005936:	4b6c      	ldr	r3, [pc, #432]	; (8005ae8 <_dtoa_r+0x238>)
 8005938:	9304      	str	r3, [sp, #16]
 800593a:	3308      	adds	r3, #8
 800593c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	e2a6      	b.n	8005e90 <_dtoa_r+0x5e0>
 8005942:	4b68      	ldr	r3, [pc, #416]	; (8005ae4 <_dtoa_r+0x234>)
 8005944:	9304      	str	r3, [sp, #16]
 8005946:	3303      	adds	r3, #3
 8005948:	e7f8      	b.n	800593c <_dtoa_r+0x8c>
 800594a:	ed9d 7b00 	vldr	d7, [sp]
 800594e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005956:	ed8d 7b04 	vstr	d7, [sp, #16]
 800595a:	d10c      	bne.n	8005976 <_dtoa_r+0xc6>
 800595c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800595e:	2301      	movs	r3, #1
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 84f7 	beq.w	8006358 <_dtoa_r+0xaa8>
 800596a:	4b60      	ldr	r3, [pc, #384]	; (8005aec <_dtoa_r+0x23c>)
 800596c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	3b01      	subs	r3, #1
 8005972:	9304      	str	r3, [sp, #16]
 8005974:	e28c      	b.n	8005e90 <_dtoa_r+0x5e0>
 8005976:	a913      	add	r1, sp, #76	; 0x4c
 8005978:	aa12      	add	r2, sp, #72	; 0x48
 800597a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800597e:	4628      	mov	r0, r5
 8005980:	f001 f981 	bl	8006c86 <__d2b>
 8005984:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8005988:	9003      	str	r0, [sp, #12]
 800598a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800598c:	2900      	cmp	r1, #0
 800598e:	d046      	beq.n	8005a1e <_dtoa_r+0x16e>
 8005990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005994:	f3c3 0413 	ubfx	r4, r3, #0, #20
 8005998:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800599c:	f2a1 3aff 	subw	sl, r1, #1023	; 0x3ff
 80059a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80059a4:	2100      	movs	r1, #0
 80059a6:	ee07 aa90 	vmov	s15, sl
 80059aa:	ec43 2b16 	vmov	d6, r2, r3
 80059ae:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80059b2:	ed9f 4b45 	vldr	d4, [pc, #276]	; 8005ac8 <_dtoa_r+0x218>
 80059b6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80059ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80059be:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8005ad0 <_dtoa_r+0x220>
 80059c2:	eea7 6b04 	vfma.f64	d6, d7, d4
 80059c6:	eeb0 7b46 	vmov.f64	d7, d6
 80059ca:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005ad8 <_dtoa_r+0x228>
 80059ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 80059d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80059d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80059da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059de:	9111      	str	r1, [sp, #68]	; 0x44
 80059e0:	ee16 ba90 	vmov	fp, s13
 80059e4:	d508      	bpl.n	80059f8 <_dtoa_r+0x148>
 80059e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80059ea:	eeb4 7b46 	vcmp.f64	d7, d6
 80059ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f2:	bf18      	it	ne
 80059f4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80059f8:	f1bb 0f16 	cmp.w	fp, #22
 80059fc:	d831      	bhi.n	8005a62 <_dtoa_r+0x1b2>
 80059fe:	4b3c      	ldr	r3, [pc, #240]	; (8005af0 <_dtoa_r+0x240>)
 8005a00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a04:	ed93 7b00 	vldr	d7, [r3]
 8005a08:	ed9d 6b00 	vldr	d6, [sp]
 8005a0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a14:	dd01      	ble.n	8005a1a <_dtoa_r+0x16a>
 8005a16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e022      	b.n	8005a64 <_dtoa_r+0x1b4>
 8005a1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005a20:	4401      	add	r1, r0
 8005a22:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	dd15      	ble.n	8005a56 <_dtoa_r+0x1a6>
 8005a2a:	9e00      	ldr	r6, [sp, #0]
 8005a2c:	f201 4212 	addw	r2, r1, #1042	; 0x412
 8005a30:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005a34:	fa26 f202 	lsr.w	r2, r6, r2
 8005a38:	fa04 f303 	lsl.w	r3, r4, r3
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	ee07 2a90 	vmov	s15, r2
 8005a42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005a46:	f101 3aff 	add.w	sl, r1, #4294967295
 8005a4a:	ec53 2b17 	vmov	r2, r3, d7
 8005a4e:	2101      	movs	r1, #1
 8005a50:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
 8005a54:	e7a7      	b.n	80059a6 <_dtoa_r+0xf6>
 8005a56:	f1c3 0220 	rsb	r2, r3, #32
 8005a5a:	9b00      	ldr	r3, [sp, #0]
 8005a5c:	fa03 f202 	lsl.w	r2, r3, r2
 8005a60:	e7ed      	b.n	8005a3e <_dtoa_r+0x18e>
 8005a62:	2301      	movs	r3, #1
 8005a64:	eba0 0a0a 	sub.w	sl, r0, sl
 8005a68:	f1ba 0701 	subs.w	r7, sl, #1
 8005a6c:	bf46      	itte	mi
 8005a6e:	f1ca 0a01 	rsbmi	sl, sl, #1
 8005a72:	2700      	movmi	r7, #0
 8005a74:	f04f 0a00 	movpl.w	sl, #0
 8005a78:	f1bb 0f00 	cmp.w	fp, #0
 8005a7c:	930d      	str	r3, [sp, #52]	; 0x34
 8005a7e:	bfbc      	itt	lt
 8005a80:	2300      	movlt	r3, #0
 8005a82:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005a84:	9b07      	ldr	r3, [sp, #28]
 8005a86:	bfa3      	ittte	ge
 8005a88:	f8cd b030 	strge.w	fp, [sp, #48]	; 0x30
 8005a8c:	445f      	addge	r7, fp
 8005a8e:	f04f 0800 	movge.w	r8, #0
 8005a92:	ebaa 0a0b 	sublt.w	sl, sl, fp
 8005a96:	bfb8      	it	lt
 8005a98:	f1cb 0800 	rsblt	r8, fp, #0
 8005a9c:	2b09      	cmp	r3, #9
 8005a9e:	f200 80f8 	bhi.w	8005c92 <_dtoa_r+0x3e2>
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	bfc4      	itt	gt
 8005aa6:	3b04      	subgt	r3, #4
 8005aa8:	9307      	strgt	r3, [sp, #28]
 8005aaa:	9b07      	ldr	r3, [sp, #28]
 8005aac:	f1a3 0302 	sub.w	r3, r3, #2
 8005ab0:	bfcc      	ite	gt
 8005ab2:	2400      	movgt	r4, #0
 8005ab4:	2401      	movle	r4, #1
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	f200 80f7 	bhi.w	8005caa <_dtoa_r+0x3fa>
 8005abc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ac0:	00e700e5 	.word	0x00e700e5
 8005ac4:	00d9001a 	.word	0x00d9001a
 8005ac8:	636f4361 	.word	0x636f4361
 8005acc:	3fd287a7 	.word	0x3fd287a7
 8005ad0:	8b60c8b3 	.word	0x8b60c8b3
 8005ad4:	3fc68a28 	.word	0x3fc68a28
 8005ad8:	509f79fb 	.word	0x509f79fb
 8005adc:	3fd34413 	.word	0x3fd34413
 8005ae0:	7ff00000 	.word	0x7ff00000
 8005ae4:	080096a8 	.word	0x080096a8
 8005ae8:	0800969f 	.word	0x0800969f
 8005aec:	0800967c 	.word	0x0800967c
 8005af0:	08009738 	.word	0x08009738
 8005af4:	2301      	movs	r3, #1
 8005af6:	930a      	str	r3, [sp, #40]	; 0x28
 8005af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f340 80d8 	ble.w	8005cb0 <_dtoa_r+0x400>
 8005b00:	9306      	str	r3, [sp, #24]
 8005b02:	4699      	mov	r9, r3
 8005b04:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8005b06:	2200      	movs	r2, #0
 8005b08:	6072      	str	r2, [r6, #4]
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	f101 0214 	add.w	r2, r1, #20
 8005b10:	429a      	cmp	r2, r3
 8005b12:	f240 80d2 	bls.w	8005cba <_dtoa_r+0x40a>
 8005b16:	6871      	ldr	r1, [r6, #4]
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f000 fe33 	bl	8006784 <_Balloc>
 8005b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b20:	6030      	str	r0, [r6, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	9304      	str	r3, [sp, #16]
 8005b26:	f1b9 0f0e 	cmp.w	r9, #14
 8005b2a:	d875      	bhi.n	8005c18 <_dtoa_r+0x368>
 8005b2c:	2c00      	cmp	r4, #0
 8005b2e:	d073      	beq.n	8005c18 <_dtoa_r+0x368>
 8005b30:	ed9d 7b00 	vldr	d7, [sp]
 8005b34:	f1bb 0f00 	cmp.w	fp, #0
 8005b38:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005b3c:	f340 80ce 	ble.w	8005cdc <_dtoa_r+0x42c>
 8005b40:	4ab5      	ldr	r2, [pc, #724]	; (8005e18 <_dtoa_r+0x568>)
 8005b42:	f00b 030f 	and.w	r3, fp, #15
 8005b46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b4a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8005b4e:	ed93 7b00 	vldr	d7, [r3]
 8005b52:	06d3      	lsls	r3, r2, #27
 8005b54:	f140 80b6 	bpl.w	8005cc4 <_dtoa_r+0x414>
 8005b58:	4bb0      	ldr	r3, [pc, #704]	; (8005e1c <_dtoa_r+0x56c>)
 8005b5a:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
 8005b5e:	ed93 6b08 	vldr	d6, [r3, #32]
 8005b62:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8005b66:	ed8d 5b00 	vstr	d5, [sp]
 8005b6a:	f002 020f 	and.w	r2, r2, #15
 8005b6e:	2303      	movs	r3, #3
 8005b70:	49aa      	ldr	r1, [pc, #680]	; (8005e1c <_dtoa_r+0x56c>)
 8005b72:	2a00      	cmp	r2, #0
 8005b74:	f040 80a8 	bne.w	8005cc8 <_dtoa_r+0x418>
 8005b78:	ed9d 5b00 	vldr	d5, [sp]
 8005b7c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005b80:	ed8d 6b00 	vstr	d6, [sp]
 8005b84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b86:	2a00      	cmp	r2, #0
 8005b88:	f000 80da 	beq.w	8005d40 <_dtoa_r+0x490>
 8005b8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005b90:	ed9d 7b00 	vldr	d7, [sp]
 8005b94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9c:	f140 80d0 	bpl.w	8005d40 <_dtoa_r+0x490>
 8005ba0:	f1b9 0f00 	cmp.w	r9, #0
 8005ba4:	f000 80cc 	beq.w	8005d40 <_dtoa_r+0x490>
 8005ba8:	9a06      	ldr	r2, [sp, #24]
 8005baa:	2a00      	cmp	r2, #0
 8005bac:	dd30      	ble.n	8005c10 <_dtoa_r+0x360>
 8005bae:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005bb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005bb6:	ed8d 7b00 	vstr	d7, [sp]
 8005bba:	9c06      	ldr	r4, [sp, #24]
 8005bbc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	ed9d 6b00 	vldr	d6, [sp]
 8005bc6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005bd2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005bd6:	ed8d 5b00 	vstr	d5, [sp]
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005be0:	9301      	str	r3, [sp, #4]
 8005be2:	2c00      	cmp	r4, #0
 8005be4:	f040 80af 	bne.w	8005d46 <_dtoa_r+0x496>
 8005be8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005bec:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005bf0:	ed9d 7b00 	vldr	d7, [sp]
 8005bf4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfc:	f300 8300 	bgt.w	8006200 <_dtoa_r+0x950>
 8005c00:	eeb1 7b47 	vneg.f64	d7, d7
 8005c04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0c:	f100 82f6 	bmi.w	80061fc <_dtoa_r+0x94c>
 8005c10:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8005c14:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005c18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f2c0 8158 	blt.w	8005ed0 <_dtoa_r+0x620>
 8005c20:	f1bb 0f0e 	cmp.w	fp, #14
 8005c24:	f300 8154 	bgt.w	8005ed0 <_dtoa_r+0x620>
 8005c28:	4b7b      	ldr	r3, [pc, #492]	; (8005e18 <_dtoa_r+0x568>)
 8005c2a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c2e:	ed93 6b00 	vldr	d6, [r3]
 8005c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f280 80f3 	bge.w	8005e20 <_dtoa_r+0x570>
 8005c3a:	f1b9 0f00 	cmp.w	r9, #0
 8005c3e:	f300 80ef 	bgt.w	8005e20 <_dtoa_r+0x570>
 8005c42:	f040 82da 	bne.w	80061fa <_dtoa_r+0x94a>
 8005c46:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005c4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005c4e:	ed9d 7b00 	vldr	d7, [sp]
 8005c52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5a:	464c      	mov	r4, r9
 8005c5c:	464e      	mov	r6, r9
 8005c5e:	f280 82ac 	bge.w	80061ba <_dtoa_r+0x90a>
 8005c62:	9b04      	ldr	r3, [sp, #16]
 8005c64:	9904      	ldr	r1, [sp, #16]
 8005c66:	2231      	movs	r2, #49	; 0x31
 8005c68:	3301      	adds	r3, #1
 8005c6a:	700a      	strb	r2, [r1, #0]
 8005c6c:	f10b 0b01 	add.w	fp, fp, #1
 8005c70:	e2a7      	b.n	80061c2 <_dtoa_r+0x912>
 8005c72:	2301      	movs	r3, #1
 8005c74:	930a      	str	r3, [sp, #40]	; 0x28
 8005c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c78:	445b      	add	r3, fp
 8005c7a:	f103 0901 	add.w	r9, r3, #1
 8005c7e:	9306      	str	r3, [sp, #24]
 8005c80:	464b      	mov	r3, r9
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	bfb8      	it	lt
 8005c86:	2301      	movlt	r3, #1
 8005c88:	e73c      	b.n	8005b04 <_dtoa_r+0x254>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e733      	b.n	8005af6 <_dtoa_r+0x246>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e7f0      	b.n	8005c74 <_dtoa_r+0x3c4>
 8005c92:	2401      	movs	r4, #1
 8005c94:	2300      	movs	r3, #0
 8005c96:	9307      	str	r3, [sp, #28]
 8005c98:	940a      	str	r4, [sp, #40]	; 0x28
 8005c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9e:	9306      	str	r3, [sp, #24]
 8005ca0:	4699      	mov	r9, r3
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2312      	movs	r3, #18
 8005ca6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ca8:	e72c      	b.n	8005b04 <_dtoa_r+0x254>
 8005caa:	2301      	movs	r3, #1
 8005cac:	930a      	str	r3, [sp, #40]	; 0x28
 8005cae:	e7f4      	b.n	8005c9a <_dtoa_r+0x3ea>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	9306      	str	r3, [sp, #24]
 8005cb4:	4699      	mov	r9, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	e7f5      	b.n	8005ca6 <_dtoa_r+0x3f6>
 8005cba:	6872      	ldr	r2, [r6, #4]
 8005cbc:	3201      	adds	r2, #1
 8005cbe:	6072      	str	r2, [r6, #4]
 8005cc0:	0049      	lsls	r1, r1, #1
 8005cc2:	e723      	b.n	8005b0c <_dtoa_r+0x25c>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e753      	b.n	8005b70 <_dtoa_r+0x2c0>
 8005cc8:	07d6      	lsls	r6, r2, #31
 8005cca:	d504      	bpl.n	8005cd6 <_dtoa_r+0x426>
 8005ccc:	ed91 6b00 	vldr	d6, [r1]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005cd6:	1052      	asrs	r2, r2, #1
 8005cd8:	3108      	adds	r1, #8
 8005cda:	e74a      	b.n	8005b72 <_dtoa_r+0x2c2>
 8005cdc:	d02e      	beq.n	8005d3c <_dtoa_r+0x48c>
 8005cde:	f1cb 0200 	rsb	r2, fp, #0
 8005ce2:	4b4d      	ldr	r3, [pc, #308]	; (8005e18 <_dtoa_r+0x568>)
 8005ce4:	f002 010f 	and.w	r1, r2, #15
 8005ce8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005cec:	ed93 7b00 	vldr	d7, [r3]
 8005cf0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8005cf4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005cf8:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005cfc:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8005d00:	4946      	ldr	r1, [pc, #280]	; (8005e1c <_dtoa_r+0x56c>)
 8005d02:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005d06:	1112      	asrs	r2, r2, #4
 8005d08:	2000      	movs	r0, #0
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	b93a      	cbnz	r2, 8005d1e <_dtoa_r+0x46e>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f43f af38 	beq.w	8005b84 <_dtoa_r+0x2d4>
 8005d14:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8005d18:	e88d 0006 	stmia.w	sp, {r1, r2}
 8005d1c:	e732      	b.n	8005b84 <_dtoa_r+0x2d4>
 8005d1e:	07d4      	lsls	r4, r2, #31
 8005d20:	d509      	bpl.n	8005d36 <_dtoa_r+0x486>
 8005d22:	ed9d 6b08 	vldr	d6, [sp, #32]
 8005d26:	ed91 7b00 	vldr	d7, [r1]
 8005d2a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005d32:	3301      	adds	r3, #1
 8005d34:	2001      	movs	r0, #1
 8005d36:	1052      	asrs	r2, r2, #1
 8005d38:	3108      	adds	r1, #8
 8005d3a:	e7e7      	b.n	8005d0c <_dtoa_r+0x45c>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e721      	b.n	8005b84 <_dtoa_r+0x2d4>
 8005d40:	465a      	mov	r2, fp
 8005d42:	464c      	mov	r4, r9
 8005d44:	e73d      	b.n	8005bc2 <_dtoa_r+0x312>
 8005d46:	9804      	ldr	r0, [sp, #16]
 8005d48:	4b33      	ldr	r3, [pc, #204]	; (8005e18 <_dtoa_r+0x568>)
 8005d4a:	1e61      	subs	r1, r4, #1
 8005d4c:	4404      	add	r4, r0
 8005d4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d50:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005d54:	ed93 5b00 	vldr	d5, [r3]
 8005d58:	b358      	cbz	r0, 8005db2 <_dtoa_r+0x502>
 8005d5a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8005d5e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005d62:	ed9d 5b00 	vldr	d5, [sp]
 8005d66:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005d6a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005d6e:	9b04      	ldr	r3, [sp, #16]
 8005d70:	ee37 7b45 	vsub.f64	d7, d7, d5
 8005d74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005d78:	ee14 1a90 	vmov	r1, s9
 8005d7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005d80:	3130      	adds	r1, #48	; 0x30
 8005d82:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005d86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d92:	d439      	bmi.n	8005e08 <_dtoa_r+0x558>
 8005d94:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005d98:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da0:	d47b      	bmi.n	8005e9a <_dtoa_r+0x5ea>
 8005da2:	42a3      	cmp	r3, r4
 8005da4:	f43f af34 	beq.w	8005c10 <_dtoa_r+0x360>
 8005da8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005dac:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005db0:	e7e0      	b.n	8005d74 <_dtoa_r+0x4c4>
 8005db2:	ed9d 7b00 	vldr	d7, [sp]
 8005db6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005dba:	9b04      	ldr	r3, [sp, #16]
 8005dbc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005dc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005dc4:	ee14 1a90 	vmov	r1, s9
 8005dc8:	3130      	adds	r1, #48	; 0x30
 8005dca:	f803 1b01 	strb.w	r1, [r3], #1
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
 8005dd4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005dd8:	d11a      	bne.n	8005e10 <_dtoa_r+0x560>
 8005dda:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8005dde:	ee35 4b07 	vadd.f64	d4, d5, d7
 8005de2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dea:	dc56      	bgt.n	8005e9a <_dtoa_r+0x5ea>
 8005dec:	ee37 5b45 	vsub.f64	d5, d7, d5
 8005df0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df8:	f57f af0a 	bpl.w	8005c10 <_dtoa_r+0x360>
 8005dfc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005e00:	2930      	cmp	r1, #48	; 0x30
 8005e02:	f103 30ff 	add.w	r0, r3, #4294967295
 8005e06:	d001      	beq.n	8005e0c <_dtoa_r+0x55c>
 8005e08:	4693      	mov	fp, r2
 8005e0a:	e031      	b.n	8005e70 <_dtoa_r+0x5c0>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	e7f5      	b.n	8005dfc <_dtoa_r+0x54c>
 8005e10:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005e14:	e7d4      	b.n	8005dc0 <_dtoa_r+0x510>
 8005e16:	bf00      	nop
 8005e18:	08009738 	.word	0x08009738
 8005e1c:	08009710 	.word	0x08009710
 8005e20:	ed9d 7b00 	vldr	d7, [sp]
 8005e24:	eeb1 3b46 	vneg.f64	d3, d6
 8005e28:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005e2c:	9b04      	ldr	r3, [sp, #16]
 8005e2e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005e32:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005e36:	ee15 2a10 	vmov	r2, s10
 8005e3a:	3230      	adds	r2, #48	; 0x30
 8005e3c:	f803 2b01 	strb.w	r2, [r3], #1
 8005e40:	9a04      	ldr	r2, [sp, #16]
 8005e42:	1a9a      	subs	r2, r3, r2
 8005e44:	4591      	cmp	r9, r2
 8005e46:	eeb8 2bc5 	vcvt.f64.s32	d2, s10
 8005e4a:	eea3 7b02 	vfma.f64	d7, d3, d2
 8005e4e:	d137      	bne.n	8005ec0 <_dtoa_r+0x610>
 8005e50:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005e54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5c:	d41c      	bmi.n	8005e98 <_dtoa_r+0x5e8>
 8005e5e:	eeb4 6b47 	vcmp.f64	d6, d7
 8005e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e66:	d103      	bne.n	8005e70 <_dtoa_r+0x5c0>
 8005e68:	ee15 2a10 	vmov	r2, s10
 8005e6c:	07d2      	lsls	r2, r2, #31
 8005e6e:	d413      	bmi.n	8005e98 <_dtoa_r+0x5e8>
 8005e70:	9903      	ldr	r1, [sp, #12]
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	4628      	mov	r0, r5
 8005e76:	f000 fcb9 	bl	80067ec <_Bfree>
 8005e7a:	9b00      	ldr	r3, [sp, #0]
 8005e7c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	f10b 0201 	add.w	r2, fp, #1
 8005e86:	600a      	str	r2, [r1, #0]
 8005e88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	f47f ad57 	bne.w	800593e <_dtoa_r+0x8e>
 8005e90:	9804      	ldr	r0, [sp, #16]
 8005e92:	b015      	add	sp, #84	; 0x54
 8005e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e98:	465a      	mov	r2, fp
 8005e9a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8005e9e:	2839      	cmp	r0, #57	; 0x39
 8005ea0:	f103 31ff 	add.w	r1, r3, #4294967295
 8005ea4:	d106      	bne.n	8005eb4 <_dtoa_r+0x604>
 8005ea6:	9804      	ldr	r0, [sp, #16]
 8005ea8:	4288      	cmp	r0, r1
 8005eaa:	d107      	bne.n	8005ebc <_dtoa_r+0x60c>
 8005eac:	2130      	movs	r1, #48	; 0x30
 8005eae:	7001      	strb	r1, [r0, #0]
 8005eb0:	3201      	adds	r2, #1
 8005eb2:	4601      	mov	r1, r0
 8005eb4:	7808      	ldrb	r0, [r1, #0]
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	7008      	strb	r0, [r1, #0]
 8005eba:	e7a5      	b.n	8005e08 <_dtoa_r+0x558>
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	e7ec      	b.n	8005e9a <_dtoa_r+0x5ea>
 8005ec0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005ec4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ecc:	d1af      	bne.n	8005e2e <_dtoa_r+0x57e>
 8005ece:	e7cf      	b.n	8005e70 <_dtoa_r+0x5c0>
 8005ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	f000 8129 	beq.w	800612a <_dtoa_r+0x87a>
 8005ed8:	9a07      	ldr	r2, [sp, #28]
 8005eda:	2a01      	cmp	r2, #1
 8005edc:	f300 810b 	bgt.w	80060f6 <_dtoa_r+0x846>
 8005ee0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	f000 8103 	beq.w	80060ee <_dtoa_r+0x83e>
 8005ee8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005eec:	4644      	mov	r4, r8
 8005eee:	f8cd a020 	str.w	sl, [sp, #32]
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	449a      	add	sl, r3
 8005ef8:	441f      	add	r7, r3
 8005efa:	f000 fd17 	bl	800692c <__i2b>
 8005efe:	4606      	mov	r6, r0
 8005f00:	9b08      	ldr	r3, [sp, #32]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	dd0a      	ble.n	8005f1c <_dtoa_r+0x66c>
 8005f06:	2f00      	cmp	r7, #0
 8005f08:	dd08      	ble.n	8005f1c <_dtoa_r+0x66c>
 8005f0a:	42bb      	cmp	r3, r7
 8005f0c:	9a08      	ldr	r2, [sp, #32]
 8005f0e:	bfa8      	it	ge
 8005f10:	463b      	movge	r3, r7
 8005f12:	1ad2      	subs	r2, r2, r3
 8005f14:	ebaa 0a03 	sub.w	sl, sl, r3
 8005f18:	9208      	str	r2, [sp, #32]
 8005f1a:	1aff      	subs	r7, r7, r3
 8005f1c:	f1b8 0f00 	cmp.w	r8, #0
 8005f20:	d01f      	beq.n	8005f62 <_dtoa_r+0x6b2>
 8005f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8105 	beq.w	8006134 <_dtoa_r+0x884>
 8005f2a:	2c00      	cmp	r4, #0
 8005f2c:	dd11      	ble.n	8005f52 <_dtoa_r+0x6a2>
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4622      	mov	r2, r4
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 fd90 	bl	8006a58 <__pow5mult>
 8005f38:	9a03      	ldr	r2, [sp, #12]
 8005f3a:	4601      	mov	r1, r0
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 fcfd 	bl	800693e <__multiply>
 8005f44:	9903      	ldr	r1, [sp, #12]
 8005f46:	900e      	str	r0, [sp, #56]	; 0x38
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f000 fc4f 	bl	80067ec <_Bfree>
 8005f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f50:	9303      	str	r3, [sp, #12]
 8005f52:	ebb8 0204 	subs.w	r2, r8, r4
 8005f56:	d004      	beq.n	8005f62 <_dtoa_r+0x6b2>
 8005f58:	9903      	ldr	r1, [sp, #12]
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f000 fd7c 	bl	8006a58 <__pow5mult>
 8005f60:	9003      	str	r0, [sp, #12]
 8005f62:	2101      	movs	r1, #1
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 fce1 	bl	800692c <__i2b>
 8005f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	4604      	mov	r4, r0
 8005f70:	f340 80e2 	ble.w	8006138 <_dtoa_r+0x888>
 8005f74:	461a      	mov	r2, r3
 8005f76:	4601      	mov	r1, r0
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f000 fd6d 	bl	8006a58 <__pow5mult>
 8005f7e:	9b07      	ldr	r3, [sp, #28]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	4604      	mov	r4, r0
 8005f84:	f340 80db 	ble.w	800613e <_dtoa_r+0x88e>
 8005f88:	f04f 0800 	mov.w	r8, #0
 8005f8c:	6923      	ldr	r3, [r4, #16]
 8005f8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f92:	6918      	ldr	r0, [r3, #16]
 8005f94:	f000 fc7c 	bl	8006890 <__hi0bits>
 8005f98:	f1c0 0020 	rsb	r0, r0, #32
 8005f9c:	4438      	add	r0, r7
 8005f9e:	f010 001f 	ands.w	r0, r0, #31
 8005fa2:	f000 80f1 	beq.w	8006188 <_dtoa_r+0x8d8>
 8005fa6:	f1c0 0320 	rsb	r3, r0, #32
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	f340 80e3 	ble.w	8006176 <_dtoa_r+0x8c6>
 8005fb0:	9b08      	ldr	r3, [sp, #32]
 8005fb2:	f1c0 001c 	rsb	r0, r0, #28
 8005fb6:	4403      	add	r3, r0
 8005fb8:	4482      	add	sl, r0
 8005fba:	9308      	str	r3, [sp, #32]
 8005fbc:	4407      	add	r7, r0
 8005fbe:	f1ba 0f00 	cmp.w	sl, #0
 8005fc2:	dd05      	ble.n	8005fd0 <_dtoa_r+0x720>
 8005fc4:	4652      	mov	r2, sl
 8005fc6:	9903      	ldr	r1, [sp, #12]
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f000 fd93 	bl	8006af4 <__lshift>
 8005fce:	9003      	str	r0, [sp, #12]
 8005fd0:	2f00      	cmp	r7, #0
 8005fd2:	dd05      	ble.n	8005fe0 <_dtoa_r+0x730>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	463a      	mov	r2, r7
 8005fd8:	4628      	mov	r0, r5
 8005fda:	f000 fd8b 	bl	8006af4 <__lshift>
 8005fde:	4604      	mov	r4, r0
 8005fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 80d2 	beq.w	800618c <_dtoa_r+0x8dc>
 8005fe8:	4621      	mov	r1, r4
 8005fea:	9803      	ldr	r0, [sp, #12]
 8005fec:	f000 fdd3 	bl	8006b96 <__mcmp>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	f280 80cb 	bge.w	800618c <_dtoa_r+0x8dc>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	220a      	movs	r2, #10
 8005ffa:	9903      	ldr	r1, [sp, #12]
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f000 fc0c 	bl	800681a <__multadd>
 8006002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006004:	9003      	str	r0, [sp, #12]
 8006006:	f10b 3bff 	add.w	fp, fp, #4294967295
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 81ae 	beq.w	800636c <_dtoa_r+0xabc>
 8006010:	2300      	movs	r3, #0
 8006012:	4631      	mov	r1, r6
 8006014:	220a      	movs	r2, #10
 8006016:	4628      	mov	r0, r5
 8006018:	f000 fbff 	bl	800681a <__multadd>
 800601c:	9b06      	ldr	r3, [sp, #24]
 800601e:	2b00      	cmp	r3, #0
 8006020:	4606      	mov	r6, r0
 8006022:	dc03      	bgt.n	800602c <_dtoa_r+0x77c>
 8006024:	9b07      	ldr	r3, [sp, #28]
 8006026:	2b02      	cmp	r3, #2
 8006028:	f300 80b8 	bgt.w	800619c <_dtoa_r+0x8ec>
 800602c:	9b08      	ldr	r3, [sp, #32]
 800602e:	2b00      	cmp	r3, #0
 8006030:	dd05      	ble.n	800603e <_dtoa_r+0x78e>
 8006032:	4631      	mov	r1, r6
 8006034:	461a      	mov	r2, r3
 8006036:	4628      	mov	r0, r5
 8006038:	f000 fd5c 	bl	8006af4 <__lshift>
 800603c:	4606      	mov	r6, r0
 800603e:	f1b8 0f00 	cmp.w	r8, #0
 8006042:	f000 8115 	beq.w	8006270 <_dtoa_r+0x9c0>
 8006046:	6871      	ldr	r1, [r6, #4]
 8006048:	4628      	mov	r0, r5
 800604a:	f000 fb9b 	bl	8006784 <_Balloc>
 800604e:	6932      	ldr	r2, [r6, #16]
 8006050:	3202      	adds	r2, #2
 8006052:	4607      	mov	r7, r0
 8006054:	0092      	lsls	r2, r2, #2
 8006056:	f106 010c 	add.w	r1, r6, #12
 800605a:	300c      	adds	r0, #12
 800605c:	f7fe fdda 	bl	8004c14 <memcpy>
 8006060:	2201      	movs	r2, #1
 8006062:	4639      	mov	r1, r7
 8006064:	4628      	mov	r0, r5
 8006066:	f000 fd45 	bl	8006af4 <__lshift>
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	9f04      	ldr	r7, [sp, #16]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	46b1      	mov	r9, r6
 8006074:	9308      	str	r3, [sp, #32]
 8006076:	4606      	mov	r6, r0
 8006078:	4621      	mov	r1, r4
 800607a:	9803      	ldr	r0, [sp, #12]
 800607c:	f7ff fb8a 	bl	8005794 <quorem>
 8006080:	4649      	mov	r1, r9
 8006082:	4682      	mov	sl, r0
 8006084:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006088:	9803      	ldr	r0, [sp, #12]
 800608a:	f000 fd84 	bl	8006b96 <__mcmp>
 800608e:	4632      	mov	r2, r6
 8006090:	9000      	str	r0, [sp, #0]
 8006092:	4621      	mov	r1, r4
 8006094:	4628      	mov	r0, r5
 8006096:	f000 fd98 	bl	8006bca <__mdiff>
 800609a:	68c3      	ldr	r3, [r0, #12]
 800609c:	4602      	mov	r2, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 80e8 	bne.w	8006274 <_dtoa_r+0x9c4>
 80060a4:	4601      	mov	r1, r0
 80060a6:	900a      	str	r0, [sp, #40]	; 0x28
 80060a8:	9803      	ldr	r0, [sp, #12]
 80060aa:	f000 fd74 	bl	8006b96 <__mcmp>
 80060ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060b0:	4603      	mov	r3, r0
 80060b2:	4611      	mov	r1, r2
 80060b4:	4628      	mov	r0, r5
 80060b6:	930a      	str	r3, [sp, #40]	; 0x28
 80060b8:	f000 fb98 	bl	80067ec <_Bfree>
 80060bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f040 80da 	bne.w	8006278 <_dtoa_r+0x9c8>
 80060c4:	9a07      	ldr	r2, [sp, #28]
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	f040 80d6 	bne.w	8006278 <_dtoa_r+0x9c8>
 80060cc:	9a08      	ldr	r2, [sp, #32]
 80060ce:	2a00      	cmp	r2, #0
 80060d0:	f040 80d2 	bne.w	8006278 <_dtoa_r+0x9c8>
 80060d4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80060d8:	f000 80ee 	beq.w	80062b8 <_dtoa_r+0xa08>
 80060dc:	9b00      	ldr	r3, [sp, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dd01      	ble.n	80060e6 <_dtoa_r+0x836>
 80060e2:	f10a 0831 	add.w	r8, sl, #49	; 0x31
 80060e6:	1c7b      	adds	r3, r7, #1
 80060e8:	f887 8000 	strb.w	r8, [r7]
 80060ec:	e06b      	b.n	80061c6 <_dtoa_r+0x916>
 80060ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060f4:	e6fa      	b.n	8005eec <_dtoa_r+0x63c>
 80060f6:	f109 34ff 	add.w	r4, r9, #4294967295
 80060fa:	45a0      	cmp	r8, r4
 80060fc:	bfbf      	itttt	lt
 80060fe:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006100:	eba4 0808 	sublt.w	r8, r4, r8
 8006104:	4443      	addlt	r3, r8
 8006106:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006108:	bfb6      	itet	lt
 800610a:	46a0      	movlt	r8, r4
 800610c:	eba8 0404 	subge.w	r4, r8, r4
 8006110:	2400      	movlt	r4, #0
 8006112:	f1b9 0f00 	cmp.w	r9, #0
 8006116:	bfbb      	ittet	lt
 8006118:	ebaa 0309 	sublt.w	r3, sl, r9
 800611c:	9308      	strlt	r3, [sp, #32]
 800611e:	f8cd a020 	strge.w	sl, [sp, #32]
 8006122:	2300      	movlt	r3, #0
 8006124:	bfa8      	it	ge
 8006126:	464b      	movge	r3, r9
 8006128:	e6e3      	b.n	8005ef2 <_dtoa_r+0x642>
 800612a:	4644      	mov	r4, r8
 800612c:	f8cd a020 	str.w	sl, [sp, #32]
 8006130:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006132:	e6e5      	b.n	8005f00 <_dtoa_r+0x650>
 8006134:	4642      	mov	r2, r8
 8006136:	e70f      	b.n	8005f58 <_dtoa_r+0x6a8>
 8006138:	9b07      	ldr	r3, [sp, #28]
 800613a:	2b01      	cmp	r3, #1
 800613c:	dc16      	bgt.n	800616c <_dtoa_r+0x8bc>
 800613e:	9b00      	ldr	r3, [sp, #0]
 8006140:	b9a3      	cbnz	r3, 800616c <_dtoa_r+0x8bc>
 8006142:	9b01      	ldr	r3, [sp, #4]
 8006144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006148:	b983      	cbnz	r3, 800616c <_dtoa_r+0x8bc>
 800614a:	9b01      	ldr	r3, [sp, #4]
 800614c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006150:	0d1b      	lsrs	r3, r3, #20
 8006152:	051b      	lsls	r3, r3, #20
 8006154:	b16b      	cbz	r3, 8006172 <_dtoa_r+0x8c2>
 8006156:	f10a 0a01 	add.w	sl, sl, #1
 800615a:	3701      	adds	r7, #1
 800615c:	f04f 0801 	mov.w	r8, #1
 8006160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006162:	2b00      	cmp	r3, #0
 8006164:	f47f af12 	bne.w	8005f8c <_dtoa_r+0x6dc>
 8006168:	2001      	movs	r0, #1
 800616a:	e717      	b.n	8005f9c <_dtoa_r+0x6ec>
 800616c:	f04f 0800 	mov.w	r8, #0
 8006170:	e7f6      	b.n	8006160 <_dtoa_r+0x8b0>
 8006172:	4698      	mov	r8, r3
 8006174:	e7f4      	b.n	8006160 <_dtoa_r+0x8b0>
 8006176:	f43f af22 	beq.w	8005fbe <_dtoa_r+0x70e>
 800617a:	9a08      	ldr	r2, [sp, #32]
 800617c:	331c      	adds	r3, #28
 800617e:	441a      	add	r2, r3
 8006180:	449a      	add	sl, r3
 8006182:	9208      	str	r2, [sp, #32]
 8006184:	441f      	add	r7, r3
 8006186:	e71a      	b.n	8005fbe <_dtoa_r+0x70e>
 8006188:	4603      	mov	r3, r0
 800618a:	e7f6      	b.n	800617a <_dtoa_r+0x8ca>
 800618c:	f1b9 0f00 	cmp.w	r9, #0
 8006190:	dc39      	bgt.n	8006206 <_dtoa_r+0x956>
 8006192:	9b07      	ldr	r3, [sp, #28]
 8006194:	2b02      	cmp	r3, #2
 8006196:	dd36      	ble.n	8006206 <_dtoa_r+0x956>
 8006198:	f8cd 9018 	str.w	r9, [sp, #24]
 800619c:	9b06      	ldr	r3, [sp, #24]
 800619e:	b963      	cbnz	r3, 80061ba <_dtoa_r+0x90a>
 80061a0:	4621      	mov	r1, r4
 80061a2:	2205      	movs	r2, #5
 80061a4:	4628      	mov	r0, r5
 80061a6:	f000 fb38 	bl	800681a <__multadd>
 80061aa:	4601      	mov	r1, r0
 80061ac:	4604      	mov	r4, r0
 80061ae:	9803      	ldr	r0, [sp, #12]
 80061b0:	f000 fcf1 	bl	8006b96 <__mcmp>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	f73f ad54 	bgt.w	8005c62 <_dtoa_r+0x3b2>
 80061ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061bc:	ea6f 0b03 	mvn.w	fp, r3
 80061c0:	9b04      	ldr	r3, [sp, #16]
 80061c2:	f04f 0900 	mov.w	r9, #0
 80061c6:	4621      	mov	r1, r4
 80061c8:	4628      	mov	r0, r5
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	f000 fb0e 	bl	80067ec <_Bfree>
 80061d0:	9b00      	ldr	r3, [sp, #0]
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	f43f ae4c 	beq.w	8005e70 <_dtoa_r+0x5c0>
 80061d8:	f1b9 0f00 	cmp.w	r9, #0
 80061dc:	d006      	beq.n	80061ec <_dtoa_r+0x93c>
 80061de:	45b1      	cmp	r9, r6
 80061e0:	d004      	beq.n	80061ec <_dtoa_r+0x93c>
 80061e2:	4649      	mov	r1, r9
 80061e4:	4628      	mov	r0, r5
 80061e6:	f000 fb01 	bl	80067ec <_Bfree>
 80061ea:	9b00      	ldr	r3, [sp, #0]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	4631      	mov	r1, r6
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 fafb 	bl	80067ec <_Bfree>
 80061f6:	9b00      	ldr	r3, [sp, #0]
 80061f8:	e63a      	b.n	8005e70 <_dtoa_r+0x5c0>
 80061fa:	2400      	movs	r4, #0
 80061fc:	4626      	mov	r6, r4
 80061fe:	e7dc      	b.n	80061ba <_dtoa_r+0x90a>
 8006200:	4693      	mov	fp, r2
 8006202:	4626      	mov	r6, r4
 8006204:	e52d      	b.n	8005c62 <_dtoa_r+0x3b2>
 8006206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006208:	f8cd 9018 	str.w	r9, [sp, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f47f af0d 	bne.w	800602c <_dtoa_r+0x77c>
 8006212:	9f04      	ldr	r7, [sp, #16]
 8006214:	9803      	ldr	r0, [sp, #12]
 8006216:	4621      	mov	r1, r4
 8006218:	f7ff fabc 	bl	8005794 <quorem>
 800621c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006220:	f807 8b01 	strb.w	r8, [r7], #1
 8006224:	9b04      	ldr	r3, [sp, #16]
 8006226:	9a06      	ldr	r2, [sp, #24]
 8006228:	1afb      	subs	r3, r7, r3
 800622a:	429a      	cmp	r2, r3
 800622c:	f300 8081 	bgt.w	8006332 <_dtoa_r+0xa82>
 8006230:	9b04      	ldr	r3, [sp, #16]
 8006232:	2a01      	cmp	r2, #1
 8006234:	bfac      	ite	ge
 8006236:	189b      	addge	r3, r3, r2
 8006238:	3301      	addlt	r3, #1
 800623a:	461f      	mov	r7, r3
 800623c:	f04f 0900 	mov.w	r9, #0
 8006240:	2201      	movs	r2, #1
 8006242:	9903      	ldr	r1, [sp, #12]
 8006244:	4628      	mov	r0, r5
 8006246:	f000 fc55 	bl	8006af4 <__lshift>
 800624a:	4621      	mov	r1, r4
 800624c:	9003      	str	r0, [sp, #12]
 800624e:	f000 fca2 	bl	8006b96 <__mcmp>
 8006252:	2800      	cmp	r0, #0
 8006254:	dc33      	bgt.n	80062be <_dtoa_r+0xa0e>
 8006256:	d102      	bne.n	800625e <_dtoa_r+0x9ae>
 8006258:	f018 0f01 	tst.w	r8, #1
 800625c:	d12f      	bne.n	80062be <_dtoa_r+0xa0e>
 800625e:	463b      	mov	r3, r7
 8006260:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006264:	2a30      	cmp	r2, #48	; 0x30
 8006266:	f103 31ff 	add.w	r1, r3, #4294967295
 800626a:	d1ac      	bne.n	80061c6 <_dtoa_r+0x916>
 800626c:	460b      	mov	r3, r1
 800626e:	e7f7      	b.n	8006260 <_dtoa_r+0x9b0>
 8006270:	4630      	mov	r0, r6
 8006272:	e6fa      	b.n	800606a <_dtoa_r+0x7ba>
 8006274:	2301      	movs	r3, #1
 8006276:	e71c      	b.n	80060b2 <_dtoa_r+0x802>
 8006278:	9a00      	ldr	r2, [sp, #0]
 800627a:	2a00      	cmp	r2, #0
 800627c:	db04      	blt.n	8006288 <_dtoa_r+0x9d8>
 800627e:	d127      	bne.n	80062d0 <_dtoa_r+0xa20>
 8006280:	9a07      	ldr	r2, [sp, #28]
 8006282:	bb2a      	cbnz	r2, 80062d0 <_dtoa_r+0xa20>
 8006284:	9a08      	ldr	r2, [sp, #32]
 8006286:	bb1a      	cbnz	r2, 80062d0 <_dtoa_r+0xa20>
 8006288:	2b00      	cmp	r3, #0
 800628a:	f77f af2c 	ble.w	80060e6 <_dtoa_r+0x836>
 800628e:	2201      	movs	r2, #1
 8006290:	9903      	ldr	r1, [sp, #12]
 8006292:	4628      	mov	r0, r5
 8006294:	f000 fc2e 	bl	8006af4 <__lshift>
 8006298:	4621      	mov	r1, r4
 800629a:	9003      	str	r0, [sp, #12]
 800629c:	f000 fc7b 	bl	8006b96 <__mcmp>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	dc05      	bgt.n	80062b0 <_dtoa_r+0xa00>
 80062a4:	f47f af1f 	bne.w	80060e6 <_dtoa_r+0x836>
 80062a8:	f018 0f01 	tst.w	r8, #1
 80062ac:	f43f af1b 	beq.w	80060e6 <_dtoa_r+0x836>
 80062b0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80062b4:	f47f af15 	bne.w	80060e2 <_dtoa_r+0x832>
 80062b8:	2339      	movs	r3, #57	; 0x39
 80062ba:	703b      	strb	r3, [r7, #0]
 80062bc:	3701      	adds	r7, #1
 80062be:	463b      	mov	r3, r7
 80062c0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80062c4:	2a39      	cmp	r2, #57	; 0x39
 80062c6:	f103 31ff 	add.w	r1, r3, #4294967295
 80062ca:	d03a      	beq.n	8006342 <_dtoa_r+0xa92>
 80062cc:	3201      	adds	r2, #1
 80062ce:	e03f      	b.n	8006350 <_dtoa_r+0xaa0>
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f107 0301 	add.w	r3, r7, #1
 80062d6:	dd05      	ble.n	80062e4 <_dtoa_r+0xa34>
 80062d8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80062dc:	d0ec      	beq.n	80062b8 <_dtoa_r+0xa08>
 80062de:	f108 0801 	add.w	r8, r8, #1
 80062e2:	e701      	b.n	80060e8 <_dtoa_r+0x838>
 80062e4:	461f      	mov	r7, r3
 80062e6:	f803 8c01 	strb.w	r8, [r3, #-1]
 80062ea:	9b04      	ldr	r3, [sp, #16]
 80062ec:	9a06      	ldr	r2, [sp, #24]
 80062ee:	1afb      	subs	r3, r7, r3
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d0a5      	beq.n	8006240 <_dtoa_r+0x990>
 80062f4:	2300      	movs	r3, #0
 80062f6:	220a      	movs	r2, #10
 80062f8:	9903      	ldr	r1, [sp, #12]
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 fa8d 	bl	800681a <__multadd>
 8006300:	45b1      	cmp	r9, r6
 8006302:	9003      	str	r0, [sp, #12]
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	f04f 020a 	mov.w	r2, #10
 800630c:	4649      	mov	r1, r9
 800630e:	4628      	mov	r0, r5
 8006310:	d104      	bne.n	800631c <_dtoa_r+0xa6c>
 8006312:	f000 fa82 	bl	800681a <__multadd>
 8006316:	4681      	mov	r9, r0
 8006318:	4606      	mov	r6, r0
 800631a:	e6ad      	b.n	8006078 <_dtoa_r+0x7c8>
 800631c:	f000 fa7d 	bl	800681a <__multadd>
 8006320:	4631      	mov	r1, r6
 8006322:	4681      	mov	r9, r0
 8006324:	2300      	movs	r3, #0
 8006326:	220a      	movs	r2, #10
 8006328:	4628      	mov	r0, r5
 800632a:	f000 fa76 	bl	800681a <__multadd>
 800632e:	4606      	mov	r6, r0
 8006330:	e6a2      	b.n	8006078 <_dtoa_r+0x7c8>
 8006332:	2300      	movs	r3, #0
 8006334:	220a      	movs	r2, #10
 8006336:	9903      	ldr	r1, [sp, #12]
 8006338:	4628      	mov	r0, r5
 800633a:	f000 fa6e 	bl	800681a <__multadd>
 800633e:	9003      	str	r0, [sp, #12]
 8006340:	e768      	b.n	8006214 <_dtoa_r+0x964>
 8006342:	9a04      	ldr	r2, [sp, #16]
 8006344:	428a      	cmp	r2, r1
 8006346:	d105      	bne.n	8006354 <_dtoa_r+0xaa4>
 8006348:	9904      	ldr	r1, [sp, #16]
 800634a:	f10b 0b01 	add.w	fp, fp, #1
 800634e:	2231      	movs	r2, #49	; 0x31
 8006350:	700a      	strb	r2, [r1, #0]
 8006352:	e738      	b.n	80061c6 <_dtoa_r+0x916>
 8006354:	460b      	mov	r3, r1
 8006356:	e7b3      	b.n	80062c0 <_dtoa_r+0xa10>
 8006358:	4b09      	ldr	r3, [pc, #36]	; (8006380 <_dtoa_r+0xad0>)
 800635a:	f7ff bb0a 	b.w	8005972 <_dtoa_r+0xc2>
 800635e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006360:	2b00      	cmp	r3, #0
 8006362:	f47f aae8 	bne.w	8005936 <_dtoa_r+0x86>
 8006366:	4b07      	ldr	r3, [pc, #28]	; (8006384 <_dtoa_r+0xad4>)
 8006368:	f7ff bb03 	b.w	8005972 <_dtoa_r+0xc2>
 800636c:	9b06      	ldr	r3, [sp, #24]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f73f af4f 	bgt.w	8006212 <_dtoa_r+0x962>
 8006374:	9b07      	ldr	r3, [sp, #28]
 8006376:	2b02      	cmp	r3, #2
 8006378:	f77f af4b 	ble.w	8006212 <_dtoa_r+0x962>
 800637c:	e70e      	b.n	800619c <_dtoa_r+0x8ec>
 800637e:	bf00      	nop
 8006380:	0800967b 	.word	0x0800967b
 8006384:	0800969f 	.word	0x0800969f

08006388 <__sflush_r>:
 8006388:	898a      	ldrh	r2, [r1, #12]
 800638a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800638e:	4605      	mov	r5, r0
 8006390:	0710      	lsls	r0, r2, #28
 8006392:	460c      	mov	r4, r1
 8006394:	d45a      	bmi.n	800644c <__sflush_r+0xc4>
 8006396:	684b      	ldr	r3, [r1, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	dc05      	bgt.n	80063a8 <__sflush_r+0x20>
 800639c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	dc02      	bgt.n	80063a8 <__sflush_r+0x20>
 80063a2:	2000      	movs	r0, #0
 80063a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063aa:	2e00      	cmp	r6, #0
 80063ac:	d0f9      	beq.n	80063a2 <__sflush_r+0x1a>
 80063ae:	2300      	movs	r3, #0
 80063b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063b4:	682f      	ldr	r7, [r5, #0]
 80063b6:	602b      	str	r3, [r5, #0]
 80063b8:	d033      	beq.n	8006422 <__sflush_r+0x9a>
 80063ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	075a      	lsls	r2, r3, #29
 80063c0:	d505      	bpl.n	80063ce <__sflush_r+0x46>
 80063c2:	6863      	ldr	r3, [r4, #4]
 80063c4:	1ac0      	subs	r0, r0, r3
 80063c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063c8:	b10b      	cbz	r3, 80063ce <__sflush_r+0x46>
 80063ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063cc:	1ac0      	subs	r0, r0, r3
 80063ce:	2300      	movs	r3, #0
 80063d0:	4602      	mov	r2, r0
 80063d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063d4:	6a21      	ldr	r1, [r4, #32]
 80063d6:	4628      	mov	r0, r5
 80063d8:	47b0      	blx	r6
 80063da:	1c43      	adds	r3, r0, #1
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	d106      	bne.n	80063ee <__sflush_r+0x66>
 80063e0:	6829      	ldr	r1, [r5, #0]
 80063e2:	291d      	cmp	r1, #29
 80063e4:	d84b      	bhi.n	800647e <__sflush_r+0xf6>
 80063e6:	4a2b      	ldr	r2, [pc, #172]	; (8006494 <__sflush_r+0x10c>)
 80063e8:	40ca      	lsrs	r2, r1
 80063ea:	07d6      	lsls	r6, r2, #31
 80063ec:	d547      	bpl.n	800647e <__sflush_r+0xf6>
 80063ee:	2200      	movs	r2, #0
 80063f0:	6062      	str	r2, [r4, #4]
 80063f2:	04d9      	lsls	r1, r3, #19
 80063f4:	6922      	ldr	r2, [r4, #16]
 80063f6:	6022      	str	r2, [r4, #0]
 80063f8:	d504      	bpl.n	8006404 <__sflush_r+0x7c>
 80063fa:	1c42      	adds	r2, r0, #1
 80063fc:	d101      	bne.n	8006402 <__sflush_r+0x7a>
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	b903      	cbnz	r3, 8006404 <__sflush_r+0x7c>
 8006402:	6560      	str	r0, [r4, #84]	; 0x54
 8006404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006406:	602f      	str	r7, [r5, #0]
 8006408:	2900      	cmp	r1, #0
 800640a:	d0ca      	beq.n	80063a2 <__sflush_r+0x1a>
 800640c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006410:	4299      	cmp	r1, r3
 8006412:	d002      	beq.n	800641a <__sflush_r+0x92>
 8006414:	4628      	mov	r0, r5
 8006416:	f000 fc93 	bl	8006d40 <_free_r>
 800641a:	2000      	movs	r0, #0
 800641c:	6360      	str	r0, [r4, #52]	; 0x34
 800641e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006422:	6a21      	ldr	r1, [r4, #32]
 8006424:	2301      	movs	r3, #1
 8006426:	4628      	mov	r0, r5
 8006428:	47b0      	blx	r6
 800642a:	1c41      	adds	r1, r0, #1
 800642c:	d1c6      	bne.n	80063bc <__sflush_r+0x34>
 800642e:	682b      	ldr	r3, [r5, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0c3      	beq.n	80063bc <__sflush_r+0x34>
 8006434:	2b1d      	cmp	r3, #29
 8006436:	d001      	beq.n	800643c <__sflush_r+0xb4>
 8006438:	2b16      	cmp	r3, #22
 800643a:	d101      	bne.n	8006440 <__sflush_r+0xb8>
 800643c:	602f      	str	r7, [r5, #0]
 800643e:	e7b0      	b.n	80063a2 <__sflush_r+0x1a>
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006446:	81a3      	strh	r3, [r4, #12]
 8006448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800644c:	690f      	ldr	r7, [r1, #16]
 800644e:	2f00      	cmp	r7, #0
 8006450:	d0a7      	beq.n	80063a2 <__sflush_r+0x1a>
 8006452:	0793      	lsls	r3, r2, #30
 8006454:	680e      	ldr	r6, [r1, #0]
 8006456:	bf08      	it	eq
 8006458:	694b      	ldreq	r3, [r1, #20]
 800645a:	600f      	str	r7, [r1, #0]
 800645c:	bf18      	it	ne
 800645e:	2300      	movne	r3, #0
 8006460:	eba6 0807 	sub.w	r8, r6, r7
 8006464:	608b      	str	r3, [r1, #8]
 8006466:	f1b8 0f00 	cmp.w	r8, #0
 800646a:	dd9a      	ble.n	80063a2 <__sflush_r+0x1a>
 800646c:	4643      	mov	r3, r8
 800646e:	463a      	mov	r2, r7
 8006470:	6a21      	ldr	r1, [r4, #32]
 8006472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006474:	4628      	mov	r0, r5
 8006476:	47b0      	blx	r6
 8006478:	2800      	cmp	r0, #0
 800647a:	dc07      	bgt.n	800648c <__sflush_r+0x104>
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006482:	81a3      	strh	r3, [r4, #12]
 8006484:	f04f 30ff 	mov.w	r0, #4294967295
 8006488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800648c:	4407      	add	r7, r0
 800648e:	eba8 0800 	sub.w	r8, r8, r0
 8006492:	e7e8      	b.n	8006466 <__sflush_r+0xde>
 8006494:	20400001 	.word	0x20400001

08006498 <_fflush_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	690b      	ldr	r3, [r1, #16]
 800649c:	4605      	mov	r5, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	b1db      	cbz	r3, 80064da <_fflush_r+0x42>
 80064a2:	b118      	cbz	r0, 80064ac <_fflush_r+0x14>
 80064a4:	6983      	ldr	r3, [r0, #24]
 80064a6:	b90b      	cbnz	r3, 80064ac <_fflush_r+0x14>
 80064a8:	f000 f860 	bl	800656c <__sinit>
 80064ac:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <_fflush_r+0x48>)
 80064ae:	429c      	cmp	r4, r3
 80064b0:	d109      	bne.n	80064c6 <_fflush_r+0x2e>
 80064b2:	686c      	ldr	r4, [r5, #4]
 80064b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b8:	b17b      	cbz	r3, 80064da <_fflush_r+0x42>
 80064ba:	4621      	mov	r1, r4
 80064bc:	4628      	mov	r0, r5
 80064be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064c2:	f7ff bf61 	b.w	8006388 <__sflush_r>
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <_fflush_r+0x4c>)
 80064c8:	429c      	cmp	r4, r3
 80064ca:	d101      	bne.n	80064d0 <_fflush_r+0x38>
 80064cc:	68ac      	ldr	r4, [r5, #8]
 80064ce:	e7f1      	b.n	80064b4 <_fflush_r+0x1c>
 80064d0:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <_fflush_r+0x50>)
 80064d2:	429c      	cmp	r4, r3
 80064d4:	bf08      	it	eq
 80064d6:	68ec      	ldreq	r4, [r5, #12]
 80064d8:	e7ec      	b.n	80064b4 <_fflush_r+0x1c>
 80064da:	2000      	movs	r0, #0
 80064dc:	bd38      	pop	{r3, r4, r5, pc}
 80064de:	bf00      	nop
 80064e0:	080096cc 	.word	0x080096cc
 80064e4:	080096ec 	.word	0x080096ec
 80064e8:	080096ac 	.word	0x080096ac

080064ec <_cleanup_r>:
 80064ec:	4901      	ldr	r1, [pc, #4]	; (80064f4 <_cleanup_r+0x8>)
 80064ee:	f000 b8a9 	b.w	8006644 <_fwalk_reent>
 80064f2:	bf00      	nop
 80064f4:	08006499 	.word	0x08006499

080064f8 <std.isra.0>:
 80064f8:	2300      	movs	r3, #0
 80064fa:	b510      	push	{r4, lr}
 80064fc:	4604      	mov	r4, r0
 80064fe:	6003      	str	r3, [r0, #0]
 8006500:	6043      	str	r3, [r0, #4]
 8006502:	6083      	str	r3, [r0, #8]
 8006504:	8181      	strh	r1, [r0, #12]
 8006506:	6643      	str	r3, [r0, #100]	; 0x64
 8006508:	81c2      	strh	r2, [r0, #14]
 800650a:	6103      	str	r3, [r0, #16]
 800650c:	6143      	str	r3, [r0, #20]
 800650e:	6183      	str	r3, [r0, #24]
 8006510:	4619      	mov	r1, r3
 8006512:	2208      	movs	r2, #8
 8006514:	305c      	adds	r0, #92	; 0x5c
 8006516:	f000 f92d 	bl	8006774 <memset>
 800651a:	4b05      	ldr	r3, [pc, #20]	; (8006530 <std.isra.0+0x38>)
 800651c:	6263      	str	r3, [r4, #36]	; 0x24
 800651e:	4b05      	ldr	r3, [pc, #20]	; (8006534 <std.isra.0+0x3c>)
 8006520:	62a3      	str	r3, [r4, #40]	; 0x28
 8006522:	4b05      	ldr	r3, [pc, #20]	; (8006538 <std.isra.0+0x40>)
 8006524:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006526:	4b05      	ldr	r3, [pc, #20]	; (800653c <std.isra.0+0x44>)
 8006528:	6224      	str	r4, [r4, #32]
 800652a:	6323      	str	r3, [r4, #48]	; 0x30
 800652c:	bd10      	pop	{r4, pc}
 800652e:	bf00      	nop
 8006530:	080073d9 	.word	0x080073d9
 8006534:	080073fb 	.word	0x080073fb
 8006538:	08007433 	.word	0x08007433
 800653c:	08007457 	.word	0x08007457

08006540 <__sfmoreglue>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	1e4a      	subs	r2, r1, #1
 8006544:	2568      	movs	r5, #104	; 0x68
 8006546:	4355      	muls	r5, r2
 8006548:	460e      	mov	r6, r1
 800654a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800654e:	f000 fc45 	bl	8006ddc <_malloc_r>
 8006552:	4604      	mov	r4, r0
 8006554:	b140      	cbz	r0, 8006568 <__sfmoreglue+0x28>
 8006556:	2100      	movs	r1, #0
 8006558:	e880 0042 	stmia.w	r0, {r1, r6}
 800655c:	300c      	adds	r0, #12
 800655e:	60a0      	str	r0, [r4, #8]
 8006560:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006564:	f000 f906 	bl	8006774 <memset>
 8006568:	4620      	mov	r0, r4
 800656a:	bd70      	pop	{r4, r5, r6, pc}

0800656c <__sinit>:
 800656c:	6983      	ldr	r3, [r0, #24]
 800656e:	b510      	push	{r4, lr}
 8006570:	4604      	mov	r4, r0
 8006572:	bb33      	cbnz	r3, 80065c2 <__sinit+0x56>
 8006574:	6483      	str	r3, [r0, #72]	; 0x48
 8006576:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006578:	6503      	str	r3, [r0, #80]	; 0x50
 800657a:	4b12      	ldr	r3, [pc, #72]	; (80065c4 <__sinit+0x58>)
 800657c:	4a12      	ldr	r2, [pc, #72]	; (80065c8 <__sinit+0x5c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6282      	str	r2, [r0, #40]	; 0x28
 8006582:	4298      	cmp	r0, r3
 8006584:	bf04      	itt	eq
 8006586:	2301      	moveq	r3, #1
 8006588:	6183      	streq	r3, [r0, #24]
 800658a:	f000 f81f 	bl	80065cc <__sfp>
 800658e:	6060      	str	r0, [r4, #4]
 8006590:	4620      	mov	r0, r4
 8006592:	f000 f81b 	bl	80065cc <__sfp>
 8006596:	60a0      	str	r0, [r4, #8]
 8006598:	4620      	mov	r0, r4
 800659a:	f000 f817 	bl	80065cc <__sfp>
 800659e:	2200      	movs	r2, #0
 80065a0:	60e0      	str	r0, [r4, #12]
 80065a2:	2104      	movs	r1, #4
 80065a4:	6860      	ldr	r0, [r4, #4]
 80065a6:	f7ff ffa7 	bl	80064f8 <std.isra.0>
 80065aa:	2201      	movs	r2, #1
 80065ac:	2109      	movs	r1, #9
 80065ae:	68a0      	ldr	r0, [r4, #8]
 80065b0:	f7ff ffa2 	bl	80064f8 <std.isra.0>
 80065b4:	2202      	movs	r2, #2
 80065b6:	2112      	movs	r1, #18
 80065b8:	68e0      	ldr	r0, [r4, #12]
 80065ba:	f7ff ff9d 	bl	80064f8 <std.isra.0>
 80065be:	2301      	movs	r3, #1
 80065c0:	61a3      	str	r3, [r4, #24]
 80065c2:	bd10      	pop	{r4, pc}
 80065c4:	0800970c 	.word	0x0800970c
 80065c8:	080064ed 	.word	0x080064ed

080065cc <__sfp>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	4b1c      	ldr	r3, [pc, #112]	; (8006640 <__sfp+0x74>)
 80065d0:	681e      	ldr	r6, [r3, #0]
 80065d2:	69b3      	ldr	r3, [r6, #24]
 80065d4:	4607      	mov	r7, r0
 80065d6:	b913      	cbnz	r3, 80065de <__sfp+0x12>
 80065d8:	4630      	mov	r0, r6
 80065da:	f7ff ffc7 	bl	800656c <__sinit>
 80065de:	3648      	adds	r6, #72	; 0x48
 80065e0:	68b4      	ldr	r4, [r6, #8]
 80065e2:	6873      	ldr	r3, [r6, #4]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	d503      	bpl.n	80065f0 <__sfp+0x24>
 80065e8:	6833      	ldr	r3, [r6, #0]
 80065ea:	b133      	cbz	r3, 80065fa <__sfp+0x2e>
 80065ec:	6836      	ldr	r6, [r6, #0]
 80065ee:	e7f7      	b.n	80065e0 <__sfp+0x14>
 80065f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065f4:	b16d      	cbz	r5, 8006612 <__sfp+0x46>
 80065f6:	3468      	adds	r4, #104	; 0x68
 80065f8:	e7f4      	b.n	80065e4 <__sfp+0x18>
 80065fa:	2104      	movs	r1, #4
 80065fc:	4638      	mov	r0, r7
 80065fe:	f7ff ff9f 	bl	8006540 <__sfmoreglue>
 8006602:	6030      	str	r0, [r6, #0]
 8006604:	2800      	cmp	r0, #0
 8006606:	d1f1      	bne.n	80065ec <__sfp+0x20>
 8006608:	230c      	movs	r3, #12
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	4604      	mov	r4, r0
 800660e:	4620      	mov	r0, r4
 8006610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006616:	81e3      	strh	r3, [r4, #14]
 8006618:	2301      	movs	r3, #1
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	6665      	str	r5, [r4, #100]	; 0x64
 800661e:	6025      	str	r5, [r4, #0]
 8006620:	60a5      	str	r5, [r4, #8]
 8006622:	6065      	str	r5, [r4, #4]
 8006624:	6125      	str	r5, [r4, #16]
 8006626:	6165      	str	r5, [r4, #20]
 8006628:	61a5      	str	r5, [r4, #24]
 800662a:	2208      	movs	r2, #8
 800662c:	4629      	mov	r1, r5
 800662e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006632:	f000 f89f 	bl	8006774 <memset>
 8006636:	6365      	str	r5, [r4, #52]	; 0x34
 8006638:	63a5      	str	r5, [r4, #56]	; 0x38
 800663a:	64a5      	str	r5, [r4, #72]	; 0x48
 800663c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800663e:	e7e6      	b.n	800660e <__sfp+0x42>
 8006640:	0800970c 	.word	0x0800970c

08006644 <_fwalk_reent>:
 8006644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006648:	4680      	mov	r8, r0
 800664a:	4689      	mov	r9, r1
 800664c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006650:	2600      	movs	r6, #0
 8006652:	b914      	cbnz	r4, 800665a <_fwalk_reent+0x16>
 8006654:	4630      	mov	r0, r6
 8006656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800665a:	68a5      	ldr	r5, [r4, #8]
 800665c:	6867      	ldr	r7, [r4, #4]
 800665e:	3f01      	subs	r7, #1
 8006660:	d501      	bpl.n	8006666 <_fwalk_reent+0x22>
 8006662:	6824      	ldr	r4, [r4, #0]
 8006664:	e7f5      	b.n	8006652 <_fwalk_reent+0xe>
 8006666:	89ab      	ldrh	r3, [r5, #12]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d907      	bls.n	800667c <_fwalk_reent+0x38>
 800666c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006670:	3301      	adds	r3, #1
 8006672:	d003      	beq.n	800667c <_fwalk_reent+0x38>
 8006674:	4629      	mov	r1, r5
 8006676:	4640      	mov	r0, r8
 8006678:	47c8      	blx	r9
 800667a:	4306      	orrs	r6, r0
 800667c:	3568      	adds	r5, #104	; 0x68
 800667e:	e7ee      	b.n	800665e <_fwalk_reent+0x1a>

08006680 <_localeconv_r>:
 8006680:	4b04      	ldr	r3, [pc, #16]	; (8006694 <_localeconv_r+0x14>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6a18      	ldr	r0, [r3, #32]
 8006686:	4b04      	ldr	r3, [pc, #16]	; (8006698 <_localeconv_r+0x18>)
 8006688:	2800      	cmp	r0, #0
 800668a:	bf08      	it	eq
 800668c:	4618      	moveq	r0, r3
 800668e:	30f0      	adds	r0, #240	; 0xf0
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000054 	.word	0x20000054
 8006698:	200000b8 	.word	0x200000b8

0800669c <__swhatbuf_r>:
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	460e      	mov	r6, r1
 80066a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a4:	2900      	cmp	r1, #0
 80066a6:	b090      	sub	sp, #64	; 0x40
 80066a8:	4614      	mov	r4, r2
 80066aa:	461d      	mov	r5, r3
 80066ac:	da07      	bge.n	80066be <__swhatbuf_r+0x22>
 80066ae:	2300      	movs	r3, #0
 80066b0:	602b      	str	r3, [r5, #0]
 80066b2:	89b3      	ldrh	r3, [r6, #12]
 80066b4:	061a      	lsls	r2, r3, #24
 80066b6:	d410      	bmi.n	80066da <__swhatbuf_r+0x3e>
 80066b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066bc:	e00e      	b.n	80066dc <__swhatbuf_r+0x40>
 80066be:	aa01      	add	r2, sp, #4
 80066c0:	f000 fef0 	bl	80074a4 <_fstat_r>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	dbf2      	blt.n	80066ae <__swhatbuf_r+0x12>
 80066c8:	9a02      	ldr	r2, [sp, #8]
 80066ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066d2:	425a      	negs	r2, r3
 80066d4:	415a      	adcs	r2, r3
 80066d6:	602a      	str	r2, [r5, #0]
 80066d8:	e7ee      	b.n	80066b8 <__swhatbuf_r+0x1c>
 80066da:	2340      	movs	r3, #64	; 0x40
 80066dc:	2000      	movs	r0, #0
 80066de:	6023      	str	r3, [r4, #0]
 80066e0:	b010      	add	sp, #64	; 0x40
 80066e2:	bd70      	pop	{r4, r5, r6, pc}

080066e4 <__smakebuf_r>:
 80066e4:	898b      	ldrh	r3, [r1, #12]
 80066e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066e8:	079d      	lsls	r5, r3, #30
 80066ea:	4606      	mov	r6, r0
 80066ec:	460c      	mov	r4, r1
 80066ee:	d507      	bpl.n	8006700 <__smakebuf_r+0x1c>
 80066f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	6123      	str	r3, [r4, #16]
 80066f8:	2301      	movs	r3, #1
 80066fa:	6163      	str	r3, [r4, #20]
 80066fc:	b002      	add	sp, #8
 80066fe:	bd70      	pop	{r4, r5, r6, pc}
 8006700:	ab01      	add	r3, sp, #4
 8006702:	466a      	mov	r2, sp
 8006704:	f7ff ffca 	bl	800669c <__swhatbuf_r>
 8006708:	9900      	ldr	r1, [sp, #0]
 800670a:	4605      	mov	r5, r0
 800670c:	4630      	mov	r0, r6
 800670e:	f000 fb65 	bl	8006ddc <_malloc_r>
 8006712:	b948      	cbnz	r0, 8006728 <__smakebuf_r+0x44>
 8006714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006718:	059a      	lsls	r2, r3, #22
 800671a:	d4ef      	bmi.n	80066fc <__smakebuf_r+0x18>
 800671c:	f023 0303 	bic.w	r3, r3, #3
 8006720:	f043 0302 	orr.w	r3, r3, #2
 8006724:	81a3      	strh	r3, [r4, #12]
 8006726:	e7e3      	b.n	80066f0 <__smakebuf_r+0xc>
 8006728:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <__smakebuf_r+0x7c>)
 800672a:	62b3      	str	r3, [r6, #40]	; 0x28
 800672c:	89a3      	ldrh	r3, [r4, #12]
 800672e:	6020      	str	r0, [r4, #0]
 8006730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006734:	81a3      	strh	r3, [r4, #12]
 8006736:	9b00      	ldr	r3, [sp, #0]
 8006738:	6163      	str	r3, [r4, #20]
 800673a:	9b01      	ldr	r3, [sp, #4]
 800673c:	6120      	str	r0, [r4, #16]
 800673e:	b15b      	cbz	r3, 8006758 <__smakebuf_r+0x74>
 8006740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006744:	4630      	mov	r0, r6
 8006746:	f000 febf 	bl	80074c8 <_isatty_r>
 800674a:	b128      	cbz	r0, 8006758 <__smakebuf_r+0x74>
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	f023 0303 	bic.w	r3, r3, #3
 8006752:	f043 0301 	orr.w	r3, r3, #1
 8006756:	81a3      	strh	r3, [r4, #12]
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	431d      	orrs	r5, r3
 800675c:	81a5      	strh	r5, [r4, #12]
 800675e:	e7cd      	b.n	80066fc <__smakebuf_r+0x18>
 8006760:	080064ed 	.word	0x080064ed

08006764 <malloc>:
 8006764:	4b02      	ldr	r3, [pc, #8]	; (8006770 <malloc+0xc>)
 8006766:	4601      	mov	r1, r0
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	f000 bb37 	b.w	8006ddc <_malloc_r>
 800676e:	bf00      	nop
 8006770:	20000054 	.word	0x20000054

08006774 <memset>:
 8006774:	4402      	add	r2, r0
 8006776:	4603      	mov	r3, r0
 8006778:	4293      	cmp	r3, r2
 800677a:	d100      	bne.n	800677e <memset+0xa>
 800677c:	4770      	bx	lr
 800677e:	f803 1b01 	strb.w	r1, [r3], #1
 8006782:	e7f9      	b.n	8006778 <memset+0x4>

08006784 <_Balloc>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006788:	4604      	mov	r4, r0
 800678a:	460e      	mov	r6, r1
 800678c:	b93d      	cbnz	r5, 800679e <_Balloc+0x1a>
 800678e:	2010      	movs	r0, #16
 8006790:	f7ff ffe8 	bl	8006764 <malloc>
 8006794:	6260      	str	r0, [r4, #36]	; 0x24
 8006796:	6045      	str	r5, [r0, #4]
 8006798:	6085      	str	r5, [r0, #8]
 800679a:	6005      	str	r5, [r0, #0]
 800679c:	60c5      	str	r5, [r0, #12]
 800679e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80067a0:	68eb      	ldr	r3, [r5, #12]
 80067a2:	b183      	cbz	r3, 80067c6 <_Balloc+0x42>
 80067a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80067ac:	b9b8      	cbnz	r0, 80067de <_Balloc+0x5a>
 80067ae:	2101      	movs	r1, #1
 80067b0:	fa01 f506 	lsl.w	r5, r1, r6
 80067b4:	1d6a      	adds	r2, r5, #5
 80067b6:	0092      	lsls	r2, r2, #2
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 fab3 	bl	8006d24 <_calloc_r>
 80067be:	b160      	cbz	r0, 80067da <_Balloc+0x56>
 80067c0:	6046      	str	r6, [r0, #4]
 80067c2:	6085      	str	r5, [r0, #8]
 80067c4:	e00e      	b.n	80067e4 <_Balloc+0x60>
 80067c6:	2221      	movs	r2, #33	; 0x21
 80067c8:	2104      	movs	r1, #4
 80067ca:	4620      	mov	r0, r4
 80067cc:	f000 faaa 	bl	8006d24 <_calloc_r>
 80067d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067d2:	60e8      	str	r0, [r5, #12]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e4      	bne.n	80067a4 <_Balloc+0x20>
 80067da:	2000      	movs	r0, #0
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
 80067de:	6802      	ldr	r2, [r0, #0]
 80067e0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80067e4:	2300      	movs	r3, #0
 80067e6:	6103      	str	r3, [r0, #16]
 80067e8:	60c3      	str	r3, [r0, #12]
 80067ea:	bd70      	pop	{r4, r5, r6, pc}

080067ec <_Bfree>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80067f0:	4606      	mov	r6, r0
 80067f2:	460d      	mov	r5, r1
 80067f4:	b93c      	cbnz	r4, 8006806 <_Bfree+0x1a>
 80067f6:	2010      	movs	r0, #16
 80067f8:	f7ff ffb4 	bl	8006764 <malloc>
 80067fc:	6270      	str	r0, [r6, #36]	; 0x24
 80067fe:	6044      	str	r4, [r0, #4]
 8006800:	6084      	str	r4, [r0, #8]
 8006802:	6004      	str	r4, [r0, #0]
 8006804:	60c4      	str	r4, [r0, #12]
 8006806:	b13d      	cbz	r5, 8006818 <_Bfree+0x2c>
 8006808:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800680a:	686a      	ldr	r2, [r5, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006812:	6029      	str	r1, [r5, #0]
 8006814:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006818:	bd70      	pop	{r4, r5, r6, pc}

0800681a <__multadd>:
 800681a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800681e:	690d      	ldr	r5, [r1, #16]
 8006820:	461f      	mov	r7, r3
 8006822:	4606      	mov	r6, r0
 8006824:	460c      	mov	r4, r1
 8006826:	f101 0e14 	add.w	lr, r1, #20
 800682a:	2300      	movs	r3, #0
 800682c:	f8de 0000 	ldr.w	r0, [lr]
 8006830:	b281      	uxth	r1, r0
 8006832:	fb02 7101 	mla	r1, r2, r1, r7
 8006836:	0c0f      	lsrs	r7, r1, #16
 8006838:	0c00      	lsrs	r0, r0, #16
 800683a:	fb02 7000 	mla	r0, r2, r0, r7
 800683e:	b289      	uxth	r1, r1
 8006840:	3301      	adds	r3, #1
 8006842:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006846:	429d      	cmp	r5, r3
 8006848:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800684c:	f84e 1b04 	str.w	r1, [lr], #4
 8006850:	dcec      	bgt.n	800682c <__multadd+0x12>
 8006852:	b1d7      	cbz	r7, 800688a <__multadd+0x70>
 8006854:	68a3      	ldr	r3, [r4, #8]
 8006856:	429d      	cmp	r5, r3
 8006858:	db12      	blt.n	8006880 <__multadd+0x66>
 800685a:	6861      	ldr	r1, [r4, #4]
 800685c:	4630      	mov	r0, r6
 800685e:	3101      	adds	r1, #1
 8006860:	f7ff ff90 	bl	8006784 <_Balloc>
 8006864:	6922      	ldr	r2, [r4, #16]
 8006866:	3202      	adds	r2, #2
 8006868:	f104 010c 	add.w	r1, r4, #12
 800686c:	4680      	mov	r8, r0
 800686e:	0092      	lsls	r2, r2, #2
 8006870:	300c      	adds	r0, #12
 8006872:	f7fe f9cf 	bl	8004c14 <memcpy>
 8006876:	4621      	mov	r1, r4
 8006878:	4630      	mov	r0, r6
 800687a:	f7ff ffb7 	bl	80067ec <_Bfree>
 800687e:	4644      	mov	r4, r8
 8006880:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006884:	3501      	adds	r5, #1
 8006886:	615f      	str	r7, [r3, #20]
 8006888:	6125      	str	r5, [r4, #16]
 800688a:	4620      	mov	r0, r4
 800688c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006890 <__hi0bits>:
 8006890:	0c02      	lsrs	r2, r0, #16
 8006892:	0412      	lsls	r2, r2, #16
 8006894:	4603      	mov	r3, r0
 8006896:	b9b2      	cbnz	r2, 80068c6 <__hi0bits+0x36>
 8006898:	0403      	lsls	r3, r0, #16
 800689a:	2010      	movs	r0, #16
 800689c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80068a0:	bf04      	itt	eq
 80068a2:	021b      	lsleq	r3, r3, #8
 80068a4:	3008      	addeq	r0, #8
 80068a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80068aa:	bf04      	itt	eq
 80068ac:	011b      	lsleq	r3, r3, #4
 80068ae:	3004      	addeq	r0, #4
 80068b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80068b4:	bf04      	itt	eq
 80068b6:	009b      	lsleq	r3, r3, #2
 80068b8:	3002      	addeq	r0, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	db06      	blt.n	80068cc <__hi0bits+0x3c>
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	d503      	bpl.n	80068ca <__hi0bits+0x3a>
 80068c2:	3001      	adds	r0, #1
 80068c4:	4770      	bx	lr
 80068c6:	2000      	movs	r0, #0
 80068c8:	e7e8      	b.n	800689c <__hi0bits+0xc>
 80068ca:	2020      	movs	r0, #32
 80068cc:	4770      	bx	lr

080068ce <__lo0bits>:
 80068ce:	6803      	ldr	r3, [r0, #0]
 80068d0:	f013 0207 	ands.w	r2, r3, #7
 80068d4:	4601      	mov	r1, r0
 80068d6:	d00b      	beq.n	80068f0 <__lo0bits+0x22>
 80068d8:	07da      	lsls	r2, r3, #31
 80068da:	d423      	bmi.n	8006924 <__lo0bits+0x56>
 80068dc:	0798      	lsls	r0, r3, #30
 80068de:	bf49      	itett	mi
 80068e0:	085b      	lsrmi	r3, r3, #1
 80068e2:	089b      	lsrpl	r3, r3, #2
 80068e4:	2001      	movmi	r0, #1
 80068e6:	600b      	strmi	r3, [r1, #0]
 80068e8:	bf5c      	itt	pl
 80068ea:	600b      	strpl	r3, [r1, #0]
 80068ec:	2002      	movpl	r0, #2
 80068ee:	4770      	bx	lr
 80068f0:	b298      	uxth	r0, r3
 80068f2:	b9a8      	cbnz	r0, 8006920 <__lo0bits+0x52>
 80068f4:	0c1b      	lsrs	r3, r3, #16
 80068f6:	2010      	movs	r0, #16
 80068f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80068fc:	bf04      	itt	eq
 80068fe:	0a1b      	lsreq	r3, r3, #8
 8006900:	3008      	addeq	r0, #8
 8006902:	071a      	lsls	r2, r3, #28
 8006904:	bf04      	itt	eq
 8006906:	091b      	lsreq	r3, r3, #4
 8006908:	3004      	addeq	r0, #4
 800690a:	079a      	lsls	r2, r3, #30
 800690c:	bf04      	itt	eq
 800690e:	089b      	lsreq	r3, r3, #2
 8006910:	3002      	addeq	r0, #2
 8006912:	07da      	lsls	r2, r3, #31
 8006914:	d402      	bmi.n	800691c <__lo0bits+0x4e>
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	d006      	beq.n	8006928 <__lo0bits+0x5a>
 800691a:	3001      	adds	r0, #1
 800691c:	600b      	str	r3, [r1, #0]
 800691e:	4770      	bx	lr
 8006920:	4610      	mov	r0, r2
 8006922:	e7e9      	b.n	80068f8 <__lo0bits+0x2a>
 8006924:	2000      	movs	r0, #0
 8006926:	4770      	bx	lr
 8006928:	2020      	movs	r0, #32
 800692a:	4770      	bx	lr

0800692c <__i2b>:
 800692c:	b510      	push	{r4, lr}
 800692e:	460c      	mov	r4, r1
 8006930:	2101      	movs	r1, #1
 8006932:	f7ff ff27 	bl	8006784 <_Balloc>
 8006936:	2201      	movs	r2, #1
 8006938:	6144      	str	r4, [r0, #20]
 800693a:	6102      	str	r2, [r0, #16]
 800693c:	bd10      	pop	{r4, pc}

0800693e <__multiply>:
 800693e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006942:	4614      	mov	r4, r2
 8006944:	690a      	ldr	r2, [r1, #16]
 8006946:	6923      	ldr	r3, [r4, #16]
 8006948:	429a      	cmp	r2, r3
 800694a:	bfb8      	it	lt
 800694c:	460b      	movlt	r3, r1
 800694e:	4689      	mov	r9, r1
 8006950:	bfbc      	itt	lt
 8006952:	46a1      	movlt	r9, r4
 8006954:	461c      	movlt	r4, r3
 8006956:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800695a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800695e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006962:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006966:	eb07 060a 	add.w	r6, r7, sl
 800696a:	429e      	cmp	r6, r3
 800696c:	bfc8      	it	gt
 800696e:	3101      	addgt	r1, #1
 8006970:	f7ff ff08 	bl	8006784 <_Balloc>
 8006974:	f100 0514 	add.w	r5, r0, #20
 8006978:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800697c:	462b      	mov	r3, r5
 800697e:	2200      	movs	r2, #0
 8006980:	4543      	cmp	r3, r8
 8006982:	d316      	bcc.n	80069b2 <__multiply+0x74>
 8006984:	f104 0214 	add.w	r2, r4, #20
 8006988:	f109 0114 	add.w	r1, r9, #20
 800698c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006990:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	9c01      	ldr	r4, [sp, #4]
 8006998:	4294      	cmp	r4, r2
 800699a:	4613      	mov	r3, r2
 800699c:	d80c      	bhi.n	80069b8 <__multiply+0x7a>
 800699e:	2e00      	cmp	r6, #0
 80069a0:	dd03      	ble.n	80069aa <__multiply+0x6c>
 80069a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d054      	beq.n	8006a54 <__multiply+0x116>
 80069aa:	6106      	str	r6, [r0, #16]
 80069ac:	b003      	add	sp, #12
 80069ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b2:	f843 2b04 	str.w	r2, [r3], #4
 80069b6:	e7e3      	b.n	8006980 <__multiply+0x42>
 80069b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80069bc:	3204      	adds	r2, #4
 80069be:	f1ba 0f00 	cmp.w	sl, #0
 80069c2:	d020      	beq.n	8006a06 <__multiply+0xc8>
 80069c4:	46ae      	mov	lr, r5
 80069c6:	4689      	mov	r9, r1
 80069c8:	f04f 0c00 	mov.w	ip, #0
 80069cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80069d0:	f8be b000 	ldrh.w	fp, [lr]
 80069d4:	b2a3      	uxth	r3, r4
 80069d6:	fb0a b303 	mla	r3, sl, r3, fp
 80069da:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80069de:	f8de 4000 	ldr.w	r4, [lr]
 80069e2:	4463      	add	r3, ip
 80069e4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80069e8:	fb0a c40b 	mla	r4, sl, fp, ip
 80069ec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80069f6:	454f      	cmp	r7, r9
 80069f8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80069fc:	f84e 3b04 	str.w	r3, [lr], #4
 8006a00:	d8e4      	bhi.n	80069cc <__multiply+0x8e>
 8006a02:	f8ce c000 	str.w	ip, [lr]
 8006a06:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006a0a:	f1b9 0f00 	cmp.w	r9, #0
 8006a0e:	d01f      	beq.n	8006a50 <__multiply+0x112>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	46ae      	mov	lr, r5
 8006a14:	468c      	mov	ip, r1
 8006a16:	f04f 0a00 	mov.w	sl, #0
 8006a1a:	f8bc 4000 	ldrh.w	r4, [ip]
 8006a1e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006a22:	fb09 b404 	mla	r4, r9, r4, fp
 8006a26:	44a2      	add	sl, r4
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006a2e:	f84e 3b04 	str.w	r3, [lr], #4
 8006a32:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a36:	f8be 4000 	ldrh.w	r4, [lr]
 8006a3a:	0c1b      	lsrs	r3, r3, #16
 8006a3c:	fb09 4303 	mla	r3, r9, r3, r4
 8006a40:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006a44:	4567      	cmp	r7, ip
 8006a46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a4a:	d8e6      	bhi.n	8006a1a <__multiply+0xdc>
 8006a4c:	f8ce 3000 	str.w	r3, [lr]
 8006a50:	3504      	adds	r5, #4
 8006a52:	e7a0      	b.n	8006996 <__multiply+0x58>
 8006a54:	3e01      	subs	r6, #1
 8006a56:	e7a2      	b.n	800699e <__multiply+0x60>

08006a58 <__pow5mult>:
 8006a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a5c:	4615      	mov	r5, r2
 8006a5e:	f012 0203 	ands.w	r2, r2, #3
 8006a62:	4606      	mov	r6, r0
 8006a64:	460f      	mov	r7, r1
 8006a66:	d007      	beq.n	8006a78 <__pow5mult+0x20>
 8006a68:	3a01      	subs	r2, #1
 8006a6a:	4c21      	ldr	r4, [pc, #132]	; (8006af0 <__pow5mult+0x98>)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a72:	f7ff fed2 	bl	800681a <__multadd>
 8006a76:	4607      	mov	r7, r0
 8006a78:	10ad      	asrs	r5, r5, #2
 8006a7a:	d035      	beq.n	8006ae8 <__pow5mult+0x90>
 8006a7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a7e:	b93c      	cbnz	r4, 8006a90 <__pow5mult+0x38>
 8006a80:	2010      	movs	r0, #16
 8006a82:	f7ff fe6f 	bl	8006764 <malloc>
 8006a86:	6270      	str	r0, [r6, #36]	; 0x24
 8006a88:	6044      	str	r4, [r0, #4]
 8006a8a:	6084      	str	r4, [r0, #8]
 8006a8c:	6004      	str	r4, [r0, #0]
 8006a8e:	60c4      	str	r4, [r0, #12]
 8006a90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a98:	b94c      	cbnz	r4, 8006aae <__pow5mult+0x56>
 8006a9a:	f240 2171 	movw	r1, #625	; 0x271
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f7ff ff44 	bl	800692c <__i2b>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006aaa:	4604      	mov	r4, r0
 8006aac:	6003      	str	r3, [r0, #0]
 8006aae:	f04f 0800 	mov.w	r8, #0
 8006ab2:	07eb      	lsls	r3, r5, #31
 8006ab4:	d50a      	bpl.n	8006acc <__pow5mult+0x74>
 8006ab6:	4639      	mov	r1, r7
 8006ab8:	4622      	mov	r2, r4
 8006aba:	4630      	mov	r0, r6
 8006abc:	f7ff ff3f 	bl	800693e <__multiply>
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	4681      	mov	r9, r0
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7ff fe91 	bl	80067ec <_Bfree>
 8006aca:	464f      	mov	r7, r9
 8006acc:	106d      	asrs	r5, r5, #1
 8006ace:	d00b      	beq.n	8006ae8 <__pow5mult+0x90>
 8006ad0:	6820      	ldr	r0, [r4, #0]
 8006ad2:	b938      	cbnz	r0, 8006ae4 <__pow5mult+0x8c>
 8006ad4:	4622      	mov	r2, r4
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f7ff ff30 	bl	800693e <__multiply>
 8006ade:	6020      	str	r0, [r4, #0]
 8006ae0:	f8c0 8000 	str.w	r8, [r0]
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	e7e4      	b.n	8006ab2 <__pow5mult+0x5a>
 8006ae8:	4638      	mov	r0, r7
 8006aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aee:	bf00      	nop
 8006af0:	08009800 	.word	0x08009800

08006af4 <__lshift>:
 8006af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af8:	460c      	mov	r4, r1
 8006afa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006afe:	6923      	ldr	r3, [r4, #16]
 8006b00:	6849      	ldr	r1, [r1, #4]
 8006b02:	eb0a 0903 	add.w	r9, sl, r3
 8006b06:	68a3      	ldr	r3, [r4, #8]
 8006b08:	4607      	mov	r7, r0
 8006b0a:	4616      	mov	r6, r2
 8006b0c:	f109 0501 	add.w	r5, r9, #1
 8006b10:	42ab      	cmp	r3, r5
 8006b12:	db31      	blt.n	8006b78 <__lshift+0x84>
 8006b14:	4638      	mov	r0, r7
 8006b16:	f7ff fe35 	bl	8006784 <_Balloc>
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	4680      	mov	r8, r0
 8006b1e:	f100 0314 	add.w	r3, r0, #20
 8006b22:	4611      	mov	r1, r2
 8006b24:	4552      	cmp	r2, sl
 8006b26:	db2a      	blt.n	8006b7e <__lshift+0x8a>
 8006b28:	6920      	ldr	r0, [r4, #16]
 8006b2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b2e:	f104 0114 	add.w	r1, r4, #20
 8006b32:	f016 021f 	ands.w	r2, r6, #31
 8006b36:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006b3a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006b3e:	d022      	beq.n	8006b86 <__lshift+0x92>
 8006b40:	f1c2 0c20 	rsb	ip, r2, #32
 8006b44:	2000      	movs	r0, #0
 8006b46:	680e      	ldr	r6, [r1, #0]
 8006b48:	4096      	lsls	r6, r2
 8006b4a:	4330      	orrs	r0, r6
 8006b4c:	f843 0b04 	str.w	r0, [r3], #4
 8006b50:	f851 0b04 	ldr.w	r0, [r1], #4
 8006b54:	458e      	cmp	lr, r1
 8006b56:	fa20 f00c 	lsr.w	r0, r0, ip
 8006b5a:	d8f4      	bhi.n	8006b46 <__lshift+0x52>
 8006b5c:	6018      	str	r0, [r3, #0]
 8006b5e:	b108      	cbz	r0, 8006b64 <__lshift+0x70>
 8006b60:	f109 0502 	add.w	r5, r9, #2
 8006b64:	3d01      	subs	r5, #1
 8006b66:	4638      	mov	r0, r7
 8006b68:	f8c8 5010 	str.w	r5, [r8, #16]
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	f7ff fe3d 	bl	80067ec <_Bfree>
 8006b72:	4640      	mov	r0, r8
 8006b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b78:	3101      	adds	r1, #1
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	e7c8      	b.n	8006b10 <__lshift+0x1c>
 8006b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006b82:	3201      	adds	r2, #1
 8006b84:	e7ce      	b.n	8006b24 <__lshift+0x30>
 8006b86:	3b04      	subs	r3, #4
 8006b88:	f851 2b04 	ldr.w	r2, [r1], #4
 8006b8c:	f843 2f04 	str.w	r2, [r3, #4]!
 8006b90:	458e      	cmp	lr, r1
 8006b92:	d8f9      	bhi.n	8006b88 <__lshift+0x94>
 8006b94:	e7e6      	b.n	8006b64 <__lshift+0x70>

08006b96 <__mcmp>:
 8006b96:	6903      	ldr	r3, [r0, #16]
 8006b98:	690a      	ldr	r2, [r1, #16]
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	b530      	push	{r4, r5, lr}
 8006b9e:	d10c      	bne.n	8006bba <__mcmp+0x24>
 8006ba0:	0092      	lsls	r2, r2, #2
 8006ba2:	3014      	adds	r0, #20
 8006ba4:	3114      	adds	r1, #20
 8006ba6:	1884      	adds	r4, r0, r2
 8006ba8:	4411      	add	r1, r2
 8006baa:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006bae:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006bb2:	4295      	cmp	r5, r2
 8006bb4:	d003      	beq.n	8006bbe <__mcmp+0x28>
 8006bb6:	d305      	bcc.n	8006bc4 <__mcmp+0x2e>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	4618      	mov	r0, r3
 8006bbc:	bd30      	pop	{r4, r5, pc}
 8006bbe:	42a0      	cmp	r0, r4
 8006bc0:	d3f3      	bcc.n	8006baa <__mcmp+0x14>
 8006bc2:	e7fa      	b.n	8006bba <__mcmp+0x24>
 8006bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc8:	e7f7      	b.n	8006bba <__mcmp+0x24>

08006bca <__mdiff>:
 8006bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bce:	460d      	mov	r5, r1
 8006bd0:	4607      	mov	r7, r0
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	f7ff ffdd 	bl	8006b96 <__mcmp>
 8006bdc:	1e06      	subs	r6, r0, #0
 8006bde:	d108      	bne.n	8006bf2 <__mdiff+0x28>
 8006be0:	4631      	mov	r1, r6
 8006be2:	4638      	mov	r0, r7
 8006be4:	f7ff fdce 	bl	8006784 <_Balloc>
 8006be8:	2301      	movs	r3, #1
 8006bea:	6103      	str	r3, [r0, #16]
 8006bec:	6146      	str	r6, [r0, #20]
 8006bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf2:	bfa4      	itt	ge
 8006bf4:	4623      	movge	r3, r4
 8006bf6:	462c      	movge	r4, r5
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	6861      	ldr	r1, [r4, #4]
 8006bfc:	bfa6      	itte	ge
 8006bfe:	461d      	movge	r5, r3
 8006c00:	2600      	movge	r6, #0
 8006c02:	2601      	movlt	r6, #1
 8006c04:	f7ff fdbe 	bl	8006784 <_Balloc>
 8006c08:	692b      	ldr	r3, [r5, #16]
 8006c0a:	60c6      	str	r6, [r0, #12]
 8006c0c:	6926      	ldr	r6, [r4, #16]
 8006c0e:	f105 0914 	add.w	r9, r5, #20
 8006c12:	f104 0214 	add.w	r2, r4, #20
 8006c16:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006c1a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006c1e:	f100 0514 	add.w	r5, r0, #20
 8006c22:	f04f 0c00 	mov.w	ip, #0
 8006c26:	f852 ab04 	ldr.w	sl, [r2], #4
 8006c2a:	f859 4b04 	ldr.w	r4, [r9], #4
 8006c2e:	fa1c f18a 	uxtah	r1, ip, sl
 8006c32:	b2a3      	uxth	r3, r4
 8006c34:	1ac9      	subs	r1, r1, r3
 8006c36:	0c23      	lsrs	r3, r4, #16
 8006c38:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006c3c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c40:	b289      	uxth	r1, r1
 8006c42:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006c46:	45c8      	cmp	r8, r9
 8006c48:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006c4c:	4696      	mov	lr, r2
 8006c4e:	f845 3b04 	str.w	r3, [r5], #4
 8006c52:	d8e8      	bhi.n	8006c26 <__mdiff+0x5c>
 8006c54:	45be      	cmp	lr, r7
 8006c56:	d305      	bcc.n	8006c64 <__mdiff+0x9a>
 8006c58:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006c5c:	b18b      	cbz	r3, 8006c82 <__mdiff+0xb8>
 8006c5e:	6106      	str	r6, [r0, #16]
 8006c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c64:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006c68:	fa1c f381 	uxtah	r3, ip, r1
 8006c6c:	141a      	asrs	r2, r3, #16
 8006c6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c7c:	f845 3b04 	str.w	r3, [r5], #4
 8006c80:	e7e8      	b.n	8006c54 <__mdiff+0x8a>
 8006c82:	3e01      	subs	r6, #1
 8006c84:	e7e8      	b.n	8006c58 <__mdiff+0x8e>

08006c86 <__d2b>:
 8006c86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c8a:	460e      	mov	r6, r1
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	ec59 8b10 	vmov	r8, r9, d0
 8006c92:	4615      	mov	r5, r2
 8006c94:	f7ff fd76 	bl	8006784 <_Balloc>
 8006c98:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ca2:	bb34      	cbnz	r4, 8006cf2 <__d2b+0x6c>
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	f1b8 0f00 	cmp.w	r8, #0
 8006caa:	d027      	beq.n	8006cfc <__d2b+0x76>
 8006cac:	a802      	add	r0, sp, #8
 8006cae:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006cb2:	f7ff fe0c 	bl	80068ce <__lo0bits>
 8006cb6:	9900      	ldr	r1, [sp, #0]
 8006cb8:	b1f0      	cbz	r0, 8006cf8 <__d2b+0x72>
 8006cba:	9a01      	ldr	r2, [sp, #4]
 8006cbc:	f1c0 0320 	rsb	r3, r0, #32
 8006cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	40c2      	lsrs	r2, r0
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	9201      	str	r2, [sp, #4]
 8006ccc:	9b01      	ldr	r3, [sp, #4]
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	bf14      	ite	ne
 8006cd4:	2102      	movne	r1, #2
 8006cd6:	2101      	moveq	r1, #1
 8006cd8:	6139      	str	r1, [r7, #16]
 8006cda:	b1c4      	cbz	r4, 8006d0e <__d2b+0x88>
 8006cdc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006ce0:	4404      	add	r4, r0
 8006ce2:	6034      	str	r4, [r6, #0]
 8006ce4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ce8:	6028      	str	r0, [r5, #0]
 8006cea:	4638      	mov	r0, r7
 8006cec:	b003      	add	sp, #12
 8006cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cf6:	e7d5      	b.n	8006ca4 <__d2b+0x1e>
 8006cf8:	6179      	str	r1, [r7, #20]
 8006cfa:	e7e7      	b.n	8006ccc <__d2b+0x46>
 8006cfc:	a801      	add	r0, sp, #4
 8006cfe:	f7ff fde6 	bl	80068ce <__lo0bits>
 8006d02:	9b01      	ldr	r3, [sp, #4]
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	2101      	movs	r1, #1
 8006d08:	6139      	str	r1, [r7, #16]
 8006d0a:	3020      	adds	r0, #32
 8006d0c:	e7e5      	b.n	8006cda <__d2b+0x54>
 8006d0e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006d12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d16:	6030      	str	r0, [r6, #0]
 8006d18:	6918      	ldr	r0, [r3, #16]
 8006d1a:	f7ff fdb9 	bl	8006890 <__hi0bits>
 8006d1e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006d22:	e7e1      	b.n	8006ce8 <__d2b+0x62>

08006d24 <_calloc_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	fb02 f401 	mul.w	r4, r2, r1
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	f000 f856 	bl	8006ddc <_malloc_r>
 8006d30:	4605      	mov	r5, r0
 8006d32:	b118      	cbz	r0, 8006d3c <_calloc_r+0x18>
 8006d34:	4622      	mov	r2, r4
 8006d36:	2100      	movs	r1, #0
 8006d38:	f7ff fd1c 	bl	8006774 <memset>
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}

08006d40 <_free_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4605      	mov	r5, r0
 8006d44:	2900      	cmp	r1, #0
 8006d46:	d045      	beq.n	8006dd4 <_free_r+0x94>
 8006d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4c:	1f0c      	subs	r4, r1, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfb8      	it	lt
 8006d52:	18e4      	addlt	r4, r4, r3
 8006d54:	f000 fc06 	bl	8007564 <__malloc_lock>
 8006d58:	4a1f      	ldr	r2, [pc, #124]	; (8006dd8 <_free_r+0x98>)
 8006d5a:	6813      	ldr	r3, [r2, #0]
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	b933      	cbnz	r3, 8006d6e <_free_r+0x2e>
 8006d60:	6063      	str	r3, [r4, #4]
 8006d62:	6014      	str	r4, [r2, #0]
 8006d64:	4628      	mov	r0, r5
 8006d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d6a:	f000 bbfc 	b.w	8007566 <__malloc_unlock>
 8006d6e:	42a3      	cmp	r3, r4
 8006d70:	d90c      	bls.n	8006d8c <_free_r+0x4c>
 8006d72:	6821      	ldr	r1, [r4, #0]
 8006d74:	1862      	adds	r2, r4, r1
 8006d76:	4293      	cmp	r3, r2
 8006d78:	bf04      	itt	eq
 8006d7a:	681a      	ldreq	r2, [r3, #0]
 8006d7c:	685b      	ldreq	r3, [r3, #4]
 8006d7e:	6063      	str	r3, [r4, #4]
 8006d80:	bf04      	itt	eq
 8006d82:	1852      	addeq	r2, r2, r1
 8006d84:	6022      	streq	r2, [r4, #0]
 8006d86:	6004      	str	r4, [r0, #0]
 8006d88:	e7ec      	b.n	8006d64 <_free_r+0x24>
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	b10a      	cbz	r2, 8006d94 <_free_r+0x54>
 8006d90:	42a2      	cmp	r2, r4
 8006d92:	d9fa      	bls.n	8006d8a <_free_r+0x4a>
 8006d94:	6819      	ldr	r1, [r3, #0]
 8006d96:	1858      	adds	r0, r3, r1
 8006d98:	42a0      	cmp	r0, r4
 8006d9a:	d10b      	bne.n	8006db4 <_free_r+0x74>
 8006d9c:	6820      	ldr	r0, [r4, #0]
 8006d9e:	4401      	add	r1, r0
 8006da0:	1858      	adds	r0, r3, r1
 8006da2:	4282      	cmp	r2, r0
 8006da4:	6019      	str	r1, [r3, #0]
 8006da6:	d1dd      	bne.n	8006d64 <_free_r+0x24>
 8006da8:	6810      	ldr	r0, [r2, #0]
 8006daa:	6852      	ldr	r2, [r2, #4]
 8006dac:	605a      	str	r2, [r3, #4]
 8006dae:	4401      	add	r1, r0
 8006db0:	6019      	str	r1, [r3, #0]
 8006db2:	e7d7      	b.n	8006d64 <_free_r+0x24>
 8006db4:	d902      	bls.n	8006dbc <_free_r+0x7c>
 8006db6:	230c      	movs	r3, #12
 8006db8:	602b      	str	r3, [r5, #0]
 8006dba:	e7d3      	b.n	8006d64 <_free_r+0x24>
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	1821      	adds	r1, r4, r0
 8006dc0:	428a      	cmp	r2, r1
 8006dc2:	bf04      	itt	eq
 8006dc4:	6811      	ldreq	r1, [r2, #0]
 8006dc6:	6852      	ldreq	r2, [r2, #4]
 8006dc8:	6062      	str	r2, [r4, #4]
 8006dca:	bf04      	itt	eq
 8006dcc:	1809      	addeq	r1, r1, r0
 8006dce:	6021      	streq	r1, [r4, #0]
 8006dd0:	605c      	str	r4, [r3, #4]
 8006dd2:	e7c7      	b.n	8006d64 <_free_r+0x24>
 8006dd4:	bd38      	pop	{r3, r4, r5, pc}
 8006dd6:	bf00      	nop
 8006dd8:	2000024c 	.word	0x2000024c

08006ddc <_malloc_r>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	1ccd      	adds	r5, r1, #3
 8006de0:	f025 0503 	bic.w	r5, r5, #3
 8006de4:	3508      	adds	r5, #8
 8006de6:	2d0c      	cmp	r5, #12
 8006de8:	bf38      	it	cc
 8006dea:	250c      	movcc	r5, #12
 8006dec:	2d00      	cmp	r5, #0
 8006dee:	4606      	mov	r6, r0
 8006df0:	db01      	blt.n	8006df6 <_malloc_r+0x1a>
 8006df2:	42a9      	cmp	r1, r5
 8006df4:	d903      	bls.n	8006dfe <_malloc_r+0x22>
 8006df6:	230c      	movs	r3, #12
 8006df8:	6033      	str	r3, [r6, #0]
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	bd70      	pop	{r4, r5, r6, pc}
 8006dfe:	f000 fbb1 	bl	8007564 <__malloc_lock>
 8006e02:	4a23      	ldr	r2, [pc, #140]	; (8006e90 <_malloc_r+0xb4>)
 8006e04:	6814      	ldr	r4, [r2, #0]
 8006e06:	4621      	mov	r1, r4
 8006e08:	b991      	cbnz	r1, 8006e30 <_malloc_r+0x54>
 8006e0a:	4c22      	ldr	r4, [pc, #136]	; (8006e94 <_malloc_r+0xb8>)
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	b91b      	cbnz	r3, 8006e18 <_malloc_r+0x3c>
 8006e10:	4630      	mov	r0, r6
 8006e12:	f000 fad1 	bl	80073b8 <_sbrk_r>
 8006e16:	6020      	str	r0, [r4, #0]
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f000 facc 	bl	80073b8 <_sbrk_r>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d126      	bne.n	8006e72 <_malloc_r+0x96>
 8006e24:	230c      	movs	r3, #12
 8006e26:	6033      	str	r3, [r6, #0]
 8006e28:	4630      	mov	r0, r6
 8006e2a:	f000 fb9c 	bl	8007566 <__malloc_unlock>
 8006e2e:	e7e4      	b.n	8006dfa <_malloc_r+0x1e>
 8006e30:	680b      	ldr	r3, [r1, #0]
 8006e32:	1b5b      	subs	r3, r3, r5
 8006e34:	d41a      	bmi.n	8006e6c <_malloc_r+0x90>
 8006e36:	2b0b      	cmp	r3, #11
 8006e38:	d90f      	bls.n	8006e5a <_malloc_r+0x7e>
 8006e3a:	600b      	str	r3, [r1, #0]
 8006e3c:	50cd      	str	r5, [r1, r3]
 8006e3e:	18cc      	adds	r4, r1, r3
 8006e40:	4630      	mov	r0, r6
 8006e42:	f000 fb90 	bl	8007566 <__malloc_unlock>
 8006e46:	f104 000b 	add.w	r0, r4, #11
 8006e4a:	1d23      	adds	r3, r4, #4
 8006e4c:	f020 0007 	bic.w	r0, r0, #7
 8006e50:	1ac3      	subs	r3, r0, r3
 8006e52:	d01b      	beq.n	8006e8c <_malloc_r+0xb0>
 8006e54:	425a      	negs	r2, r3
 8006e56:	50e2      	str	r2, [r4, r3]
 8006e58:	bd70      	pop	{r4, r5, r6, pc}
 8006e5a:	428c      	cmp	r4, r1
 8006e5c:	bf0d      	iteet	eq
 8006e5e:	6863      	ldreq	r3, [r4, #4]
 8006e60:	684b      	ldrne	r3, [r1, #4]
 8006e62:	6063      	strne	r3, [r4, #4]
 8006e64:	6013      	streq	r3, [r2, #0]
 8006e66:	bf18      	it	ne
 8006e68:	460c      	movne	r4, r1
 8006e6a:	e7e9      	b.n	8006e40 <_malloc_r+0x64>
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	6849      	ldr	r1, [r1, #4]
 8006e70:	e7ca      	b.n	8006e08 <_malloc_r+0x2c>
 8006e72:	1cc4      	adds	r4, r0, #3
 8006e74:	f024 0403 	bic.w	r4, r4, #3
 8006e78:	42a0      	cmp	r0, r4
 8006e7a:	d005      	beq.n	8006e88 <_malloc_r+0xac>
 8006e7c:	1a21      	subs	r1, r4, r0
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f000 fa9a 	bl	80073b8 <_sbrk_r>
 8006e84:	3001      	adds	r0, #1
 8006e86:	d0cd      	beq.n	8006e24 <_malloc_r+0x48>
 8006e88:	6025      	str	r5, [r4, #0]
 8006e8a:	e7d9      	b.n	8006e40 <_malloc_r+0x64>
 8006e8c:	bd70      	pop	{r4, r5, r6, pc}
 8006e8e:	bf00      	nop
 8006e90:	2000024c 	.word	0x2000024c
 8006e94:	20000250 	.word	0x20000250

08006e98 <__ssputs_r>:
 8006e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e9c:	688e      	ldr	r6, [r1, #8]
 8006e9e:	429e      	cmp	r6, r3
 8006ea0:	4682      	mov	sl, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	4691      	mov	r9, r2
 8006ea6:	4698      	mov	r8, r3
 8006ea8:	d835      	bhi.n	8006f16 <__ssputs_r+0x7e>
 8006eaa:	898a      	ldrh	r2, [r1, #12]
 8006eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006eb0:	d031      	beq.n	8006f16 <__ssputs_r+0x7e>
 8006eb2:	6825      	ldr	r5, [r4, #0]
 8006eb4:	6909      	ldr	r1, [r1, #16]
 8006eb6:	1a6f      	subs	r7, r5, r1
 8006eb8:	6965      	ldr	r5, [r4, #20]
 8006eba:	2302      	movs	r3, #2
 8006ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ec0:	fb95 f5f3 	sdiv	r5, r5, r3
 8006ec4:	f108 0301 	add.w	r3, r8, #1
 8006ec8:	443b      	add	r3, r7
 8006eca:	429d      	cmp	r5, r3
 8006ecc:	bf38      	it	cc
 8006ece:	461d      	movcc	r5, r3
 8006ed0:	0553      	lsls	r3, r2, #21
 8006ed2:	d531      	bpl.n	8006f38 <__ssputs_r+0xa0>
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	f7ff ff81 	bl	8006ddc <_malloc_r>
 8006eda:	4606      	mov	r6, r0
 8006edc:	b950      	cbnz	r0, 8006ef4 <__ssputs_r+0x5c>
 8006ede:	230c      	movs	r3, #12
 8006ee0:	f8ca 3000 	str.w	r3, [sl]
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eea:	81a3      	strh	r3, [r4, #12]
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef4:	463a      	mov	r2, r7
 8006ef6:	6921      	ldr	r1, [r4, #16]
 8006ef8:	f7fd fe8c 	bl	8004c14 <memcpy>
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	6126      	str	r6, [r4, #16]
 8006f0a:	6165      	str	r5, [r4, #20]
 8006f0c:	443e      	add	r6, r7
 8006f0e:	1bed      	subs	r5, r5, r7
 8006f10:	6026      	str	r6, [r4, #0]
 8006f12:	60a5      	str	r5, [r4, #8]
 8006f14:	4646      	mov	r6, r8
 8006f16:	4546      	cmp	r6, r8
 8006f18:	bf28      	it	cs
 8006f1a:	4646      	movcs	r6, r8
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	4649      	mov	r1, r9
 8006f20:	6820      	ldr	r0, [r4, #0]
 8006f22:	f000 fb05 	bl	8007530 <memmove>
 8006f26:	68a3      	ldr	r3, [r4, #8]
 8006f28:	1b9b      	subs	r3, r3, r6
 8006f2a:	60a3      	str	r3, [r4, #8]
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	441e      	add	r6, r3
 8006f30:	6026      	str	r6, [r4, #0]
 8006f32:	2000      	movs	r0, #0
 8006f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f38:	462a      	mov	r2, r5
 8006f3a:	f000 fb15 	bl	8007568 <_realloc_r>
 8006f3e:	4606      	mov	r6, r0
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d1e1      	bne.n	8006f08 <__ssputs_r+0x70>
 8006f44:	6921      	ldr	r1, [r4, #16]
 8006f46:	4650      	mov	r0, sl
 8006f48:	f7ff fefa 	bl	8006d40 <_free_r>
 8006f4c:	e7c7      	b.n	8006ede <__ssputs_r+0x46>
	...

08006f50 <_svfiprintf_r>:
 8006f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f54:	b09d      	sub	sp, #116	; 0x74
 8006f56:	4680      	mov	r8, r0
 8006f58:	9303      	str	r3, [sp, #12]
 8006f5a:	898b      	ldrh	r3, [r1, #12]
 8006f5c:	061c      	lsls	r4, r3, #24
 8006f5e:	460d      	mov	r5, r1
 8006f60:	4616      	mov	r6, r2
 8006f62:	d50f      	bpl.n	8006f84 <_svfiprintf_r+0x34>
 8006f64:	690b      	ldr	r3, [r1, #16]
 8006f66:	b96b      	cbnz	r3, 8006f84 <_svfiprintf_r+0x34>
 8006f68:	2140      	movs	r1, #64	; 0x40
 8006f6a:	f7ff ff37 	bl	8006ddc <_malloc_r>
 8006f6e:	6028      	str	r0, [r5, #0]
 8006f70:	6128      	str	r0, [r5, #16]
 8006f72:	b928      	cbnz	r0, 8006f80 <_svfiprintf_r+0x30>
 8006f74:	230c      	movs	r3, #12
 8006f76:	f8c8 3000 	str.w	r3, [r8]
 8006f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7e:	e0c5      	b.n	800710c <_svfiprintf_r+0x1bc>
 8006f80:	2340      	movs	r3, #64	; 0x40
 8006f82:	616b      	str	r3, [r5, #20]
 8006f84:	2300      	movs	r3, #0
 8006f86:	9309      	str	r3, [sp, #36]	; 0x24
 8006f88:	2320      	movs	r3, #32
 8006f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f8e:	2330      	movs	r3, #48	; 0x30
 8006f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f94:	f04f 0b01 	mov.w	fp, #1
 8006f98:	4637      	mov	r7, r6
 8006f9a:	463c      	mov	r4, r7
 8006f9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d13c      	bne.n	800701e <_svfiprintf_r+0xce>
 8006fa4:	ebb7 0a06 	subs.w	sl, r7, r6
 8006fa8:	d00b      	beq.n	8006fc2 <_svfiprintf_r+0x72>
 8006faa:	4653      	mov	r3, sl
 8006fac:	4632      	mov	r2, r6
 8006fae:	4629      	mov	r1, r5
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	f7ff ff71 	bl	8006e98 <__ssputs_r>
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	f000 80a3 	beq.w	8007102 <_svfiprintf_r+0x1b2>
 8006fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fbe:	4453      	add	r3, sl
 8006fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc2:	783b      	ldrb	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 809c 	beq.w	8007102 <_svfiprintf_r+0x1b2>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd0:	9304      	str	r3, [sp, #16]
 8006fd2:	9307      	str	r3, [sp, #28]
 8006fd4:	9205      	str	r2, [sp, #20]
 8006fd6:	9306      	str	r3, [sp, #24]
 8006fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8006fde:	2205      	movs	r2, #5
 8006fe0:	7821      	ldrb	r1, [r4, #0]
 8006fe2:	4850      	ldr	r0, [pc, #320]	; (8007124 <_svfiprintf_r+0x1d4>)
 8006fe4:	f7f9 f934 	bl	8000250 <memchr>
 8006fe8:	1c67      	adds	r7, r4, #1
 8006fea:	9b04      	ldr	r3, [sp, #16]
 8006fec:	b9d8      	cbnz	r0, 8007026 <_svfiprintf_r+0xd6>
 8006fee:	06d9      	lsls	r1, r3, #27
 8006ff0:	bf44      	itt	mi
 8006ff2:	2220      	movmi	r2, #32
 8006ff4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ff8:	071a      	lsls	r2, r3, #28
 8006ffa:	bf44      	itt	mi
 8006ffc:	222b      	movmi	r2, #43	; 0x2b
 8006ffe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007002:	7822      	ldrb	r2, [r4, #0]
 8007004:	2a2a      	cmp	r2, #42	; 0x2a
 8007006:	d016      	beq.n	8007036 <_svfiprintf_r+0xe6>
 8007008:	9a07      	ldr	r2, [sp, #28]
 800700a:	2100      	movs	r1, #0
 800700c:	200a      	movs	r0, #10
 800700e:	4627      	mov	r7, r4
 8007010:	3401      	adds	r4, #1
 8007012:	783b      	ldrb	r3, [r7, #0]
 8007014:	3b30      	subs	r3, #48	; 0x30
 8007016:	2b09      	cmp	r3, #9
 8007018:	d951      	bls.n	80070be <_svfiprintf_r+0x16e>
 800701a:	b1c9      	cbz	r1, 8007050 <_svfiprintf_r+0x100>
 800701c:	e011      	b.n	8007042 <_svfiprintf_r+0xf2>
 800701e:	2b25      	cmp	r3, #37	; 0x25
 8007020:	d0c0      	beq.n	8006fa4 <_svfiprintf_r+0x54>
 8007022:	4627      	mov	r7, r4
 8007024:	e7b9      	b.n	8006f9a <_svfiprintf_r+0x4a>
 8007026:	4a3f      	ldr	r2, [pc, #252]	; (8007124 <_svfiprintf_r+0x1d4>)
 8007028:	1a80      	subs	r0, r0, r2
 800702a:	fa0b f000 	lsl.w	r0, fp, r0
 800702e:	4318      	orrs	r0, r3
 8007030:	9004      	str	r0, [sp, #16]
 8007032:	463c      	mov	r4, r7
 8007034:	e7d3      	b.n	8006fde <_svfiprintf_r+0x8e>
 8007036:	9a03      	ldr	r2, [sp, #12]
 8007038:	1d11      	adds	r1, r2, #4
 800703a:	6812      	ldr	r2, [r2, #0]
 800703c:	9103      	str	r1, [sp, #12]
 800703e:	2a00      	cmp	r2, #0
 8007040:	db01      	blt.n	8007046 <_svfiprintf_r+0xf6>
 8007042:	9207      	str	r2, [sp, #28]
 8007044:	e004      	b.n	8007050 <_svfiprintf_r+0x100>
 8007046:	4252      	negs	r2, r2
 8007048:	f043 0302 	orr.w	r3, r3, #2
 800704c:	9207      	str	r2, [sp, #28]
 800704e:	9304      	str	r3, [sp, #16]
 8007050:	783b      	ldrb	r3, [r7, #0]
 8007052:	2b2e      	cmp	r3, #46	; 0x2e
 8007054:	d10e      	bne.n	8007074 <_svfiprintf_r+0x124>
 8007056:	787b      	ldrb	r3, [r7, #1]
 8007058:	2b2a      	cmp	r3, #42	; 0x2a
 800705a:	f107 0101 	add.w	r1, r7, #1
 800705e:	d132      	bne.n	80070c6 <_svfiprintf_r+0x176>
 8007060:	9b03      	ldr	r3, [sp, #12]
 8007062:	1d1a      	adds	r2, r3, #4
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	9203      	str	r2, [sp, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	bfb8      	it	lt
 800706c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007070:	3702      	adds	r7, #2
 8007072:	9305      	str	r3, [sp, #20]
 8007074:	4c2c      	ldr	r4, [pc, #176]	; (8007128 <_svfiprintf_r+0x1d8>)
 8007076:	7839      	ldrb	r1, [r7, #0]
 8007078:	2203      	movs	r2, #3
 800707a:	4620      	mov	r0, r4
 800707c:	f7f9 f8e8 	bl	8000250 <memchr>
 8007080:	b138      	cbz	r0, 8007092 <_svfiprintf_r+0x142>
 8007082:	2340      	movs	r3, #64	; 0x40
 8007084:	1b00      	subs	r0, r0, r4
 8007086:	fa03 f000 	lsl.w	r0, r3, r0
 800708a:	9b04      	ldr	r3, [sp, #16]
 800708c:	4303      	orrs	r3, r0
 800708e:	9304      	str	r3, [sp, #16]
 8007090:	3701      	adds	r7, #1
 8007092:	7839      	ldrb	r1, [r7, #0]
 8007094:	4825      	ldr	r0, [pc, #148]	; (800712c <_svfiprintf_r+0x1dc>)
 8007096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800709a:	2206      	movs	r2, #6
 800709c:	1c7e      	adds	r6, r7, #1
 800709e:	f7f9 f8d7 	bl	8000250 <memchr>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d035      	beq.n	8007112 <_svfiprintf_r+0x1c2>
 80070a6:	4b22      	ldr	r3, [pc, #136]	; (8007130 <_svfiprintf_r+0x1e0>)
 80070a8:	b9fb      	cbnz	r3, 80070ea <_svfiprintf_r+0x19a>
 80070aa:	9b03      	ldr	r3, [sp, #12]
 80070ac:	3307      	adds	r3, #7
 80070ae:	f023 0307 	bic.w	r3, r3, #7
 80070b2:	3308      	adds	r3, #8
 80070b4:	9303      	str	r3, [sp, #12]
 80070b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b8:	444b      	add	r3, r9
 80070ba:	9309      	str	r3, [sp, #36]	; 0x24
 80070bc:	e76c      	b.n	8006f98 <_svfiprintf_r+0x48>
 80070be:	fb00 3202 	mla	r2, r0, r2, r3
 80070c2:	2101      	movs	r1, #1
 80070c4:	e7a3      	b.n	800700e <_svfiprintf_r+0xbe>
 80070c6:	2300      	movs	r3, #0
 80070c8:	9305      	str	r3, [sp, #20]
 80070ca:	4618      	mov	r0, r3
 80070cc:	240a      	movs	r4, #10
 80070ce:	460f      	mov	r7, r1
 80070d0:	3101      	adds	r1, #1
 80070d2:	783a      	ldrb	r2, [r7, #0]
 80070d4:	3a30      	subs	r2, #48	; 0x30
 80070d6:	2a09      	cmp	r2, #9
 80070d8:	d903      	bls.n	80070e2 <_svfiprintf_r+0x192>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0ca      	beq.n	8007074 <_svfiprintf_r+0x124>
 80070de:	9005      	str	r0, [sp, #20]
 80070e0:	e7c8      	b.n	8007074 <_svfiprintf_r+0x124>
 80070e2:	fb04 2000 	mla	r0, r4, r0, r2
 80070e6:	2301      	movs	r3, #1
 80070e8:	e7f1      	b.n	80070ce <_svfiprintf_r+0x17e>
 80070ea:	ab03      	add	r3, sp, #12
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	462a      	mov	r2, r5
 80070f0:	4b10      	ldr	r3, [pc, #64]	; (8007134 <_svfiprintf_r+0x1e4>)
 80070f2:	a904      	add	r1, sp, #16
 80070f4:	4640      	mov	r0, r8
 80070f6:	f7fd fe23 	bl	8004d40 <_printf_float>
 80070fa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80070fe:	4681      	mov	r9, r0
 8007100:	d1d9      	bne.n	80070b6 <_svfiprintf_r+0x166>
 8007102:	89ab      	ldrh	r3, [r5, #12]
 8007104:	065b      	lsls	r3, r3, #25
 8007106:	f53f af38 	bmi.w	8006f7a <_svfiprintf_r+0x2a>
 800710a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800710c:	b01d      	add	sp, #116	; 0x74
 800710e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007112:	ab03      	add	r3, sp, #12
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	462a      	mov	r2, r5
 8007118:	4b06      	ldr	r3, [pc, #24]	; (8007134 <_svfiprintf_r+0x1e4>)
 800711a:	a904      	add	r1, sp, #16
 800711c:	4640      	mov	r0, r8
 800711e:	f7fe f8b1 	bl	8005284 <_printf_i>
 8007122:	e7ea      	b.n	80070fa <_svfiprintf_r+0x1aa>
 8007124:	0800980c 	.word	0x0800980c
 8007128:	08009812 	.word	0x08009812
 800712c:	08009816 	.word	0x08009816
 8007130:	08004d41 	.word	0x08004d41
 8007134:	08006e99 	.word	0x08006e99

08007138 <__sfputc_r>:
 8007138:	6893      	ldr	r3, [r2, #8]
 800713a:	3b01      	subs	r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	b410      	push	{r4}
 8007140:	6093      	str	r3, [r2, #8]
 8007142:	da09      	bge.n	8007158 <__sfputc_r+0x20>
 8007144:	6994      	ldr	r4, [r2, #24]
 8007146:	42a3      	cmp	r3, r4
 8007148:	db02      	blt.n	8007150 <__sfputc_r+0x18>
 800714a:	b2cb      	uxtb	r3, r1
 800714c:	2b0a      	cmp	r3, #10
 800714e:	d103      	bne.n	8007158 <__sfputc_r+0x20>
 8007150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007154:	f7fe ba5e 	b.w	8005614 <__swbuf_r>
 8007158:	6813      	ldr	r3, [r2, #0]
 800715a:	1c58      	adds	r0, r3, #1
 800715c:	6010      	str	r0, [r2, #0]
 800715e:	7019      	strb	r1, [r3, #0]
 8007160:	b2c8      	uxtb	r0, r1
 8007162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007166:	4770      	bx	lr

08007168 <__sfputs_r>:
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	4606      	mov	r6, r0
 800716c:	460f      	mov	r7, r1
 800716e:	4614      	mov	r4, r2
 8007170:	18d5      	adds	r5, r2, r3
 8007172:	42ac      	cmp	r4, r5
 8007174:	d101      	bne.n	800717a <__sfputs_r+0x12>
 8007176:	2000      	movs	r0, #0
 8007178:	e007      	b.n	800718a <__sfputs_r+0x22>
 800717a:	463a      	mov	r2, r7
 800717c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007180:	4630      	mov	r0, r6
 8007182:	f7ff ffd9 	bl	8007138 <__sfputc_r>
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d1f3      	bne.n	8007172 <__sfputs_r+0xa>
 800718a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800718c <_vfiprintf_r>:
 800718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	b09d      	sub	sp, #116	; 0x74
 8007192:	460c      	mov	r4, r1
 8007194:	4617      	mov	r7, r2
 8007196:	9303      	str	r3, [sp, #12]
 8007198:	4606      	mov	r6, r0
 800719a:	b118      	cbz	r0, 80071a4 <_vfiprintf_r+0x18>
 800719c:	6983      	ldr	r3, [r0, #24]
 800719e:	b90b      	cbnz	r3, 80071a4 <_vfiprintf_r+0x18>
 80071a0:	f7ff f9e4 	bl	800656c <__sinit>
 80071a4:	4b7c      	ldr	r3, [pc, #496]	; (8007398 <_vfiprintf_r+0x20c>)
 80071a6:	429c      	cmp	r4, r3
 80071a8:	d157      	bne.n	800725a <_vfiprintf_r+0xce>
 80071aa:	6874      	ldr	r4, [r6, #4]
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	0718      	lsls	r0, r3, #28
 80071b0:	d55d      	bpl.n	800726e <_vfiprintf_r+0xe2>
 80071b2:	6923      	ldr	r3, [r4, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d05a      	beq.n	800726e <_vfiprintf_r+0xe2>
 80071b8:	2300      	movs	r3, #0
 80071ba:	9309      	str	r3, [sp, #36]	; 0x24
 80071bc:	2320      	movs	r3, #32
 80071be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071c2:	2330      	movs	r3, #48	; 0x30
 80071c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071c8:	f04f 0b01 	mov.w	fp, #1
 80071cc:	46b8      	mov	r8, r7
 80071ce:	4645      	mov	r5, r8
 80071d0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d155      	bne.n	8007284 <_vfiprintf_r+0xf8>
 80071d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80071dc:	d00b      	beq.n	80071f6 <_vfiprintf_r+0x6a>
 80071de:	4653      	mov	r3, sl
 80071e0:	463a      	mov	r2, r7
 80071e2:	4621      	mov	r1, r4
 80071e4:	4630      	mov	r0, r6
 80071e6:	f7ff ffbf 	bl	8007168 <__sfputs_r>
 80071ea:	3001      	adds	r0, #1
 80071ec:	f000 80c4 	beq.w	8007378 <_vfiprintf_r+0x1ec>
 80071f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f2:	4453      	add	r3, sl
 80071f4:	9309      	str	r3, [sp, #36]	; 0x24
 80071f6:	f898 3000 	ldrb.w	r3, [r8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80bc 	beq.w	8007378 <_vfiprintf_r+0x1ec>
 8007200:	2300      	movs	r3, #0
 8007202:	f04f 32ff 	mov.w	r2, #4294967295
 8007206:	9304      	str	r3, [sp, #16]
 8007208:	9307      	str	r3, [sp, #28]
 800720a:	9205      	str	r2, [sp, #20]
 800720c:	9306      	str	r3, [sp, #24]
 800720e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007212:	931a      	str	r3, [sp, #104]	; 0x68
 8007214:	2205      	movs	r2, #5
 8007216:	7829      	ldrb	r1, [r5, #0]
 8007218:	4860      	ldr	r0, [pc, #384]	; (800739c <_vfiprintf_r+0x210>)
 800721a:	f7f9 f819 	bl	8000250 <memchr>
 800721e:	f105 0801 	add.w	r8, r5, #1
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	2800      	cmp	r0, #0
 8007226:	d131      	bne.n	800728c <_vfiprintf_r+0x100>
 8007228:	06d9      	lsls	r1, r3, #27
 800722a:	bf44      	itt	mi
 800722c:	2220      	movmi	r2, #32
 800722e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007232:	071a      	lsls	r2, r3, #28
 8007234:	bf44      	itt	mi
 8007236:	222b      	movmi	r2, #43	; 0x2b
 8007238:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800723c:	782a      	ldrb	r2, [r5, #0]
 800723e:	2a2a      	cmp	r2, #42	; 0x2a
 8007240:	d02c      	beq.n	800729c <_vfiprintf_r+0x110>
 8007242:	9a07      	ldr	r2, [sp, #28]
 8007244:	2100      	movs	r1, #0
 8007246:	200a      	movs	r0, #10
 8007248:	46a8      	mov	r8, r5
 800724a:	3501      	adds	r5, #1
 800724c:	f898 3000 	ldrb.w	r3, [r8]
 8007250:	3b30      	subs	r3, #48	; 0x30
 8007252:	2b09      	cmp	r3, #9
 8007254:	d96d      	bls.n	8007332 <_vfiprintf_r+0x1a6>
 8007256:	b371      	cbz	r1, 80072b6 <_vfiprintf_r+0x12a>
 8007258:	e026      	b.n	80072a8 <_vfiprintf_r+0x11c>
 800725a:	4b51      	ldr	r3, [pc, #324]	; (80073a0 <_vfiprintf_r+0x214>)
 800725c:	429c      	cmp	r4, r3
 800725e:	d101      	bne.n	8007264 <_vfiprintf_r+0xd8>
 8007260:	68b4      	ldr	r4, [r6, #8]
 8007262:	e7a3      	b.n	80071ac <_vfiprintf_r+0x20>
 8007264:	4b4f      	ldr	r3, [pc, #316]	; (80073a4 <_vfiprintf_r+0x218>)
 8007266:	429c      	cmp	r4, r3
 8007268:	bf08      	it	eq
 800726a:	68f4      	ldreq	r4, [r6, #12]
 800726c:	e79e      	b.n	80071ac <_vfiprintf_r+0x20>
 800726e:	4621      	mov	r1, r4
 8007270:	4630      	mov	r0, r6
 8007272:	f7fe fa21 	bl	80056b8 <__swsetup_r>
 8007276:	2800      	cmp	r0, #0
 8007278:	d09e      	beq.n	80071b8 <_vfiprintf_r+0x2c>
 800727a:	f04f 30ff 	mov.w	r0, #4294967295
 800727e:	b01d      	add	sp, #116	; 0x74
 8007280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007284:	2b25      	cmp	r3, #37	; 0x25
 8007286:	d0a7      	beq.n	80071d8 <_vfiprintf_r+0x4c>
 8007288:	46a8      	mov	r8, r5
 800728a:	e7a0      	b.n	80071ce <_vfiprintf_r+0x42>
 800728c:	4a43      	ldr	r2, [pc, #268]	; (800739c <_vfiprintf_r+0x210>)
 800728e:	1a80      	subs	r0, r0, r2
 8007290:	fa0b f000 	lsl.w	r0, fp, r0
 8007294:	4318      	orrs	r0, r3
 8007296:	9004      	str	r0, [sp, #16]
 8007298:	4645      	mov	r5, r8
 800729a:	e7bb      	b.n	8007214 <_vfiprintf_r+0x88>
 800729c:	9a03      	ldr	r2, [sp, #12]
 800729e:	1d11      	adds	r1, r2, #4
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	9103      	str	r1, [sp, #12]
 80072a4:	2a00      	cmp	r2, #0
 80072a6:	db01      	blt.n	80072ac <_vfiprintf_r+0x120>
 80072a8:	9207      	str	r2, [sp, #28]
 80072aa:	e004      	b.n	80072b6 <_vfiprintf_r+0x12a>
 80072ac:	4252      	negs	r2, r2
 80072ae:	f043 0302 	orr.w	r3, r3, #2
 80072b2:	9207      	str	r2, [sp, #28]
 80072b4:	9304      	str	r3, [sp, #16]
 80072b6:	f898 3000 	ldrb.w	r3, [r8]
 80072ba:	2b2e      	cmp	r3, #46	; 0x2e
 80072bc:	d110      	bne.n	80072e0 <_vfiprintf_r+0x154>
 80072be:	f898 3001 	ldrb.w	r3, [r8, #1]
 80072c2:	2b2a      	cmp	r3, #42	; 0x2a
 80072c4:	f108 0101 	add.w	r1, r8, #1
 80072c8:	d137      	bne.n	800733a <_vfiprintf_r+0x1ae>
 80072ca:	9b03      	ldr	r3, [sp, #12]
 80072cc:	1d1a      	adds	r2, r3, #4
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	9203      	str	r2, [sp, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	bfb8      	it	lt
 80072d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80072da:	f108 0802 	add.w	r8, r8, #2
 80072de:	9305      	str	r3, [sp, #20]
 80072e0:	4d31      	ldr	r5, [pc, #196]	; (80073a8 <_vfiprintf_r+0x21c>)
 80072e2:	f898 1000 	ldrb.w	r1, [r8]
 80072e6:	2203      	movs	r2, #3
 80072e8:	4628      	mov	r0, r5
 80072ea:	f7f8 ffb1 	bl	8000250 <memchr>
 80072ee:	b140      	cbz	r0, 8007302 <_vfiprintf_r+0x176>
 80072f0:	2340      	movs	r3, #64	; 0x40
 80072f2:	1b40      	subs	r0, r0, r5
 80072f4:	fa03 f000 	lsl.w	r0, r3, r0
 80072f8:	9b04      	ldr	r3, [sp, #16]
 80072fa:	4303      	orrs	r3, r0
 80072fc:	9304      	str	r3, [sp, #16]
 80072fe:	f108 0801 	add.w	r8, r8, #1
 8007302:	f898 1000 	ldrb.w	r1, [r8]
 8007306:	4829      	ldr	r0, [pc, #164]	; (80073ac <_vfiprintf_r+0x220>)
 8007308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800730c:	2206      	movs	r2, #6
 800730e:	f108 0701 	add.w	r7, r8, #1
 8007312:	f7f8 ff9d 	bl	8000250 <memchr>
 8007316:	2800      	cmp	r0, #0
 8007318:	d034      	beq.n	8007384 <_vfiprintf_r+0x1f8>
 800731a:	4b25      	ldr	r3, [pc, #148]	; (80073b0 <_vfiprintf_r+0x224>)
 800731c:	bb03      	cbnz	r3, 8007360 <_vfiprintf_r+0x1d4>
 800731e:	9b03      	ldr	r3, [sp, #12]
 8007320:	3307      	adds	r3, #7
 8007322:	f023 0307 	bic.w	r3, r3, #7
 8007326:	3308      	adds	r3, #8
 8007328:	9303      	str	r3, [sp, #12]
 800732a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732c:	444b      	add	r3, r9
 800732e:	9309      	str	r3, [sp, #36]	; 0x24
 8007330:	e74c      	b.n	80071cc <_vfiprintf_r+0x40>
 8007332:	fb00 3202 	mla	r2, r0, r2, r3
 8007336:	2101      	movs	r1, #1
 8007338:	e786      	b.n	8007248 <_vfiprintf_r+0xbc>
 800733a:	2300      	movs	r3, #0
 800733c:	9305      	str	r3, [sp, #20]
 800733e:	4618      	mov	r0, r3
 8007340:	250a      	movs	r5, #10
 8007342:	4688      	mov	r8, r1
 8007344:	3101      	adds	r1, #1
 8007346:	f898 2000 	ldrb.w	r2, [r8]
 800734a:	3a30      	subs	r2, #48	; 0x30
 800734c:	2a09      	cmp	r2, #9
 800734e:	d903      	bls.n	8007358 <_vfiprintf_r+0x1cc>
 8007350:	2b00      	cmp	r3, #0
 8007352:	d0c5      	beq.n	80072e0 <_vfiprintf_r+0x154>
 8007354:	9005      	str	r0, [sp, #20]
 8007356:	e7c3      	b.n	80072e0 <_vfiprintf_r+0x154>
 8007358:	fb05 2000 	mla	r0, r5, r0, r2
 800735c:	2301      	movs	r3, #1
 800735e:	e7f0      	b.n	8007342 <_vfiprintf_r+0x1b6>
 8007360:	ab03      	add	r3, sp, #12
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	4622      	mov	r2, r4
 8007366:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <_vfiprintf_r+0x228>)
 8007368:	a904      	add	r1, sp, #16
 800736a:	4630      	mov	r0, r6
 800736c:	f7fd fce8 	bl	8004d40 <_printf_float>
 8007370:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007374:	4681      	mov	r9, r0
 8007376:	d1d8      	bne.n	800732a <_vfiprintf_r+0x19e>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	065b      	lsls	r3, r3, #25
 800737c:	f53f af7d 	bmi.w	800727a <_vfiprintf_r+0xee>
 8007380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007382:	e77c      	b.n	800727e <_vfiprintf_r+0xf2>
 8007384:	ab03      	add	r3, sp, #12
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	4622      	mov	r2, r4
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <_vfiprintf_r+0x228>)
 800738c:	a904      	add	r1, sp, #16
 800738e:	4630      	mov	r0, r6
 8007390:	f7fd ff78 	bl	8005284 <_printf_i>
 8007394:	e7ec      	b.n	8007370 <_vfiprintf_r+0x1e4>
 8007396:	bf00      	nop
 8007398:	080096cc 	.word	0x080096cc
 800739c:	0800980c 	.word	0x0800980c
 80073a0:	080096ec 	.word	0x080096ec
 80073a4:	080096ac 	.word	0x080096ac
 80073a8:	08009812 	.word	0x08009812
 80073ac:	08009816 	.word	0x08009816
 80073b0:	08004d41 	.word	0x08004d41
 80073b4:	08007169 	.word	0x08007169

080073b8 <_sbrk_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4c06      	ldr	r4, [pc, #24]	; (80073d4 <_sbrk_r+0x1c>)
 80073bc:	2300      	movs	r3, #0
 80073be:	4605      	mov	r5, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	6023      	str	r3, [r4, #0]
 80073c4:	f7fd f9da 	bl	800477c <_sbrk>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_sbrk_r+0x1a>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_sbrk_r+0x1a>
 80073d0:	602b      	str	r3, [r5, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	200014a4 	.word	0x200014a4

080073d8 <__sread>:
 80073d8:	b510      	push	{r4, lr}
 80073da:	460c      	mov	r4, r1
 80073dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e0:	f000 f8e8 	bl	80075b4 <_read_r>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	bfab      	itete	ge
 80073e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073ea:	89a3      	ldrhlt	r3, [r4, #12]
 80073ec:	181b      	addge	r3, r3, r0
 80073ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073f2:	bfac      	ite	ge
 80073f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80073f6:	81a3      	strhlt	r3, [r4, #12]
 80073f8:	bd10      	pop	{r4, pc}

080073fa <__swrite>:
 80073fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073fe:	461f      	mov	r7, r3
 8007400:	898b      	ldrh	r3, [r1, #12]
 8007402:	05db      	lsls	r3, r3, #23
 8007404:	4605      	mov	r5, r0
 8007406:	460c      	mov	r4, r1
 8007408:	4616      	mov	r6, r2
 800740a:	d505      	bpl.n	8007418 <__swrite+0x1e>
 800740c:	2302      	movs	r3, #2
 800740e:	2200      	movs	r2, #0
 8007410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007414:	f000 f868 	bl	80074e8 <_lseek_r>
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800741e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007422:	81a3      	strh	r3, [r4, #12]
 8007424:	4632      	mov	r2, r6
 8007426:	463b      	mov	r3, r7
 8007428:	4628      	mov	r0, r5
 800742a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800742e:	f000 b817 	b.w	8007460 <_write_r>

08007432 <__sseek>:
 8007432:	b510      	push	{r4, lr}
 8007434:	460c      	mov	r4, r1
 8007436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743a:	f000 f855 	bl	80074e8 <_lseek_r>
 800743e:	1c43      	adds	r3, r0, #1
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	bf15      	itete	ne
 8007444:	6560      	strne	r0, [r4, #84]	; 0x54
 8007446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800744a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800744e:	81a3      	strheq	r3, [r4, #12]
 8007450:	bf18      	it	ne
 8007452:	81a3      	strhne	r3, [r4, #12]
 8007454:	bd10      	pop	{r4, pc}

08007456 <__sclose>:
 8007456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745a:	f000 b813 	b.w	8007484 <_close_r>
	...

08007460 <_write_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4c07      	ldr	r4, [pc, #28]	; (8007480 <_write_r+0x20>)
 8007464:	4605      	mov	r5, r0
 8007466:	4608      	mov	r0, r1
 8007468:	4611      	mov	r1, r2
 800746a:	2200      	movs	r2, #0
 800746c:	6022      	str	r2, [r4, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	f7fd f96a 	bl	8004748 <_write>
 8007474:	1c43      	adds	r3, r0, #1
 8007476:	d102      	bne.n	800747e <_write_r+0x1e>
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	b103      	cbz	r3, 800747e <_write_r+0x1e>
 800747c:	602b      	str	r3, [r5, #0]
 800747e:	bd38      	pop	{r3, r4, r5, pc}
 8007480:	200014a4 	.word	0x200014a4

08007484 <_close_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4c06      	ldr	r4, [pc, #24]	; (80074a0 <_close_r+0x1c>)
 8007488:	2300      	movs	r3, #0
 800748a:	4605      	mov	r5, r0
 800748c:	4608      	mov	r0, r1
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	f7fd f982 	bl	8004798 <_close>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_close_r+0x1a>
 8007498:	6823      	ldr	r3, [r4, #0]
 800749a:	b103      	cbz	r3, 800749e <_close_r+0x1a>
 800749c:	602b      	str	r3, [r5, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	200014a4 	.word	0x200014a4

080074a4 <_fstat_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4c07      	ldr	r4, [pc, #28]	; (80074c4 <_fstat_r+0x20>)
 80074a8:	2300      	movs	r3, #0
 80074aa:	4605      	mov	r5, r0
 80074ac:	4608      	mov	r0, r1
 80074ae:	4611      	mov	r1, r2
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	f7fd f979 	bl	80047a8 <_fstat>
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	d102      	bne.n	80074c0 <_fstat_r+0x1c>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	b103      	cbz	r3, 80074c0 <_fstat_r+0x1c>
 80074be:	602b      	str	r3, [r5, #0]
 80074c0:	bd38      	pop	{r3, r4, r5, pc}
 80074c2:	bf00      	nop
 80074c4:	200014a4 	.word	0x200014a4

080074c8 <_isatty_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4c06      	ldr	r4, [pc, #24]	; (80074e4 <_isatty_r+0x1c>)
 80074cc:	2300      	movs	r3, #0
 80074ce:	4605      	mov	r5, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	6023      	str	r3, [r4, #0]
 80074d4:	f7fd f970 	bl	80047b8 <_isatty>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d102      	bne.n	80074e2 <_isatty_r+0x1a>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	b103      	cbz	r3, 80074e2 <_isatty_r+0x1a>
 80074e0:	602b      	str	r3, [r5, #0]
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	200014a4 	.word	0x200014a4

080074e8 <_lseek_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4c07      	ldr	r4, [pc, #28]	; (8007508 <_lseek_r+0x20>)
 80074ec:	4605      	mov	r5, r0
 80074ee:	4608      	mov	r0, r1
 80074f0:	4611      	mov	r1, r2
 80074f2:	2200      	movs	r2, #0
 80074f4:	6022      	str	r2, [r4, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	f7fd f966 	bl	80047c8 <_lseek>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d102      	bne.n	8007506 <_lseek_r+0x1e>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	b103      	cbz	r3, 8007506 <_lseek_r+0x1e>
 8007504:	602b      	str	r3, [r5, #0]
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	200014a4 	.word	0x200014a4

0800750c <__ascii_mbtowc>:
 800750c:	b082      	sub	sp, #8
 800750e:	b901      	cbnz	r1, 8007512 <__ascii_mbtowc+0x6>
 8007510:	a901      	add	r1, sp, #4
 8007512:	b142      	cbz	r2, 8007526 <__ascii_mbtowc+0x1a>
 8007514:	b14b      	cbz	r3, 800752a <__ascii_mbtowc+0x1e>
 8007516:	7813      	ldrb	r3, [r2, #0]
 8007518:	600b      	str	r3, [r1, #0]
 800751a:	7812      	ldrb	r2, [r2, #0]
 800751c:	1c10      	adds	r0, r2, #0
 800751e:	bf18      	it	ne
 8007520:	2001      	movne	r0, #1
 8007522:	b002      	add	sp, #8
 8007524:	4770      	bx	lr
 8007526:	4610      	mov	r0, r2
 8007528:	e7fb      	b.n	8007522 <__ascii_mbtowc+0x16>
 800752a:	f06f 0001 	mvn.w	r0, #1
 800752e:	e7f8      	b.n	8007522 <__ascii_mbtowc+0x16>

08007530 <memmove>:
 8007530:	4288      	cmp	r0, r1
 8007532:	b510      	push	{r4, lr}
 8007534:	eb01 0302 	add.w	r3, r1, r2
 8007538:	d803      	bhi.n	8007542 <memmove+0x12>
 800753a:	1e42      	subs	r2, r0, #1
 800753c:	4299      	cmp	r1, r3
 800753e:	d10c      	bne.n	800755a <memmove+0x2a>
 8007540:	bd10      	pop	{r4, pc}
 8007542:	4298      	cmp	r0, r3
 8007544:	d2f9      	bcs.n	800753a <memmove+0xa>
 8007546:	1881      	adds	r1, r0, r2
 8007548:	1ad2      	subs	r2, r2, r3
 800754a:	42d3      	cmn	r3, r2
 800754c:	d100      	bne.n	8007550 <memmove+0x20>
 800754e:	bd10      	pop	{r4, pc}
 8007550:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007554:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007558:	e7f7      	b.n	800754a <memmove+0x1a>
 800755a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800755e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007562:	e7eb      	b.n	800753c <memmove+0xc>

08007564 <__malloc_lock>:
 8007564:	4770      	bx	lr

08007566 <__malloc_unlock>:
 8007566:	4770      	bx	lr

08007568 <_realloc_r>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	4607      	mov	r7, r0
 800756c:	4614      	mov	r4, r2
 800756e:	460e      	mov	r6, r1
 8007570:	b921      	cbnz	r1, 800757c <_realloc_r+0x14>
 8007572:	4611      	mov	r1, r2
 8007574:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007578:	f7ff bc30 	b.w	8006ddc <_malloc_r>
 800757c:	b922      	cbnz	r2, 8007588 <_realloc_r+0x20>
 800757e:	f7ff fbdf 	bl	8006d40 <_free_r>
 8007582:	4625      	mov	r5, r4
 8007584:	4628      	mov	r0, r5
 8007586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007588:	f000 f833 	bl	80075f2 <_malloc_usable_size_r>
 800758c:	4284      	cmp	r4, r0
 800758e:	d90f      	bls.n	80075b0 <_realloc_r+0x48>
 8007590:	4621      	mov	r1, r4
 8007592:	4638      	mov	r0, r7
 8007594:	f7ff fc22 	bl	8006ddc <_malloc_r>
 8007598:	4605      	mov	r5, r0
 800759a:	2800      	cmp	r0, #0
 800759c:	d0f2      	beq.n	8007584 <_realloc_r+0x1c>
 800759e:	4631      	mov	r1, r6
 80075a0:	4622      	mov	r2, r4
 80075a2:	f7fd fb37 	bl	8004c14 <memcpy>
 80075a6:	4631      	mov	r1, r6
 80075a8:	4638      	mov	r0, r7
 80075aa:	f7ff fbc9 	bl	8006d40 <_free_r>
 80075ae:	e7e9      	b.n	8007584 <_realloc_r+0x1c>
 80075b0:	4635      	mov	r5, r6
 80075b2:	e7e7      	b.n	8007584 <_realloc_r+0x1c>

080075b4 <_read_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4c07      	ldr	r4, [pc, #28]	; (80075d4 <_read_r+0x20>)
 80075b8:	4605      	mov	r5, r0
 80075ba:	4608      	mov	r0, r1
 80075bc:	4611      	mov	r1, r2
 80075be:	2200      	movs	r2, #0
 80075c0:	6022      	str	r2, [r4, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	f7fd f908 	bl	80047d8 <_read>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d102      	bne.n	80075d2 <_read_r+0x1e>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	b103      	cbz	r3, 80075d2 <_read_r+0x1e>
 80075d0:	602b      	str	r3, [r5, #0]
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	200014a4 	.word	0x200014a4

080075d8 <__ascii_wctomb>:
 80075d8:	b149      	cbz	r1, 80075ee <__ascii_wctomb+0x16>
 80075da:	2aff      	cmp	r2, #255	; 0xff
 80075dc:	bf85      	ittet	hi
 80075de:	238a      	movhi	r3, #138	; 0x8a
 80075e0:	6003      	strhi	r3, [r0, #0]
 80075e2:	700a      	strbls	r2, [r1, #0]
 80075e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80075e8:	bf98      	it	ls
 80075ea:	2001      	movls	r0, #1
 80075ec:	4770      	bx	lr
 80075ee:	4608      	mov	r0, r1
 80075f0:	4770      	bx	lr

080075f2 <_malloc_usable_size_r>:
 80075f2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f1a0 0004 	sub.w	r0, r0, #4
 80075fc:	bfbc      	itt	lt
 80075fe:	580b      	ldrlt	r3, [r1, r0]
 8007600:	18c0      	addlt	r0, r0, r3
 8007602:	4770      	bx	lr
 8007604:	0000      	movs	r0, r0
	...

08007608 <cos>:
 8007608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800760a:	eeb0 7b40 	vmov.f64	d7, d0
 800760e:	ee17 3a90 	vmov	r3, s15
 8007612:	4a19      	ldr	r2, [pc, #100]	; (8007678 <cos+0x70>)
 8007614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007618:	4293      	cmp	r3, r2
 800761a:	dc04      	bgt.n	8007626 <cos+0x1e>
 800761c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8007670 <cos+0x68>
 8007620:	f001 f8e2 	bl	80087e8 <__kernel_cos>
 8007624:	e004      	b.n	8007630 <cos+0x28>
 8007626:	4a15      	ldr	r2, [pc, #84]	; (800767c <cos+0x74>)
 8007628:	4293      	cmp	r3, r2
 800762a:	dd04      	ble.n	8007636 <cos+0x2e>
 800762c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8007630:	b005      	add	sp, #20
 8007632:	f85d fb04 	ldr.w	pc, [sp], #4
 8007636:	4668      	mov	r0, sp
 8007638:	f000 fef6 	bl	8008428 <__ieee754_rem_pio2>
 800763c:	f000 0003 	and.w	r0, r0, #3
 8007640:	2801      	cmp	r0, #1
 8007642:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007646:	ed9d 0b00 	vldr	d0, [sp]
 800764a:	d007      	beq.n	800765c <cos+0x54>
 800764c:	2802      	cmp	r0, #2
 800764e:	d00a      	beq.n	8007666 <cos+0x5e>
 8007650:	2800      	cmp	r0, #0
 8007652:	d0e5      	beq.n	8007620 <cos+0x18>
 8007654:	2001      	movs	r0, #1
 8007656:	f001 fba7 	bl	8008da8 <__kernel_sin>
 800765a:	e7e9      	b.n	8007630 <cos+0x28>
 800765c:	f001 fba4 	bl	8008da8 <__kernel_sin>
 8007660:	eeb1 0b40 	vneg.f64	d0, d0
 8007664:	e7e4      	b.n	8007630 <cos+0x28>
 8007666:	f001 f8bf 	bl	80087e8 <__kernel_cos>
 800766a:	e7f9      	b.n	8007660 <cos+0x58>
 800766c:	f3af 8000 	nop.w
	...
 8007678:	3fe921fb 	.word	0x3fe921fb
 800767c:	7fefffff 	.word	0x7fefffff

08007680 <sin>:
 8007680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007682:	eeb0 7b40 	vmov.f64	d7, d0
 8007686:	ee17 3a90 	vmov	r3, s15
 800768a:	4a19      	ldr	r2, [pc, #100]	; (80076f0 <sin+0x70>)
 800768c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007690:	4293      	cmp	r3, r2
 8007692:	dc05      	bgt.n	80076a0 <sin+0x20>
 8007694:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80076e8 <sin+0x68>
 8007698:	2000      	movs	r0, #0
 800769a:	f001 fb85 	bl	8008da8 <__kernel_sin>
 800769e:	e004      	b.n	80076aa <sin+0x2a>
 80076a0:	4a14      	ldr	r2, [pc, #80]	; (80076f4 <sin+0x74>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	dd04      	ble.n	80076b0 <sin+0x30>
 80076a6:	ee30 0b40 	vsub.f64	d0, d0, d0
 80076aa:	b005      	add	sp, #20
 80076ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80076b0:	4668      	mov	r0, sp
 80076b2:	f000 feb9 	bl	8008428 <__ieee754_rem_pio2>
 80076b6:	f000 0003 	and.w	r0, r0, #3
 80076ba:	2801      	cmp	r0, #1
 80076bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076c0:	ed9d 0b00 	vldr	d0, [sp]
 80076c4:	d004      	beq.n	80076d0 <sin+0x50>
 80076c6:	2802      	cmp	r0, #2
 80076c8:	d005      	beq.n	80076d6 <sin+0x56>
 80076ca:	b950      	cbnz	r0, 80076e2 <sin+0x62>
 80076cc:	2001      	movs	r0, #1
 80076ce:	e7e4      	b.n	800769a <sin+0x1a>
 80076d0:	f001 f88a 	bl	80087e8 <__kernel_cos>
 80076d4:	e7e9      	b.n	80076aa <sin+0x2a>
 80076d6:	2001      	movs	r0, #1
 80076d8:	f001 fb66 	bl	8008da8 <__kernel_sin>
 80076dc:	eeb1 0b40 	vneg.f64	d0, d0
 80076e0:	e7e3      	b.n	80076aa <sin+0x2a>
 80076e2:	f001 f881 	bl	80087e8 <__kernel_cos>
 80076e6:	e7f9      	b.n	80076dc <sin+0x5c>
	...
 80076f0:	3fe921fb 	.word	0x3fe921fb
 80076f4:	7fefffff 	.word	0x7fefffff

080076f8 <log>:
 80076f8:	b500      	push	{lr}
 80076fa:	ed2d 8b02 	vpush	{d8}
 80076fe:	eeb0 8b40 	vmov.f64	d8, d0
 8007702:	b08b      	sub	sp, #44	; 0x2c
 8007704:	f000 f9e8 	bl	8007ad8 <__ieee754_log>
 8007708:	4b2d      	ldr	r3, [pc, #180]	; (80077c0 <log+0xc8>)
 800770a:	f993 3000 	ldrsb.w	r3, [r3]
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	d051      	beq.n	80077b6 <log+0xbe>
 8007712:	eeb4 8b48 	vcmp.f64	d8, d8
 8007716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800771a:	d64c      	bvs.n	80077b6 <log+0xbe>
 800771c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8007720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007724:	dc47      	bgt.n	80077b6 <log+0xbe>
 8007726:	4a27      	ldr	r2, [pc, #156]	; (80077c4 <log+0xcc>)
 8007728:	9201      	str	r2, [sp, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	9208      	str	r2, [sp, #32]
 800772e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007732:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007736:	b993      	cbnz	r3, 800775e <log+0x66>
 8007738:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800773c:	4922      	ldr	r1, [pc, #136]	; (80077c8 <log+0xd0>)
 800773e:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8007742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007746:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800774a:	d025      	beq.n	8007798 <log+0xa0>
 800774c:	2201      	movs	r2, #1
 800774e:	2b02      	cmp	r3, #2
 8007750:	9200      	str	r2, [sp, #0]
 8007752:	d116      	bne.n	8007782 <log+0x8a>
 8007754:	f001 fd2c 	bl	80091b0 <__errno>
 8007758:	2321      	movs	r3, #33	; 0x21
 800775a:	6003      	str	r3, [r0, #0]
 800775c:	e016      	b.n	800778c <log+0x94>
 800775e:	491b      	ldr	r1, [pc, #108]	; (80077cc <log+0xd4>)
 8007760:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007764:	2000      	movs	r0, #0
 8007766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800776e:	d1ed      	bne.n	800774c <log+0x54>
 8007770:	2202      	movs	r2, #2
 8007772:	4293      	cmp	r3, r2
 8007774:	9200      	str	r2, [sp, #0]
 8007776:	d111      	bne.n	800779c <log+0xa4>
 8007778:	f001 fd1a 	bl	80091b0 <__errno>
 800777c:	2322      	movs	r3, #34	; 0x22
 800777e:	6003      	str	r3, [r0, #0]
 8007780:	e011      	b.n	80077a6 <log+0xae>
 8007782:	4668      	mov	r0, sp
 8007784:	f001 fbf0 	bl	8008f68 <matherr>
 8007788:	2800      	cmp	r0, #0
 800778a:	d0e3      	beq.n	8007754 <log+0x5c>
 800778c:	4810      	ldr	r0, [pc, #64]	; (80077d0 <log+0xd8>)
 800778e:	f001 fbef 	bl	8008f70 <nan>
 8007792:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007796:	e006      	b.n	80077a6 <log+0xae>
 8007798:	2302      	movs	r3, #2
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	4668      	mov	r0, sp
 800779e:	f001 fbe3 	bl	8008f68 <matherr>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d0e8      	beq.n	8007778 <log+0x80>
 80077a6:	9b08      	ldr	r3, [sp, #32]
 80077a8:	b11b      	cbz	r3, 80077b2 <log+0xba>
 80077aa:	f001 fd01 	bl	80091b0 <__errno>
 80077ae:	9b08      	ldr	r3, [sp, #32]
 80077b0:	6003      	str	r3, [r0, #0]
 80077b2:	ed9d 0b06 	vldr	d0, [sp, #24]
 80077b6:	b00b      	add	sp, #44	; 0x2c
 80077b8:	ecbd 8b02 	vpop	{d8}
 80077bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80077c0:	20000224 	.word	0x20000224
 80077c4:	08009924 	.word	0x08009924
 80077c8:	c7efffff 	.word	0xc7efffff
 80077cc:	fff00000 	.word	0xfff00000
 80077d0:	08009660 	.word	0x08009660
 80077d4:	00000000 	.word	0x00000000

080077d8 <pow>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	ed2d 8b0a 	vpush	{d8-d12}
 80077de:	eeb0 9b40 	vmov.f64	d9, d0
 80077e2:	eeb0 8b41 	vmov.f64	d8, d1
 80077e6:	4c8e      	ldr	r4, [pc, #568]	; (8007a20 <pow+0x248>)
 80077e8:	b08a      	sub	sp, #40	; 0x28
 80077ea:	f000 fa95 	bl	8007d18 <__ieee754_pow>
 80077ee:	f994 3000 	ldrsb.w	r3, [r4]
 80077f2:	eeb0 ab40 	vmov.f64	d10, d0
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	4626      	mov	r6, r4
 80077fa:	d04b      	beq.n	8007894 <pow+0xbc>
 80077fc:	eeb4 8b48 	vcmp.f64	d8, d8
 8007800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007804:	d646      	bvs.n	8007894 <pow+0xbc>
 8007806:	eeb4 9b49 	vcmp.f64	d9, d9
 800780a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800780e:	d719      	bvc.n	8007844 <pow+0x6c>
 8007810:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007818:	d13c      	bne.n	8007894 <pow+0xbc>
 800781a:	2201      	movs	r2, #1
 800781c:	9200      	str	r2, [sp, #0]
 800781e:	4981      	ldr	r1, [pc, #516]	; (8007a24 <pow+0x24c>)
 8007820:	4a81      	ldr	r2, [pc, #516]	; (8007a28 <pow+0x250>)
 8007822:	9201      	str	r2, [sp, #4]
 8007824:	2000      	movs	r0, #0
 8007826:	2200      	movs	r2, #0
 8007828:	2b02      	cmp	r3, #2
 800782a:	9208      	str	r2, [sp, #32]
 800782c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8007830:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007834:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007838:	d02a      	beq.n	8007890 <pow+0xb8>
 800783a:	4668      	mov	r0, sp
 800783c:	f001 fb94 	bl	8008f68 <matherr>
 8007840:	bb00      	cbnz	r0, 8007884 <pow+0xac>
 8007842:	e04e      	b.n	80078e2 <pow+0x10a>
 8007844:	ed9f bb74 	vldr	d11, [pc, #464]	; 8007a18 <pow+0x240>
 8007848:	eeb4 9b4b 	vcmp.f64	d9, d11
 800784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007850:	eeb0 cb4b 	vmov.f64	d12, d11
 8007854:	d14a      	bne.n	80078ec <pow+0x114>
 8007856:	eeb4 8b4b 	vcmp.f64	d8, d11
 800785a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785e:	d11f      	bne.n	80078a0 <pow+0xc8>
 8007860:	2201      	movs	r2, #1
 8007862:	9200      	str	r2, [sp, #0]
 8007864:	4a70      	ldr	r2, [pc, #448]	; (8007a28 <pow+0x250>)
 8007866:	9201      	str	r2, [sp, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	9208      	str	r2, [sp, #32]
 800786c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8007870:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007874:	ed8d bb06 	vstr	d11, [sp, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0de      	beq.n	800783a <pow+0x62>
 800787c:	4b69      	ldr	r3, [pc, #420]	; (8007a24 <pow+0x24c>)
 800787e:	2200      	movs	r2, #0
 8007880:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007884:	9b08      	ldr	r3, [sp, #32]
 8007886:	b11b      	cbz	r3, 8007890 <pow+0xb8>
 8007888:	f001 fc92 	bl	80091b0 <__errno>
 800788c:	9b08      	ldr	r3, [sp, #32]
 800788e:	6003      	str	r3, [r0, #0]
 8007890:	ed9d ab06 	vldr	d10, [sp, #24]
 8007894:	eeb0 0b4a 	vmov.f64	d0, d10
 8007898:	b00a      	add	sp, #40	; 0x28
 800789a:	ecbd 8b0a 	vpop	{d8-d12}
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	eeb0 0b48 	vmov.f64	d0, d8
 80078a4:	f001 fadf 	bl	8008e66 <finite>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d0f3      	beq.n	8007894 <pow+0xbc>
 80078ac:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80078b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b4:	d5ee      	bpl.n	8007894 <pow+0xbc>
 80078b6:	2301      	movs	r3, #1
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	4b5b      	ldr	r3, [pc, #364]	; (8007a28 <pow+0x250>)
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	2300      	movs	r3, #0
 80078c0:	9308      	str	r3, [sp, #32]
 80078c2:	f994 3000 	ldrsb.w	r3, [r4]
 80078c6:	ed8d 9b02 	vstr	d9, [sp, #8]
 80078ca:	ed8d 8b04 	vstr	d8, [sp, #16]
 80078ce:	b913      	cbnz	r3, 80078d6 <pow+0xfe>
 80078d0:	ed8d bb06 	vstr	d11, [sp, #24]
 80078d4:	e7b1      	b.n	800783a <pow+0x62>
 80078d6:	4955      	ldr	r1, [pc, #340]	; (8007a2c <pow+0x254>)
 80078d8:	2000      	movs	r0, #0
 80078da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d1ab      	bne.n	800783a <pow+0x62>
 80078e2:	f001 fc65 	bl	80091b0 <__errno>
 80078e6:	2321      	movs	r3, #33	; 0x21
 80078e8:	6003      	str	r3, [r0, #0]
 80078ea:	e7cb      	b.n	8007884 <pow+0xac>
 80078ec:	f001 fabb 	bl	8008e66 <finite>
 80078f0:	4605      	mov	r5, r0
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d168      	bne.n	80079c8 <pow+0x1f0>
 80078f6:	eeb0 0b49 	vmov.f64	d0, d9
 80078fa:	f001 fab4 	bl	8008e66 <finite>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d062      	beq.n	80079c8 <pow+0x1f0>
 8007902:	eeb0 0b48 	vmov.f64	d0, d8
 8007906:	f001 faae 	bl	8008e66 <finite>
 800790a:	2800      	cmp	r0, #0
 800790c:	d05c      	beq.n	80079c8 <pow+0x1f0>
 800790e:	eeb4 ab4a 	vcmp.f64	d10, d10
 8007912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007916:	f994 3000 	ldrsb.w	r3, [r4]
 800791a:	4a43      	ldr	r2, [pc, #268]	; (8007a28 <pow+0x250>)
 800791c:	d70e      	bvc.n	800793c <pow+0x164>
 800791e:	2101      	movs	r1, #1
 8007920:	e88d 0006 	stmia.w	sp, {r1, r2}
 8007924:	9508      	str	r5, [sp, #32]
 8007926:	ed8d 9b02 	vstr	d9, [sp, #8]
 800792a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0ce      	beq.n	80078d0 <pow+0xf8>
 8007932:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8007936:	ed8d 7b06 	vstr	d7, [sp, #24]
 800793a:	e7d0      	b.n	80078de <pow+0x106>
 800793c:	2103      	movs	r1, #3
 800793e:	e88d 0006 	stmia.w	sp, {r1, r2}
 8007942:	9508      	str	r5, [sp, #32]
 8007944:	ed8d 9b02 	vstr	d9, [sp, #8]
 8007948:	ed8d 8b04 	vstr	d8, [sp, #16]
 800794c:	bb1b      	cbnz	r3, 8007996 <pow+0x1be>
 800794e:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8007952:	4b37      	ldr	r3, [pc, #220]	; (8007a30 <pow+0x258>)
 8007954:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007960:	d553      	bpl.n	8007a0a <pow+0x232>
 8007962:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8007966:	ee28 8b07 	vmul.f64	d8, d8, d7
 800796a:	eeb0 0b48 	vmov.f64	d0, d8
 800796e:	f001 fb07 	bl	8008f80 <rint>
 8007972:	eeb4 8b40 	vcmp.f64	d8, d0
 8007976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797a:	d004      	beq.n	8007986 <pow+0x1ae>
 800797c:	4b2d      	ldr	r3, [pc, #180]	; (8007a34 <pow+0x25c>)
 800797e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007982:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007986:	f996 3000 	ldrsb.w	r3, [r6]
 800798a:	2b02      	cmp	r3, #2
 800798c:	d13d      	bne.n	8007a0a <pow+0x232>
 800798e:	f001 fc0f 	bl	80091b0 <__errno>
 8007992:	2322      	movs	r3, #34	; 0x22
 8007994:	e7a8      	b.n	80078e8 <pow+0x110>
 8007996:	4b28      	ldr	r3, [pc, #160]	; (8007a38 <pow+0x260>)
 8007998:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800799c:	2200      	movs	r2, #0
 800799e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80079a6:	d5ee      	bpl.n	8007986 <pow+0x1ae>
 80079a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80079ac:	ee28 8b07 	vmul.f64	d8, d8, d7
 80079b0:	eeb0 0b48 	vmov.f64	d0, d8
 80079b4:	f001 fae4 	bl	8008f80 <rint>
 80079b8:	eeb4 8b40 	vcmp.f64	d8, d0
 80079bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c0:	d0e1      	beq.n	8007986 <pow+0x1ae>
 80079c2:	2200      	movs	r2, #0
 80079c4:	4b19      	ldr	r3, [pc, #100]	; (8007a2c <pow+0x254>)
 80079c6:	e7dc      	b.n	8007982 <pow+0x1aa>
 80079c8:	eeb5 ab40 	vcmp.f64	d10, #0.0
 80079cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d0:	f47f af60 	bne.w	8007894 <pow+0xbc>
 80079d4:	eeb0 0b49 	vmov.f64	d0, d9
 80079d8:	f001 fa45 	bl	8008e66 <finite>
 80079dc:	2800      	cmp	r0, #0
 80079de:	f43f af59 	beq.w	8007894 <pow+0xbc>
 80079e2:	eeb0 0b48 	vmov.f64	d0, d8
 80079e6:	f001 fa3e 	bl	8008e66 <finite>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	f43f af52 	beq.w	8007894 <pow+0xbc>
 80079f0:	2304      	movs	r3, #4
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	4b0c      	ldr	r3, [pc, #48]	; (8007a28 <pow+0x250>)
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	2300      	movs	r3, #0
 80079fa:	9308      	str	r3, [sp, #32]
 80079fc:	ed8d 9b02 	vstr	d9, [sp, #8]
 8007a00:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007a04:	ed8d cb06 	vstr	d12, [sp, #24]
 8007a08:	e7bd      	b.n	8007986 <pow+0x1ae>
 8007a0a:	4668      	mov	r0, sp
 8007a0c:	f001 faac 	bl	8008f68 <matherr>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f47f af37 	bne.w	8007884 <pow+0xac>
 8007a16:	e7ba      	b.n	800798e <pow+0x1b6>
	...
 8007a20:	20000224 	.word	0x20000224
 8007a24:	3ff00000 	.word	0x3ff00000
 8007a28:	08009928 	.word	0x08009928
 8007a2c:	fff00000 	.word	0xfff00000
 8007a30:	47efffff 	.word	0x47efffff
 8007a34:	c7efffff 	.word	0xc7efffff
 8007a38:	7ff00000 	.word	0x7ff00000
 8007a3c:	00000000 	.word	0x00000000

08007a40 <sqrt>:
 8007a40:	b500      	push	{lr}
 8007a42:	ed2d 8b02 	vpush	{d8}
 8007a46:	eeb0 8b40 	vmov.f64	d8, d0
 8007a4a:	b08b      	sub	sp, #44	; 0x2c
 8007a4c:	f000 fe2c 	bl	80086a8 <__ieee754_sqrt>
 8007a50:	4b1f      	ldr	r3, [pc, #124]	; (8007ad0 <sqrt+0x90>)
 8007a52:	f993 3000 	ldrsb.w	r3, [r3]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	d024      	beq.n	8007aa4 <sqrt+0x64>
 8007a5a:	eeb4 8b48 	vcmp.f64	d8, d8
 8007a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a62:	d61f      	bvs.n	8007aa4 <sqrt+0x64>
 8007a64:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8007ac8 <sqrt+0x88>
 8007a68:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a70:	d518      	bpl.n	8007aa4 <sqrt+0x64>
 8007a72:	2201      	movs	r2, #1
 8007a74:	9200      	str	r2, [sp, #0]
 8007a76:	4a17      	ldr	r2, [pc, #92]	; (8007ad4 <sqrt+0x94>)
 8007a78:	9201      	str	r2, [sp, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	9208      	str	r2, [sp, #32]
 8007a7e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007a82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007a86:	b993      	cbnz	r3, 8007aae <sqrt+0x6e>
 8007a88:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a8c:	4668      	mov	r0, sp
 8007a8e:	f001 fa6b 	bl	8008f68 <matherr>
 8007a92:	b190      	cbz	r0, 8007aba <sqrt+0x7a>
 8007a94:	9b08      	ldr	r3, [sp, #32]
 8007a96:	b11b      	cbz	r3, 8007aa0 <sqrt+0x60>
 8007a98:	f001 fb8a 	bl	80091b0 <__errno>
 8007a9c:	9b08      	ldr	r3, [sp, #32]
 8007a9e:	6003      	str	r3, [r0, #0]
 8007aa0:	ed9d 0b06 	vldr	d0, [sp, #24]
 8007aa4:	b00b      	add	sp, #44	; 0x2c
 8007aa6:	ecbd 8b02 	vpop	{d8}
 8007aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8007ab4:	ed8d 6b06 	vstr	d6, [sp, #24]
 8007ab8:	d1e8      	bne.n	8007a8c <sqrt+0x4c>
 8007aba:	f001 fb79 	bl	80091b0 <__errno>
 8007abe:	2321      	movs	r3, #33	; 0x21
 8007ac0:	6003      	str	r3, [r0, #0]
 8007ac2:	e7e7      	b.n	8007a94 <sqrt+0x54>
 8007ac4:	f3af 8000 	nop.w
	...
 8007ad0:	20000224 	.word	0x20000224
 8007ad4:	0800992c 	.word	0x0800992c

08007ad8 <__ieee754_log>:
 8007ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ada:	ed8d 0b00 	vstr	d0, [sp]
 8007ade:	9a01      	ldr	r2, [sp, #4]
 8007ae0:	9b00      	ldr	r3, [sp, #0]
 8007ae2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007ae6:	da27      	bge.n	8007b38 <__ieee754_log+0x60>
 8007ae8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007aec:	430b      	orrs	r3, r1
 8007aee:	d107      	bne.n	8007b00 <__ieee754_log+0x28>
 8007af0:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 8007ca8 <__ieee754_log+0x1d0>
 8007af4:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8007cb0 <__ieee754_log+0x1d8>
 8007af8:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8007afc:	b003      	add	sp, #12
 8007afe:	bd30      	pop	{r4, r5, pc}
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	da06      	bge.n	8007b12 <__ieee754_log+0x3a>
 8007b04:	ed9d 7b00 	vldr	d7, [sp]
 8007b08:	ee37 6b47 	vsub.f64	d6, d7, d7
 8007b0c:	ed9f 7b66 	vldr	d7, [pc, #408]	; 8007ca8 <__ieee754_log+0x1d0>
 8007b10:	e7f2      	b.n	8007af8 <__ieee754_log+0x20>
 8007b12:	ed9d 6b00 	vldr	d6, [sp]
 8007b16:	ed9f 7b68 	vldr	d7, [pc, #416]	; 8007cb8 <__ieee754_log+0x1e0>
 8007b1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007b1e:	ed8d 7b00 	vstr	d7, [sp]
 8007b22:	9a01      	ldr	r2, [sp, #4]
 8007b24:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8007b28:	4b79      	ldr	r3, [pc, #484]	; (8007d10 <__ieee754_log+0x238>)
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	dd06      	ble.n	8007b3c <__ieee754_log+0x64>
 8007b2e:	ed9d 7b00 	vldr	d7, [sp]
 8007b32:	ee37 0b07 	vadd.f64	d0, d7, d7
 8007b36:	e7e1      	b.n	8007afc <__ieee754_log+0x24>
 8007b38:	2100      	movs	r1, #0
 8007b3a:	e7f5      	b.n	8007b28 <__ieee754_log+0x50>
 8007b3c:	1513      	asrs	r3, r2, #20
 8007b3e:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8007b42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007b46:	4419      	add	r1, r3
 8007b48:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 8007b4c:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007b50:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 8007b54:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 8007b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b5c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007b60:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 8007b64:	ea45 0300 	orr.w	r3, r5, r0
 8007b68:	ec43 2b10 	vmov	d0, r2, r3
 8007b6c:	1c82      	adds	r2, r0, #2
 8007b6e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007b72:	2a02      	cmp	r2, #2
 8007b74:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 8007b78:	ee30 0b47 	vsub.f64	d0, d0, d7
 8007b7c:	dc31      	bgt.n	8007be2 <__ieee754_log+0x10a>
 8007b7e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b86:	d10f      	bne.n	8007ba8 <__ieee754_log+0xd0>
 8007b88:	2c00      	cmp	r4, #0
 8007b8a:	f000 8088 	beq.w	8007c9e <__ieee754_log+0x1c6>
 8007b8e:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 8007cc0 <__ieee754_log+0x1e8>
 8007b92:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8007cc8 <__ieee754_log+0x1f0>
 8007b96:	ee07 4a90 	vmov	s15, r4
 8007b9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007b9e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8007ba2:	eea7 0b06 	vfma.f64	d0, d7, d6
 8007ba6:	e7a9      	b.n	8007afc <__ieee754_log+0x24>
 8007ba8:	ed9f 7b49 	vldr	d7, [pc, #292]	; 8007cd0 <__ieee754_log+0x1f8>
 8007bac:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007bb0:	eea0 6b47 	vfms.f64	d6, d0, d7
 8007bb4:	ee20 7b00 	vmul.f64	d7, d0, d0
 8007bb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007bbc:	b914      	cbnz	r4, 8007bc4 <__ieee754_log+0xec>
 8007bbe:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007bc2:	e79b      	b.n	8007afc <__ieee754_log+0x24>
 8007bc4:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8007cc0 <__ieee754_log+0x1e8>
 8007bc8:	ee07 4a90 	vmov	s15, r4
 8007bcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007bd0:	eea7 6b45 	vfms.f64	d6, d7, d5
 8007bd4:	ee36 0b40 	vsub.f64	d0, d6, d0
 8007bd8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8007cc8 <__ieee754_log+0x1f0>
 8007bdc:	ee97 0b06 	vfnms.f64	d0, d7, d6
 8007be0:	e78c      	b.n	8007afc <__ieee754_log+0x24>
 8007be2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007be6:	ee30 7b07 	vadd.f64	d7, d0, d7
 8007bea:	ee80 4b07 	vdiv.f64	d4, d0, d7
 8007bee:	ee07 4a90 	vmov	s15, r4
 8007bf2:	ee24 3b04 	vmul.f64	d3, d4, d4
 8007bf6:	ed9f 2b38 	vldr	d2, [pc, #224]	; 8007cd8 <__ieee754_log+0x200>
 8007bfa:	ee23 5b03 	vmul.f64	d5, d3, d3
 8007bfe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007c02:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8007ce0 <__ieee754_log+0x208>
 8007c06:	eea5 7b02 	vfma.f64	d7, d5, d2
 8007c0a:	ed9f 2b37 	vldr	d2, [pc, #220]	; 8007ce8 <__ieee754_log+0x210>
 8007c0e:	eea5 2b07 	vfma.f64	d2, d5, d7
 8007c12:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8007cf0 <__ieee754_log+0x218>
 8007c16:	eea5 7b02 	vfma.f64	d7, d5, d2
 8007c1a:	ed9f 2b37 	vldr	d2, [pc, #220]	; 8007cf8 <__ieee754_log+0x220>
 8007c1e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007c22:	ed9f 3b37 	vldr	d3, [pc, #220]	; 8007d00 <__ieee754_log+0x228>
 8007c26:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 8007c2a:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 8007c2e:	eea5 2b03 	vfma.f64	d2, d5, d3
 8007c32:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 8007c36:	ed9f 3b34 	vldr	d3, [pc, #208]	; 8007d08 <__ieee754_log+0x230>
 8007c3a:	3251      	adds	r2, #81	; 0x51
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	2a00      	cmp	r2, #0
 8007c40:	eea5 3b02 	vfma.f64	d3, d5, d2
 8007c44:	eea5 7b03 	vfma.f64	d7, d5, d3
 8007c48:	dd1c      	ble.n	8007c84 <__ieee754_log+0x1ac>
 8007c4a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007c4e:	ee20 5b05 	vmul.f64	d5, d0, d5
 8007c52:	ee25 5b00 	vmul.f64	d5, d5, d0
 8007c56:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007c5a:	b924      	cbnz	r4, 8007c66 <__ieee754_log+0x18e>
 8007c5c:	eea4 5b47 	vfms.f64	d5, d4, d7
 8007c60:	ee30 0b45 	vsub.f64	d0, d0, d5
 8007c64:	e74a      	b.n	8007afc <__ieee754_log+0x24>
 8007c66:	ed9f 3b16 	vldr	d3, [pc, #88]	; 8007cc0 <__ieee754_log+0x1e8>
 8007c6a:	ee26 3b03 	vmul.f64	d3, d6, d3
 8007c6e:	eea4 3b07 	vfma.f64	d3, d4, d7
 8007c72:	ee35 5b43 	vsub.f64	d5, d5, d3
 8007c76:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007cc8 <__ieee754_log+0x1f0>
 8007c7a:	ee35 0b40 	vsub.f64	d0, d5, d0
 8007c7e:	ee96 0b07 	vfnms.f64	d0, d6, d7
 8007c82:	e73b      	b.n	8007afc <__ieee754_log+0x24>
 8007c84:	ee30 7b47 	vsub.f64	d7, d0, d7
 8007c88:	b914      	cbnz	r4, 8007c90 <__ieee754_log+0x1b8>
 8007c8a:	eea4 0b47 	vfms.f64	d0, d4, d7
 8007c8e:	e735      	b.n	8007afc <__ieee754_log+0x24>
 8007c90:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8007cc0 <__ieee754_log+0x1e8>
 8007c94:	ee25 5b46 	vnmul.f64	d5, d5, d6
 8007c98:	eea4 5b07 	vfma.f64	d5, d4, d7
 8007c9c:	e7eb      	b.n	8007c76 <__ieee754_log+0x19e>
 8007c9e:	ed9f 0b02 	vldr	d0, [pc, #8]	; 8007ca8 <__ieee754_log+0x1d0>
 8007ca2:	e72b      	b.n	8007afc <__ieee754_log+0x24>
 8007ca4:	f3af 8000 	nop.w
	...
 8007cb4:	c3500000 	.word	0xc3500000
 8007cb8:	00000000 	.word	0x00000000
 8007cbc:	43500000 	.word	0x43500000
 8007cc0:	35793c76 	.word	0x35793c76
 8007cc4:	3dea39ef 	.word	0x3dea39ef
 8007cc8:	fee00000 	.word	0xfee00000
 8007ccc:	3fe62e42 	.word	0x3fe62e42
 8007cd0:	55555555 	.word	0x55555555
 8007cd4:	3fd55555 	.word	0x3fd55555
 8007cd8:	df3e5244 	.word	0xdf3e5244
 8007cdc:	3fc2f112 	.word	0x3fc2f112
 8007ce0:	96cb03de 	.word	0x96cb03de
 8007ce4:	3fc74664 	.word	0x3fc74664
 8007ce8:	94229359 	.word	0x94229359
 8007cec:	3fd24924 	.word	0x3fd24924
 8007cf0:	55555593 	.word	0x55555593
 8007cf4:	3fe55555 	.word	0x3fe55555
 8007cf8:	1d8e78af 	.word	0x1d8e78af
 8007cfc:	3fcc71c5 	.word	0x3fcc71c5
 8007d00:	d078c69f 	.word	0xd078c69f
 8007d04:	3fc39a09 	.word	0x3fc39a09
 8007d08:	9997fa04 	.word	0x9997fa04
 8007d0c:	3fd99999 	.word	0x3fd99999
 8007d10:	7fefffff 	.word	0x7fefffff
 8007d14:	00000000 	.word	0x00000000

08007d18 <__ieee754_pow>:
 8007d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	ec57 6b11 	vmov	r6, r7, d1
 8007d20:	ed2d 8b02 	vpush	{d8}
 8007d24:	eeb0 8b40 	vmov.f64	d8, d0
 8007d28:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007d2c:	ea58 0306 	orrs.w	r3, r8, r6
 8007d30:	b085      	sub	sp, #20
 8007d32:	ee10 ba10 	vmov	fp, s0
 8007d36:	ee18 9a90 	vmov	r9, s17
 8007d3a:	ee11 2a10 	vmov	r2, s2
 8007d3e:	46ba      	mov	sl, r7
 8007d40:	f000 8303 	beq.w	800834a <__ieee754_pow+0x632>
 8007d44:	4bb8      	ldr	r3, [pc, #736]	; (8008028 <__ieee754_pow+0x310>)
 8007d46:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8007d4a:	429c      	cmp	r4, r3
 8007d4c:	dc0b      	bgt.n	8007d66 <__ieee754_pow+0x4e>
 8007d4e:	d105      	bne.n	8007d5c <__ieee754_pow+0x44>
 8007d50:	f1bb 0f00 	cmp.w	fp, #0
 8007d54:	d107      	bne.n	8007d66 <__ieee754_pow+0x4e>
 8007d56:	45a0      	cmp	r8, r4
 8007d58:	dc0d      	bgt.n	8007d76 <__ieee754_pow+0x5e>
 8007d5a:	e001      	b.n	8007d60 <__ieee754_pow+0x48>
 8007d5c:	4598      	cmp	r8, r3
 8007d5e:	dc02      	bgt.n	8007d66 <__ieee754_pow+0x4e>
 8007d60:	4598      	cmp	r8, r3
 8007d62:	d110      	bne.n	8007d86 <__ieee754_pow+0x6e>
 8007d64:	b17a      	cbz	r2, 8007d86 <__ieee754_pow+0x6e>
 8007d66:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007d6a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007d6e:	ea54 030b 	orrs.w	r3, r4, fp
 8007d72:	f000 82ea 	beq.w	800834a <__ieee754_pow+0x632>
 8007d76:	48ad      	ldr	r0, [pc, #692]	; (800802c <__ieee754_pow+0x314>)
 8007d78:	b005      	add	sp, #20
 8007d7a:	ecbd 8b02 	vpop	{d8}
 8007d7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d82:	f001 b8f5 	b.w	8008f70 <nan>
 8007d86:	f1b9 0f00 	cmp.w	r9, #0
 8007d8a:	da50      	bge.n	8007e2e <__ieee754_pow+0x116>
 8007d8c:	4ba8      	ldr	r3, [pc, #672]	; (8008030 <__ieee754_pow+0x318>)
 8007d8e:	4598      	cmp	r8, r3
 8007d90:	dc4b      	bgt.n	8007e2a <__ieee754_pow+0x112>
 8007d92:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007d96:	4598      	cmp	r8, r3
 8007d98:	dd49      	ble.n	8007e2e <__ieee754_pow+0x116>
 8007d9a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007d9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007da2:	2b14      	cmp	r3, #20
 8007da4:	dd24      	ble.n	8007df0 <__ieee754_pow+0xd8>
 8007da6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007daa:	fa22 f503 	lsr.w	r5, r2, r3
 8007dae:	fa05 f303 	lsl.w	r3, r5, r3
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d13b      	bne.n	8007e2e <__ieee754_pow+0x116>
 8007db6:	f005 0501 	and.w	r5, r5, #1
 8007dba:	f1c5 0502 	rsb	r5, r5, #2
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	d15c      	bne.n	8007e7c <__ieee754_pow+0x164>
 8007dc2:	4b99      	ldr	r3, [pc, #612]	; (8008028 <__ieee754_pow+0x310>)
 8007dc4:	4598      	cmp	r8, r3
 8007dc6:	d122      	bne.n	8007e0e <__ieee754_pow+0xf6>
 8007dc8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007dcc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007dd0:	ea53 030b 	orrs.w	r3, r3, fp
 8007dd4:	f000 82b9 	beq.w	800834a <__ieee754_pow+0x632>
 8007dd8:	4b96      	ldr	r3, [pc, #600]	; (8008034 <__ieee754_pow+0x31c>)
 8007dda:	429c      	cmp	r4, r3
 8007ddc:	dd29      	ble.n	8007e32 <__ieee754_pow+0x11a>
 8007dde:	f1ba 0f00 	cmp.w	sl, #0
 8007de2:	f280 82b5 	bge.w	8008350 <__ieee754_pow+0x638>
 8007de6:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8007ff8 <__ieee754_pow+0x2e0>
 8007dea:	ed8d 7b00 	vstr	d7, [sp]
 8007dee:	e028      	b.n	8007e42 <__ieee754_pow+0x12a>
 8007df0:	2a00      	cmp	r2, #0
 8007df2:	d142      	bne.n	8007e7a <__ieee754_pow+0x162>
 8007df4:	f1c3 0314 	rsb	r3, r3, #20
 8007df8:	fa48 f503 	asr.w	r5, r8, r3
 8007dfc:	fa05 f303 	lsl.w	r3, r5, r3
 8007e00:	4598      	cmp	r8, r3
 8007e02:	f040 82ab 	bne.w	800835c <__ieee754_pow+0x644>
 8007e06:	f005 0501 	and.w	r5, r5, #1
 8007e0a:	f1c5 0502 	rsb	r5, r5, #2
 8007e0e:	4b8a      	ldr	r3, [pc, #552]	; (8008038 <__ieee754_pow+0x320>)
 8007e10:	4598      	cmp	r8, r3
 8007e12:	d11d      	bne.n	8007e50 <__ieee754_pow+0x138>
 8007e14:	f1ba 0f00 	cmp.w	sl, #0
 8007e18:	f280 829d 	bge.w	8008356 <__ieee754_pow+0x63e>
 8007e1c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007e20:	ee87 6b08 	vdiv.f64	d6, d7, d8
 8007e24:	ed8d 6b00 	vstr	d6, [sp]
 8007e28:	e00b      	b.n	8007e42 <__ieee754_pow+0x12a>
 8007e2a:	2502      	movs	r5, #2
 8007e2c:	e7c7      	b.n	8007dbe <__ieee754_pow+0xa6>
 8007e2e:	2500      	movs	r5, #0
 8007e30:	e7c5      	b.n	8007dbe <__ieee754_pow+0xa6>
 8007e32:	f1ba 0f00 	cmp.w	sl, #0
 8007e36:	dad6      	bge.n	8007de6 <__ieee754_pow+0xce>
 8007e38:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8007e3c:	4633      	mov	r3, r6
 8007e3e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8007e42:	ed9d 0b00 	vldr	d0, [sp]
 8007e46:	b005      	add	sp, #20
 8007e48:	ecbd 8b02 	vpop	{d8}
 8007e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e50:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 8007e54:	d102      	bne.n	8007e5c <__ieee754_pow+0x144>
 8007e56:	ee28 7b08 	vmul.f64	d7, d8, d8
 8007e5a:	e7c6      	b.n	8007dea <__ieee754_pow+0xd2>
 8007e5c:	4b77      	ldr	r3, [pc, #476]	; (800803c <__ieee754_pow+0x324>)
 8007e5e:	459a      	cmp	sl, r3
 8007e60:	d10c      	bne.n	8007e7c <__ieee754_pow+0x164>
 8007e62:	f1b9 0f00 	cmp.w	r9, #0
 8007e66:	db09      	blt.n	8007e7c <__ieee754_pow+0x164>
 8007e68:	eeb0 0b48 	vmov.f64	d0, d8
 8007e6c:	b005      	add	sp, #20
 8007e6e:	ecbd 8b02 	vpop	{d8}
 8007e72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e76:	f000 bc17 	b.w	80086a8 <__ieee754_sqrt>
 8007e7a:	2500      	movs	r5, #0
 8007e7c:	eeb0 0b48 	vmov.f64	d0, d8
 8007e80:	f000 ffea 	bl	8008e58 <fabs>
 8007e84:	ed8d 0b00 	vstr	d0, [sp]
 8007e88:	f1bb 0f00 	cmp.w	fp, #0
 8007e8c:	d128      	bne.n	8007ee0 <__ieee754_pow+0x1c8>
 8007e8e:	b124      	cbz	r4, 8007e9a <__ieee754_pow+0x182>
 8007e90:	4b69      	ldr	r3, [pc, #420]	; (8008038 <__ieee754_pow+0x320>)
 8007e92:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d122      	bne.n	8007ee0 <__ieee754_pow+0x1c8>
 8007e9a:	f1ba 0f00 	cmp.w	sl, #0
 8007e9e:	da07      	bge.n	8007eb0 <__ieee754_pow+0x198>
 8007ea0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007ea4:	ed9d 5b00 	vldr	d5, [sp]
 8007ea8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8007eac:	ed8d 6b00 	vstr	d6, [sp]
 8007eb0:	f1b9 0f00 	cmp.w	r9, #0
 8007eb4:	dac5      	bge.n	8007e42 <__ieee754_pow+0x12a>
 8007eb6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007eba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007ebe:	ea54 0305 	orrs.w	r3, r4, r5
 8007ec2:	d106      	bne.n	8007ed2 <__ieee754_pow+0x1ba>
 8007ec4:	ed9d 7b00 	vldr	d7, [sp]
 8007ec8:	ee37 7b47 	vsub.f64	d7, d7, d7
 8007ecc:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8007ed0:	e7a8      	b.n	8007e24 <__ieee754_pow+0x10c>
 8007ed2:	2d01      	cmp	r5, #1
 8007ed4:	d1b5      	bne.n	8007e42 <__ieee754_pow+0x12a>
 8007ed6:	ed9d 7b00 	vldr	d7, [sp]
 8007eda:	eeb1 7b47 	vneg.f64	d7, d7
 8007ede:	e784      	b.n	8007dea <__ieee754_pow+0xd2>
 8007ee0:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8007ee4:	f109 30ff 	add.w	r0, r9, #4294967295
 8007ee8:	ea55 0300 	orrs.w	r3, r5, r0
 8007eec:	d104      	bne.n	8007ef8 <__ieee754_pow+0x1e0>
 8007eee:	ee38 8b48 	vsub.f64	d8, d8, d8
 8007ef2:	ee88 7b08 	vdiv.f64	d7, d8, d8
 8007ef6:	e778      	b.n	8007dea <__ieee754_pow+0xd2>
 8007ef8:	4b51      	ldr	r3, [pc, #324]	; (8008040 <__ieee754_pow+0x328>)
 8007efa:	4598      	cmp	r8, r3
 8007efc:	f340 80a6 	ble.w	800804c <__ieee754_pow+0x334>
 8007f00:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007f04:	4598      	cmp	r8, r3
 8007f06:	dd0b      	ble.n	8007f20 <__ieee754_pow+0x208>
 8007f08:	4b4a      	ldr	r3, [pc, #296]	; (8008034 <__ieee754_pow+0x31c>)
 8007f0a:	429c      	cmp	r4, r3
 8007f0c:	dc0e      	bgt.n	8007f2c <__ieee754_pow+0x214>
 8007f0e:	f1ba 0f00 	cmp.w	sl, #0
 8007f12:	f6bf af68 	bge.w	8007de6 <__ieee754_pow+0xce>
 8007f16:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 8008000 <__ieee754_pow+0x2e8>
 8007f1a:	ee27 7b07 	vmul.f64	d7, d7, d7
 8007f1e:	e764      	b.n	8007dea <__ieee754_pow+0xd2>
 8007f20:	4b48      	ldr	r3, [pc, #288]	; (8008044 <__ieee754_pow+0x32c>)
 8007f22:	429c      	cmp	r4, r3
 8007f24:	ddf3      	ble.n	8007f0e <__ieee754_pow+0x1f6>
 8007f26:	4b44      	ldr	r3, [pc, #272]	; (8008038 <__ieee754_pow+0x320>)
 8007f28:	429c      	cmp	r4, r3
 8007f2a:	dd03      	ble.n	8007f34 <__ieee754_pow+0x21c>
 8007f2c:	f1ba 0f00 	cmp.w	sl, #0
 8007f30:	dcf1      	bgt.n	8007f16 <__ieee754_pow+0x1fe>
 8007f32:	e758      	b.n	8007de6 <__ieee754_pow+0xce>
 8007f34:	ed9d 7b00 	vldr	d7, [sp]
 8007f38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007f3c:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8008008 <__ieee754_pow+0x2f0>
 8007f40:	ee37 6b46 	vsub.f64	d6, d7, d6
 8007f44:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 8007f48:	eeb1 3b46 	vneg.f64	d3, d6
 8007f4c:	eea3 5b07 	vfma.f64	d5, d3, d7
 8007f50:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8007f54:	eea3 7b05 	vfma.f64	d7, d3, d5
 8007f58:	ee26 5b06 	vmul.f64	d5, d6, d6
 8007f5c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007f60:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8008010 <__ieee754_pow+0x2f8>
 8007f64:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8007f68:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8008018 <__ieee754_pow+0x300>
 8007f6c:	eea6 7b05 	vfma.f64	d7, d6, d5
 8007f70:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8008020 <__ieee754_pow+0x308>
 8007f74:	eeb0 4b47 	vmov.f64	d4, d7
 8007f78:	eea6 4b05 	vfma.f64	d4, d6, d5
 8007f7c:	ec53 2b14 	vmov	r2, r3, d4
 8007f80:	2200      	movs	r2, #0
 8007f82:	ec43 2b14 	vmov	d4, r2, r3
 8007f86:	eeb0 6b44 	vmov.f64	d6, d4
 8007f8a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8007f8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007f92:	3d01      	subs	r5, #1
 8007f94:	ea55 0300 	orrs.w	r3, r5, r0
 8007f98:	f04f 0200 	mov.w	r2, #0
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8007fa2:	ec47 6b15 	vmov	d5, r6, r7
 8007fa6:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8007faa:	bf08      	it	eq
 8007fac:	eeb0 8b46 	vmoveq.f64	d8, d6
 8007fb0:	ec43 2b16 	vmov	d6, r2, r3
 8007fb4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007fb8:	4b23      	ldr	r3, [pc, #140]	; (8008048 <__ieee754_pow+0x330>)
 8007fba:	ee35 5b46 	vsub.f64	d5, d5, d6
 8007fbe:	ee24 6b06 	vmul.f64	d6, d4, d6
 8007fc2:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007fc6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8007fca:	ee15 1a90 	vmov	r1, s11
 8007fce:	4299      	cmp	r1, r3
 8007fd0:	ee15 2a10 	vmov	r2, s10
 8007fd4:	f340 819b 	ble.w	800830e <__ieee754_pow+0x5f6>
 8007fd8:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007fdc:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	f000 810a 	beq.w	80081fa <__ieee754_pow+0x4e2>
 8007fe6:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8008000 <__ieee754_pow+0x2e8>
 8007fea:	ee28 8b07 	vmul.f64	d8, d8, d7
 8007fee:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007ff2:	e6fa      	b.n	8007dea <__ieee754_pow+0xd2>
 8007ff4:	f3af 8000 	nop.w
	...
 8008000:	8800759c 	.word	0x8800759c
 8008004:	7e37e43c 	.word	0x7e37e43c
 8008008:	55555555 	.word	0x55555555
 800800c:	3fd55555 	.word	0x3fd55555
 8008010:	652b82fe 	.word	0x652b82fe
 8008014:	3ff71547 	.word	0x3ff71547
 8008018:	f85ddf44 	.word	0xf85ddf44
 800801c:	3e54ae0b 	.word	0x3e54ae0b
 8008020:	60000000 	.word	0x60000000
 8008024:	3ff71547 	.word	0x3ff71547
 8008028:	7ff00000 	.word	0x7ff00000
 800802c:	08009660 	.word	0x08009660
 8008030:	433fffff 	.word	0x433fffff
 8008034:	3fefffff 	.word	0x3fefffff
 8008038:	3ff00000 	.word	0x3ff00000
 800803c:	3fe00000 	.word	0x3fe00000
 8008040:	41e00000 	.word	0x41e00000
 8008044:	3feffffe 	.word	0x3feffffe
 8008048:	408fffff 	.word	0x408fffff
 800804c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008050:	f280 80cf 	bge.w	80081f2 <__ieee754_pow+0x4da>
 8008054:	ed9d 6b00 	vldr	d6, [sp]
 8008058:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8008360 <__ieee754_pow+0x648>
 800805c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008060:	ed8d 7b00 	vstr	d7, [sp]
 8008064:	9c01      	ldr	r4, [sp, #4]
 8008066:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800806a:	1521      	asrs	r1, r4, #20
 800806c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008070:	4419      	add	r1, r3
 8008072:	4be3      	ldr	r3, [pc, #908]	; (8008400 <__ieee754_pow+0x6e8>)
 8008074:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008078:	f044 5e7f 	orr.w	lr, r4, #1069547520	; 0x3fc00000
 800807c:	429c      	cmp	r4, r3
 800807e:	f44e 1e40 	orr.w	lr, lr, #3145728	; 0x300000
 8008082:	dd06      	ble.n	8008092 <__ieee754_pow+0x37a>
 8008084:	4bdf      	ldr	r3, [pc, #892]	; (8008404 <__ieee754_pow+0x6ec>)
 8008086:	429c      	cmp	r4, r3
 8008088:	f340 80b5 	ble.w	80081f6 <__ieee754_pow+0x4de>
 800808c:	3101      	adds	r1, #1
 800808e:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8008092:	2400      	movs	r4, #0
 8008094:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008098:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800809c:	4673      	mov	r3, lr
 800809e:	ec43 2b17 	vmov	d7, r2, r3
 80080a2:	4bd9      	ldr	r3, [pc, #868]	; (8008408 <__ieee754_pow+0x6f0>)
 80080a4:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 80080a8:	4463      	add	r3, ip
 80080aa:	ed93 5b00 	vldr	d5, [r3]
 80080ae:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80080b2:	ee37 2b45 	vsub.f64	d2, d7, d5
 80080b6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80080ba:	ee84 1b06 	vdiv.f64	d1, d4, d6
 80080be:	ee22 6b01 	vmul.f64	d6, d2, d1
 80080c2:	ed8d 6b00 	vstr	d6, [sp]
 80080c6:	e9dd 8900 	ldrd	r8, r9, [sp]
 80080ca:	f04e 5e00 	orr.w	lr, lr, #536870912	; 0x20000000
 80080ce:	f50e 2e00 	add.w	lr, lr, #524288	; 0x80000
 80080d2:	f04f 0800 	mov.w	r8, #0
 80080d6:	eb0e 4384 	add.w	r3, lr, r4, lsl #18
 80080da:	2200      	movs	r2, #0
 80080dc:	ec49 8b14 	vmov	d4, r8, r9
 80080e0:	ec43 2b16 	vmov	d6, r2, r3
 80080e4:	eeb1 3b44 	vneg.f64	d3, d4
 80080e8:	eea3 2b06 	vfma.f64	d2, d3, d6
 80080ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 80080f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80080f4:	eea3 2b07 	vfma.f64	d2, d3, d7
 80080f8:	ed9d 7b00 	vldr	d7, [sp]
 80080fc:	ee22 2b01 	vmul.f64	d2, d2, d1
 8008100:	ee27 5b07 	vmul.f64	d5, d7, d7
 8008104:	ee37 6b04 	vadd.f64	d6, d7, d4
 8008108:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8008368 <__ieee754_pow+0x650>
 800810c:	ee25 0b05 	vmul.f64	d0, d5, d5
 8008110:	ee26 6b02 	vmul.f64	d6, d6, d2
 8008114:	ed9f 7b96 	vldr	d7, [pc, #600]	; 8008370 <__ieee754_pow+0x658>
 8008118:	eea5 7b01 	vfma.f64	d7, d5, d1
 800811c:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8008378 <__ieee754_pow+0x660>
 8008120:	eea5 1b07 	vfma.f64	d1, d5, d7
 8008124:	ed9f 7b96 	vldr	d7, [pc, #600]	; 8008380 <__ieee754_pow+0x668>
 8008128:	eea5 7b01 	vfma.f64	d7, d5, d1
 800812c:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8008388 <__ieee754_pow+0x670>
 8008130:	eea5 1b07 	vfma.f64	d1, d5, d7
 8008134:	ed9f 7b96 	vldr	d7, [pc, #600]	; 8008390 <__ieee754_pow+0x678>
 8008138:	eea5 7b01 	vfma.f64	d7, d5, d1
 800813c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8008140:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 8008144:	eeb0 5b47 	vmov.f64	d5, d7
 8008148:	eea4 5b04 	vfma.f64	d5, d4, d4
 800814c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8008150:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008154:	f8cd 8008 	str.w	r8, [sp, #8]
 8008158:	ed9d 5b02 	vldr	d5, [sp, #8]
 800815c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008160:	eea3 7b04 	vfma.f64	d7, d3, d4
 8008164:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008168:	ed9d 6b00 	vldr	d6, [sp]
 800816c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008170:	eea2 7b05 	vfma.f64	d7, d2, d5
 8008174:	eeb0 6b47 	vmov.f64	d6, d7
 8008178:	eea4 6b05 	vfma.f64	d6, d4, d5
 800817c:	ed8d 6b00 	vstr	d6, [sp]
 8008180:	f8cd 8000 	str.w	r8, [sp]
 8008184:	ed9d 2b00 	vldr	d2, [sp]
 8008188:	eeb0 6b42 	vmov.f64	d6, d2
 800818c:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008190:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008194:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8008398 <__ieee754_pow+0x680>
 8008198:	4b9c      	ldr	r3, [pc, #624]	; (800840c <__ieee754_pow+0x6f4>)
 800819a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800819e:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80083a0 <__ieee754_pow+0x688>
 80081a2:	4463      	add	r3, ip
 80081a4:	eea2 7b06 	vfma.f64	d7, d2, d6
 80081a8:	ed93 6b00 	vldr	d6, [r3]
 80081ac:	4b98      	ldr	r3, [pc, #608]	; (8008410 <__ieee754_pow+0x6f8>)
 80081ae:	ee37 6b06 	vadd.f64	d6, d7, d6
 80081b2:	449c      	add	ip, r3
 80081b4:	ed9c 1b00 	vldr	d1, [ip]
 80081b8:	eeb0 4b46 	vmov.f64	d4, d6
 80081bc:	ed9f 3b7a 	vldr	d3, [pc, #488]	; 80083a8 <__ieee754_pow+0x690>
 80081c0:	ee07 1a90 	vmov	s15, r1
 80081c4:	eea2 4b03 	vfma.f64	d4, d2, d3
 80081c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80081cc:	ee34 4b01 	vadd.f64	d4, d4, d1
 80081d0:	ee34 5b07 	vadd.f64	d5, d4, d7
 80081d4:	ed8d 5b00 	vstr	d5, [sp]
 80081d8:	f8cd 8000 	str.w	r8, [sp]
 80081dc:	ed9d 4b00 	vldr	d4, [sp]
 80081e0:	ee34 7b47 	vsub.f64	d7, d4, d7
 80081e4:	ee37 7b41 	vsub.f64	d7, d7, d1
 80081e8:	eea2 7b43 	vfms.f64	d7, d2, d3
 80081ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80081f0:	e6cf      	b.n	8007f92 <__ieee754_pow+0x27a>
 80081f2:	2300      	movs	r3, #0
 80081f4:	e739      	b.n	800806a <__ieee754_pow+0x352>
 80081f6:	2401      	movs	r4, #1
 80081f8:	e74c      	b.n	8008094 <__ieee754_pow+0x37c>
 80081fa:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 80083b0 <__ieee754_pow+0x698>
 80081fe:	ee35 5b46 	vsub.f64	d5, d5, d6
 8008202:	ee37 4b04 	vadd.f64	d4, d7, d4
 8008206:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800820a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820e:	f73f aeea 	bgt.w	8007fe6 <__ieee754_pow+0x2ce>
 8008212:	4a80      	ldr	r2, [pc, #512]	; (8008414 <__ieee754_pow+0x6fc>)
 8008214:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008218:	4293      	cmp	r3, r2
 800821a:	f340 808e 	ble.w	800833a <__ieee754_pow+0x622>
 800821e:	151b      	asrs	r3, r3, #20
 8008220:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 8008224:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008228:	4103      	asrs	r3, r0
 800822a:	440b      	add	r3, r1
 800822c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008230:	4879      	ldr	r0, [pc, #484]	; (8008418 <__ieee754_pow+0x700>)
 8008232:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008236:	4110      	asrs	r0, r2
 8008238:	ea23 0500 	bic.w	r5, r3, r0
 800823c:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8008240:	2400      	movs	r4, #0
 8008242:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8008246:	f1c2 0214 	rsb	r2, r2, #20
 800824a:	ec45 4b15 	vmov	d5, r4, r5
 800824e:	4110      	asrs	r0, r2
 8008250:	2900      	cmp	r1, #0
 8008252:	bfb8      	it	lt
 8008254:	4240      	neglt	r0, r0
 8008256:	ee36 6b45 	vsub.f64	d6, d6, d5
 800825a:	ee36 5b07 	vadd.f64	d5, d6, d7
 800825e:	ec53 2b15 	vmov	r2, r3, d5
 8008262:	2200      	movs	r2, #0
 8008264:	ec43 2b15 	vmov	d5, r2, r3
 8008268:	ed9f 4b53 	vldr	d4, [pc, #332]	; 80083b8 <__ieee754_pow+0x6a0>
 800826c:	ee35 6b46 	vsub.f64	d6, d5, d6
 8008270:	ee37 6b46 	vsub.f64	d6, d7, d6
 8008274:	ed9f 7b52 	vldr	d7, [pc, #328]	; 80083c0 <__ieee754_pow+0x6a8>
 8008278:	ee25 7b07 	vmul.f64	d7, d5, d7
 800827c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8008280:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80083c8 <__ieee754_pow+0x6b0>
 8008284:	eeb0 4b47 	vmov.f64	d4, d7
 8008288:	eea5 4b06 	vfma.f64	d4, d5, d6
 800828c:	eeb0 3b44 	vmov.f64	d3, d4
 8008290:	eea5 3b46 	vfms.f64	d3, d5, d6
 8008294:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 80083d0 <__ieee754_pow+0x6b8>
 8008298:	ee37 7b43 	vsub.f64	d7, d7, d3
 800829c:	ee24 6b04 	vmul.f64	d6, d4, d4
 80082a0:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80083d8 <__ieee754_pow+0x6c0>
 80082a4:	eea4 7b07 	vfma.f64	d7, d4, d7
 80082a8:	eea6 3b05 	vfma.f64	d3, d6, d5
 80082ac:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 80083e0 <__ieee754_pow+0x6c8>
 80082b0:	eea6 5b03 	vfma.f64	d5, d6, d3
 80082b4:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 80083e8 <__ieee754_pow+0x6d0>
 80082b8:	eea6 3b05 	vfma.f64	d3, d6, d5
 80082bc:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 80083f0 <__ieee754_pow+0x6d8>
 80082c0:	eea6 5b03 	vfma.f64	d5, d6, d3
 80082c4:	eeb0 3b44 	vmov.f64	d3, d4
 80082c8:	eea6 3b45 	vfms.f64	d3, d6, d5
 80082cc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80082d0:	eeb0 6b43 	vmov.f64	d6, d3
 80082d4:	ee24 3b03 	vmul.f64	d3, d4, d3
 80082d8:	ee36 5b45 	vsub.f64	d5, d6, d5
 80082dc:	ee83 6b05 	vdiv.f64	d6, d3, d5
 80082e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80082e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80082e8:	ee37 7b44 	vsub.f64	d7, d7, d4
 80082ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80082f0:	ed8d 7b00 	vstr	d7, [sp]
 80082f4:	9901      	ldr	r1, [sp, #4]
 80082f6:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 80082fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80082fe:	da1e      	bge.n	800833e <__ieee754_pow+0x626>
 8008300:	eeb0 0b47 	vmov.f64	d0, d7
 8008304:	f000 fec8 	bl	8009098 <scalbn>
 8008308:	ee20 7b08 	vmul.f64	d7, d0, d8
 800830c:	e56d      	b.n	8007dea <__ieee754_pow+0xd2>
 800830e:	4b43      	ldr	r3, [pc, #268]	; (800841c <__ieee754_pow+0x704>)
 8008310:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8008314:	4298      	cmp	r0, r3
 8008316:	f77f af7c 	ble.w	8008212 <__ieee754_pow+0x4fa>
 800831a:	4b41      	ldr	r3, [pc, #260]	; (8008420 <__ieee754_pow+0x708>)
 800831c:	440b      	add	r3, r1
 800831e:	4313      	orrs	r3, r2
 8008320:	d002      	beq.n	8008328 <__ieee754_pow+0x610>
 8008322:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80083f8 <__ieee754_pow+0x6e0>
 8008326:	e660      	b.n	8007fea <__ieee754_pow+0x2d2>
 8008328:	ee35 5b46 	vsub.f64	d5, d5, d6
 800832c:	eeb4 7bc5 	vcmpe.f64	d7, d5
 8008330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008334:	f63f af6d 	bhi.w	8008212 <__ieee754_pow+0x4fa>
 8008338:	e7f3      	b.n	8008322 <__ieee754_pow+0x60a>
 800833a:	2000      	movs	r0, #0
 800833c:	e78d      	b.n	800825a <__ieee754_pow+0x542>
 800833e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008342:	460b      	mov	r3, r1
 8008344:	ec43 2b10 	vmov	d0, r2, r3
 8008348:	e7de      	b.n	8008308 <__ieee754_pow+0x5f0>
 800834a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800834e:	e54c      	b.n	8007dea <__ieee754_pow+0xd2>
 8008350:	e9cd 6700 	strd	r6, r7, [sp]
 8008354:	e575      	b.n	8007e42 <__ieee754_pow+0x12a>
 8008356:	ed8d 8b00 	vstr	d8, [sp]
 800835a:	e572      	b.n	8007e42 <__ieee754_pow+0x12a>
 800835c:	4615      	mov	r5, r2
 800835e:	e556      	b.n	8007e0e <__ieee754_pow+0xf6>
 8008360:	00000000 	.word	0x00000000
 8008364:	43400000 	.word	0x43400000
 8008368:	4a454eef 	.word	0x4a454eef
 800836c:	3fca7e28 	.word	0x3fca7e28
 8008370:	93c9db65 	.word	0x93c9db65
 8008374:	3fcd864a 	.word	0x3fcd864a
 8008378:	a91d4101 	.word	0xa91d4101
 800837c:	3fd17460 	.word	0x3fd17460
 8008380:	518f264d 	.word	0x518f264d
 8008384:	3fd55555 	.word	0x3fd55555
 8008388:	db6fabff 	.word	0xdb6fabff
 800838c:	3fdb6db6 	.word	0x3fdb6db6
 8008390:	33333303 	.word	0x33333303
 8008394:	3fe33333 	.word	0x3fe33333
 8008398:	dc3a03fd 	.word	0xdc3a03fd
 800839c:	3feec709 	.word	0x3feec709
 80083a0:	145b01f5 	.word	0x145b01f5
 80083a4:	be3e2fe0 	.word	0xbe3e2fe0
 80083a8:	e0000000 	.word	0xe0000000
 80083ac:	3feec709 	.word	0x3feec709
 80083b0:	652b82fe 	.word	0x652b82fe
 80083b4:	3c971547 	.word	0x3c971547
 80083b8:	fefa39ef 	.word	0xfefa39ef
 80083bc:	3fe62e42 	.word	0x3fe62e42
 80083c0:	0ca86c39 	.word	0x0ca86c39
 80083c4:	be205c61 	.word	0xbe205c61
 80083c8:	00000000 	.word	0x00000000
 80083cc:	3fe62e43 	.word	0x3fe62e43
 80083d0:	72bea4d0 	.word	0x72bea4d0
 80083d4:	3e663769 	.word	0x3e663769
 80083d8:	c5d26bf1 	.word	0xc5d26bf1
 80083dc:	bebbbd41 	.word	0xbebbbd41
 80083e0:	af25de2c 	.word	0xaf25de2c
 80083e4:	3f11566a 	.word	0x3f11566a
 80083e8:	16bebd93 	.word	0x16bebd93
 80083ec:	bf66c16c 	.word	0xbf66c16c
 80083f0:	5555553e 	.word	0x5555553e
 80083f4:	3fc55555 	.word	0x3fc55555
 80083f8:	c2f8f359 	.word	0xc2f8f359
 80083fc:	01a56e1f 	.word	0x01a56e1f
 8008400:	0003988e 	.word	0x0003988e
 8008404:	000bb679 	.word	0x000bb679
 8008408:	08009938 	.word	0x08009938
 800840c:	08009958 	.word	0x08009958
 8008410:	08009948 	.word	0x08009948
 8008414:	3fe00000 	.word	0x3fe00000
 8008418:	000fffff 	.word	0x000fffff
 800841c:	4090cbff 	.word	0x4090cbff
 8008420:	3f6f3400 	.word	0x3f6f3400
 8008424:	00000000 	.word	0x00000000

08008428 <__ieee754_rem_pio2>:
 8008428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800842a:	eeb0 7b40 	vmov.f64	d7, d0
 800842e:	ee17 5a90 	vmov	r5, s15
 8008432:	4b97      	ldr	r3, [pc, #604]	; (8008690 <__ieee754_rem_pio2+0x268>)
 8008434:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008438:	429e      	cmp	r6, r3
 800843a:	b089      	sub	sp, #36	; 0x24
 800843c:	4604      	mov	r4, r0
 800843e:	dc07      	bgt.n	8008450 <__ieee754_rem_pio2+0x28>
 8008440:	2200      	movs	r2, #0
 8008442:	2300      	movs	r3, #0
 8008444:	ed84 0b00 	vstr	d0, [r4]
 8008448:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800844c:	2000      	movs	r0, #0
 800844e:	e01b      	b.n	8008488 <__ieee754_rem_pio2+0x60>
 8008450:	4b90      	ldr	r3, [pc, #576]	; (8008694 <__ieee754_rem_pio2+0x26c>)
 8008452:	429e      	cmp	r6, r3
 8008454:	dc3b      	bgt.n	80084ce <__ieee754_rem_pio2+0xa6>
 8008456:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800845a:	2d00      	cmp	r5, #0
 800845c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8008650 <__ieee754_rem_pio2+0x228>
 8008460:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8008464:	dd19      	ble.n	800849a <__ieee754_rem_pio2+0x72>
 8008466:	ee30 7b46 	vsub.f64	d7, d0, d6
 800846a:	429e      	cmp	r6, r3
 800846c:	d00e      	beq.n	800848c <__ieee754_rem_pio2+0x64>
 800846e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8008658 <__ieee754_rem_pio2+0x230>
 8008472:	ee37 5b46 	vsub.f64	d5, d7, d6
 8008476:	ee37 7b45 	vsub.f64	d7, d7, d5
 800847a:	ed84 5b00 	vstr	d5, [r4]
 800847e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008482:	ed84 7b02 	vstr	d7, [r4, #8]
 8008486:	2001      	movs	r0, #1
 8008488:	b009      	add	sp, #36	; 0x24
 800848a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800848c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8008660 <__ieee754_rem_pio2+0x238>
 8008490:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008494:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8008668 <__ieee754_rem_pio2+0x240>
 8008498:	e7eb      	b.n	8008472 <__ieee754_rem_pio2+0x4a>
 800849a:	429e      	cmp	r6, r3
 800849c:	ee30 7b06 	vadd.f64	d7, d0, d6
 80084a0:	d00e      	beq.n	80084c0 <__ieee754_rem_pio2+0x98>
 80084a2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8008658 <__ieee754_rem_pio2+0x230>
 80084a6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80084aa:	ee37 7b45 	vsub.f64	d7, d7, d5
 80084ae:	ed84 5b00 	vstr	d5, [r4]
 80084b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80084b6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ba:	ed84 7b02 	vstr	d7, [r4, #8]
 80084be:	e7e3      	b.n	8008488 <__ieee754_rem_pio2+0x60>
 80084c0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8008660 <__ieee754_rem_pio2+0x238>
 80084c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80084c8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8008668 <__ieee754_rem_pio2+0x240>
 80084cc:	e7eb      	b.n	80084a6 <__ieee754_rem_pio2+0x7e>
 80084ce:	4b72      	ldr	r3, [pc, #456]	; (8008698 <__ieee754_rem_pio2+0x270>)
 80084d0:	429e      	cmp	r6, r3
 80084d2:	dc6e      	bgt.n	80085b2 <__ieee754_rem_pio2+0x18a>
 80084d4:	f000 fcc0 	bl	8008e58 <fabs>
 80084d8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80084dc:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8008670 <__ieee754_rem_pio2+0x248>
 80084e0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80084e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80084e8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80084ec:	ee17 0a90 	vmov	r0, s15
 80084f0:	eeb1 5b44 	vneg.f64	d5, d4
 80084f4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8008650 <__ieee754_rem_pio2+0x228>
 80084f8:	eea5 0b07 	vfma.f64	d0, d5, d7
 80084fc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8008658 <__ieee754_rem_pio2+0x230>
 8008500:	281f      	cmp	r0, #31
 8008502:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008506:	ee30 6b47 	vsub.f64	d6, d0, d7
 800850a:	dc1b      	bgt.n	8008544 <__ieee754_rem_pio2+0x11c>
 800850c:	1e42      	subs	r2, r0, #1
 800850e:	4b63      	ldr	r3, [pc, #396]	; (800869c <__ieee754_rem_pio2+0x274>)
 8008510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008514:	429e      	cmp	r6, r3
 8008516:	d015      	beq.n	8008544 <__ieee754_rem_pio2+0x11c>
 8008518:	ed84 6b00 	vstr	d6, [r4]
 800851c:	ed94 6b00 	vldr	d6, [r4]
 8008520:	2d00      	cmp	r5, #0
 8008522:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008526:	ee30 7b47 	vsub.f64	d7, d0, d7
 800852a:	ed84 7b02 	vstr	d7, [r4, #8]
 800852e:	daab      	bge.n	8008488 <__ieee754_rem_pio2+0x60>
 8008530:	eeb1 6b46 	vneg.f64	d6, d6
 8008534:	ed84 6b00 	vstr	d6, [r4]
 8008538:	eeb1 7b47 	vneg.f64	d7, d7
 800853c:	4240      	negs	r0, r0
 800853e:	ed84 7b02 	vstr	d7, [r4, #8]
 8008542:	e7a1      	b.n	8008488 <__ieee754_rem_pio2+0x60>
 8008544:	ee16 3a90 	vmov	r3, s13
 8008548:	1536      	asrs	r6, r6, #20
 800854a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800854e:	1af3      	subs	r3, r6, r3
 8008550:	2b10      	cmp	r3, #16
 8008552:	ed84 6b00 	vstr	d6, [r4]
 8008556:	dde1      	ble.n	800851c <__ieee754_rem_pio2+0xf4>
 8008558:	eeb0 6b40 	vmov.f64	d6, d0
 800855c:	ed9f 3b40 	vldr	d3, [pc, #256]	; 8008660 <__ieee754_rem_pio2+0x238>
 8008560:	eea5 6b03 	vfma.f64	d6, d5, d3
 8008564:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008568:	eea5 7b03 	vfma.f64	d7, d5, d3
 800856c:	ed9f 3b3e 	vldr	d3, [pc, #248]	; 8008668 <__ieee754_rem_pio2+0x240>
 8008570:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8008574:	ee36 3b47 	vsub.f64	d3, d6, d7
 8008578:	ee13 3a90 	vmov	r3, s7
 800857c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008580:	1af6      	subs	r6, r6, r3
 8008582:	2e31      	cmp	r6, #49	; 0x31
 8008584:	ed84 3b00 	vstr	d3, [r4]
 8008588:	dd10      	ble.n	80085ac <__ieee754_rem_pio2+0x184>
 800858a:	eeb0 0b46 	vmov.f64	d0, d6
 800858e:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8008678 <__ieee754_rem_pio2+0x250>
 8008592:	eea5 0b03 	vfma.f64	d0, d5, d3
 8008596:	ee36 7b40 	vsub.f64	d7, d6, d0
 800859a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8008680 <__ieee754_rem_pio2+0x258>
 800859e:	eea5 7b03 	vfma.f64	d7, d5, d3
 80085a2:	ee94 7b06 	vfnms.f64	d7, d4, d6
 80085a6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80085aa:	e7b5      	b.n	8008518 <__ieee754_rem_pio2+0xf0>
 80085ac:	eeb0 0b46 	vmov.f64	d0, d6
 80085b0:	e7b4      	b.n	800851c <__ieee754_rem_pio2+0xf4>
 80085b2:	4b3b      	ldr	r3, [pc, #236]	; (80086a0 <__ieee754_rem_pio2+0x278>)
 80085b4:	429e      	cmp	r6, r3
 80085b6:	dd06      	ble.n	80085c6 <__ieee754_rem_pio2+0x19e>
 80085b8:	ee30 7b40 	vsub.f64	d7, d0, d0
 80085bc:	ed80 7b02 	vstr	d7, [r0, #8]
 80085c0:	ed80 7b00 	vstr	d7, [r0]
 80085c4:	e742      	b.n	800844c <__ieee754_rem_pio2+0x24>
 80085c6:	ee10 3a10 	vmov	r3, s0
 80085ca:	1532      	asrs	r2, r6, #20
 80085cc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80085d0:	4618      	mov	r0, r3
 80085d2:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80085d6:	ec41 0b17 	vmov	d7, r0, r1
 80085da:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80085de:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8008688 <__ieee754_rem_pio2+0x260>
 80085e2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80085e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80085ea:	ed8d 6b02 	vstr	d6, [sp, #8]
 80085ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 80085f2:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80085f6:	a908      	add	r1, sp, #32
 80085f8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80085fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008600:	ed8d 6b04 	vstr	d6, [sp, #16]
 8008604:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008608:	ed8d 7b06 	vstr	d7, [sp, #24]
 800860c:	2303      	movs	r3, #3
 800860e:	ed31 7b02 	vldmdb	r1!, {d7}
 8008612:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800861a:	f103 30ff 	add.w	r0, r3, #4294967295
 800861e:	d013      	beq.n	8008648 <__ieee754_rem_pio2+0x220>
 8008620:	4920      	ldr	r1, [pc, #128]	; (80086a4 <__ieee754_rem_pio2+0x27c>)
 8008622:	9101      	str	r1, [sp, #4]
 8008624:	2102      	movs	r1, #2
 8008626:	9100      	str	r1, [sp, #0]
 8008628:	a802      	add	r0, sp, #8
 800862a:	4621      	mov	r1, r4
 800862c:	f000 f948 	bl	80088c0 <__kernel_rem_pio2>
 8008630:	2d00      	cmp	r5, #0
 8008632:	f6bf af29 	bge.w	8008488 <__ieee754_rem_pio2+0x60>
 8008636:	ed94 7b00 	vldr	d7, [r4]
 800863a:	eeb1 7b47 	vneg.f64	d7, d7
 800863e:	ed84 7b00 	vstr	d7, [r4]
 8008642:	ed94 7b02 	vldr	d7, [r4, #8]
 8008646:	e777      	b.n	8008538 <__ieee754_rem_pio2+0x110>
 8008648:	4603      	mov	r3, r0
 800864a:	e7e0      	b.n	800860e <__ieee754_rem_pio2+0x1e6>
 800864c:	f3af 8000 	nop.w
 8008650:	54400000 	.word	0x54400000
 8008654:	3ff921fb 	.word	0x3ff921fb
 8008658:	1a626331 	.word	0x1a626331
 800865c:	3dd0b461 	.word	0x3dd0b461
 8008660:	1a600000 	.word	0x1a600000
 8008664:	3dd0b461 	.word	0x3dd0b461
 8008668:	2e037073 	.word	0x2e037073
 800866c:	3ba3198a 	.word	0x3ba3198a
 8008670:	6dc9c883 	.word	0x6dc9c883
 8008674:	3fe45f30 	.word	0x3fe45f30
 8008678:	2e000000 	.word	0x2e000000
 800867c:	3ba3198a 	.word	0x3ba3198a
 8008680:	252049c1 	.word	0x252049c1
 8008684:	397b839a 	.word	0x397b839a
 8008688:	00000000 	.word	0x00000000
 800868c:	41700000 	.word	0x41700000
 8008690:	3fe921fb 	.word	0x3fe921fb
 8008694:	4002d97b 	.word	0x4002d97b
 8008698:	413921fb 	.word	0x413921fb
 800869c:	08009968 	.word	0x08009968
 80086a0:	7fefffff 	.word	0x7fefffff
 80086a4:	080099e8 	.word	0x080099e8

080086a8 <__ieee754_sqrt>:
 80086a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ac:	ee10 3a90 	vmov	r3, s1
 80086b0:	4c4b      	ldr	r4, [pc, #300]	; (80087e0 <__ieee754_sqrt+0x138>)
 80086b2:	439c      	bics	r4, r3
 80086b4:	ee10 0a10 	vmov	r0, s0
 80086b8:	ee10 2a90 	vmov	r2, s1
 80086bc:	ee10 1a10 	vmov	r1, s0
 80086c0:	d103      	bne.n	80086ca <__ieee754_sqrt+0x22>
 80086c2:	eea0 0b00 	vfma.f64	d0, d0, d0
 80086c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dc0a      	bgt.n	80086e4 <__ieee754_sqrt+0x3c>
 80086ce:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80086d2:	4320      	orrs	r0, r4
 80086d4:	d079      	beq.n	80087ca <__ieee754_sqrt+0x122>
 80086d6:	b12b      	cbz	r3, 80086e4 <__ieee754_sqrt+0x3c>
 80086d8:	ee30 7b40 	vsub.f64	d7, d0, d0
 80086dc:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80086e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e4:	151b      	asrs	r3, r3, #20
 80086e6:	d10c      	bne.n	8008702 <__ieee754_sqrt+0x5a>
 80086e8:	2a00      	cmp	r2, #0
 80086ea:	d070      	beq.n	80087ce <__ieee754_sqrt+0x126>
 80086ec:	2000      	movs	r0, #0
 80086ee:	02d5      	lsls	r5, r2, #11
 80086f0:	d571      	bpl.n	80087d6 <__ieee754_sqrt+0x12e>
 80086f2:	1e44      	subs	r4, r0, #1
 80086f4:	1b1b      	subs	r3, r3, r4
 80086f6:	f1c0 0420 	rsb	r4, r0, #32
 80086fa:	fa21 f404 	lsr.w	r4, r1, r4
 80086fe:	4322      	orrs	r2, r4
 8008700:	4081      	lsls	r1, r0
 8008702:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008706:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800870a:	07dc      	lsls	r4, r3, #31
 800870c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008710:	bf42      	ittt	mi
 8008712:	0052      	lslmi	r2, r2, #1
 8008714:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8008718:	0049      	lslmi	r1, r1, #1
 800871a:	105c      	asrs	r4, r3, #1
 800871c:	2500      	movs	r5, #0
 800871e:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8008722:	441a      	add	r2, r3
 8008724:	0049      	lsls	r1, r1, #1
 8008726:	2316      	movs	r3, #22
 8008728:	4628      	mov	r0, r5
 800872a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800872e:	1987      	adds	r7, r0, r6
 8008730:	4297      	cmp	r7, r2
 8008732:	bfde      	ittt	le
 8008734:	1bd2      	suble	r2, r2, r7
 8008736:	19b8      	addle	r0, r7, r6
 8008738:	19ad      	addle	r5, r5, r6
 800873a:	0052      	lsls	r2, r2, #1
 800873c:	3b01      	subs	r3, #1
 800873e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008742:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008746:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800874a:	d1f0      	bne.n	800872e <__ieee754_sqrt+0x86>
 800874c:	f04f 0e20 	mov.w	lr, #32
 8008750:	469c      	mov	ip, r3
 8008752:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008756:	4282      	cmp	r2, r0
 8008758:	eb06 070c 	add.w	r7, r6, ip
 800875c:	dc02      	bgt.n	8008764 <__ieee754_sqrt+0xbc>
 800875e:	d112      	bne.n	8008786 <__ieee754_sqrt+0xde>
 8008760:	428f      	cmp	r7, r1
 8008762:	d810      	bhi.n	8008786 <__ieee754_sqrt+0xde>
 8008764:	2f00      	cmp	r7, #0
 8008766:	eb07 0c06 	add.w	ip, r7, r6
 800876a:	da37      	bge.n	80087dc <__ieee754_sqrt+0x134>
 800876c:	f1bc 0f00 	cmp.w	ip, #0
 8008770:	db34      	blt.n	80087dc <__ieee754_sqrt+0x134>
 8008772:	f100 0801 	add.w	r8, r0, #1
 8008776:	1a12      	subs	r2, r2, r0
 8008778:	428f      	cmp	r7, r1
 800877a:	bf88      	it	hi
 800877c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008780:	1bc9      	subs	r1, r1, r7
 8008782:	4433      	add	r3, r6
 8008784:	4640      	mov	r0, r8
 8008786:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800878a:	f1be 0e01 	subs.w	lr, lr, #1
 800878e:	443a      	add	r2, r7
 8008790:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008794:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008798:	d1dd      	bne.n	8008756 <__ieee754_sqrt+0xae>
 800879a:	430a      	orrs	r2, r1
 800879c:	d006      	beq.n	80087ac <__ieee754_sqrt+0x104>
 800879e:	1c58      	adds	r0, r3, #1
 80087a0:	bf13      	iteet	ne
 80087a2:	3301      	addne	r3, #1
 80087a4:	3501      	addeq	r5, #1
 80087a6:	4673      	moveq	r3, lr
 80087a8:	f023 0301 	bicne.w	r3, r3, #1
 80087ac:	106a      	asrs	r2, r5, #1
 80087ae:	085b      	lsrs	r3, r3, #1
 80087b0:	07e9      	lsls	r1, r5, #31
 80087b2:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80087b6:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80087ba:	bf48      	it	mi
 80087bc:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80087c0:	eb02 5104 	add.w	r1, r2, r4, lsl #20
 80087c4:	4618      	mov	r0, r3
 80087c6:	ec41 0b10 	vmov	d0, r0, r1
 80087ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ce:	0aca      	lsrs	r2, r1, #11
 80087d0:	3b15      	subs	r3, #21
 80087d2:	0549      	lsls	r1, r1, #21
 80087d4:	e788      	b.n	80086e8 <__ieee754_sqrt+0x40>
 80087d6:	0052      	lsls	r2, r2, #1
 80087d8:	3001      	adds	r0, #1
 80087da:	e788      	b.n	80086ee <__ieee754_sqrt+0x46>
 80087dc:	4680      	mov	r8, r0
 80087de:	e7ca      	b.n	8008776 <__ieee754_sqrt+0xce>
 80087e0:	7ff00000 	.word	0x7ff00000
 80087e4:	00000000 	.word	0x00000000

080087e8 <__kernel_cos>:
 80087e8:	ee10 1a90 	vmov	r1, s1
 80087ec:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80087f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80087f4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80087f8:	da05      	bge.n	8008806 <__kernel_cos+0x1e>
 80087fa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80087fe:	ee17 3a90 	vmov	r3, s15
 8008802:	2b00      	cmp	r3, #0
 8008804:	d03d      	beq.n	8008882 <__kernel_cos+0x9a>
 8008806:	ee20 6b00 	vmul.f64	d6, d0, d0
 800880a:	ee20 1b01 	vmul.f64	d1, d0, d1
 800880e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8008888 <__kernel_cos+0xa0>
 8008812:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008816:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8008890 <__kernel_cos+0xa8>
 800881a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800881e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8008898 <__kernel_cos+0xb0>
 8008822:	eea6 7b04 	vfma.f64	d7, d6, d4
 8008826:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80088a0 <__kernel_cos+0xb8>
 800882a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800882e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 80088a8 <__kernel_cos+0xc0>
 8008832:	4b21      	ldr	r3, [pc, #132]	; (80088b8 <__kernel_cos+0xd0>)
 8008834:	eea6 7b04 	vfma.f64	d7, d6, d4
 8008838:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 80088b0 <__kernel_cos+0xc8>
 800883c:	4299      	cmp	r1, r3
 800883e:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008842:	ee24 4b06 	vmul.f64	d4, d4, d6
 8008846:	dc06      	bgt.n	8008856 <__kernel_cos+0x6e>
 8008848:	ee96 1b04 	vfnms.f64	d1, d6, d4
 800884c:	ee96 1b03 	vfnms.f64	d1, d6, d3
 8008850:	ee35 0b41 	vsub.f64	d0, d5, d1
 8008854:	4770      	bx	lr
 8008856:	4b19      	ldr	r3, [pc, #100]	; (80088bc <__kernel_cos+0xd4>)
 8008858:	4299      	cmp	r1, r3
 800885a:	dc0f      	bgt.n	800887c <__kernel_cos+0x94>
 800885c:	2200      	movs	r2, #0
 800885e:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8008862:	ec43 2b17 	vmov	d7, r2, r3
 8008866:	ee35 5b47 	vsub.f64	d5, d5, d7
 800886a:	ee96 1b04 	vfnms.f64	d1, d6, d4
 800886e:	ee96 7b03 	vfnms.f64	d7, d6, d3
 8008872:	ee37 0b41 	vsub.f64	d0, d7, d1
 8008876:	ee35 0b40 	vsub.f64	d0, d5, d0
 800887a:	4770      	bx	lr
 800887c:	eeb5 7b02 	vmov.f64	d7, #82	; 0x3e900000  0.2812500
 8008880:	e7f1      	b.n	8008866 <__kernel_cos+0x7e>
 8008882:	eeb0 0b45 	vmov.f64	d0, d5
 8008886:	4770      	bx	lr
 8008888:	be8838d4 	.word	0xbe8838d4
 800888c:	bda8fae9 	.word	0xbda8fae9
 8008890:	bdb4b1c4 	.word	0xbdb4b1c4
 8008894:	3e21ee9e 	.word	0x3e21ee9e
 8008898:	809c52ad 	.word	0x809c52ad
 800889c:	be927e4f 	.word	0xbe927e4f
 80088a0:	19cb1590 	.word	0x19cb1590
 80088a4:	3efa01a0 	.word	0x3efa01a0
 80088a8:	16c15177 	.word	0x16c15177
 80088ac:	bf56c16c 	.word	0xbf56c16c
 80088b0:	5555554c 	.word	0x5555554c
 80088b4:	3fa55555 	.word	0x3fa55555
 80088b8:	3fd33332 	.word	0x3fd33332
 80088bc:	3fe90000 	.word	0x3fe90000

080088c0 <__kernel_rem_pio2>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	ed2d 8b06 	vpush	{d8-d10}
 80088c8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80088cc:	468b      	mov	fp, r1
 80088ce:	9301      	str	r3, [sp, #4]
 80088d0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80088d2:	4bcf      	ldr	r3, [pc, #828]	; (8008c10 <__kernel_rem_pio2+0x350>)
 80088d4:	9002      	str	r0, [sp, #8]
 80088d6:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 80088da:	9b01      	ldr	r3, [sp, #4]
 80088dc:	9ca3      	ldr	r4, [sp, #652]	; 0x28c
 80088de:	3b01      	subs	r3, #1
 80088e0:	1ed0      	subs	r0, r2, #3
 80088e2:	2518      	movs	r5, #24
 80088e4:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8008bf8 <__kernel_rem_pio2+0x338>
 80088e8:	fb90 f0f5 	sdiv	r0, r0, r5
 80088ec:	f06f 0517 	mvn.w	r5, #23
 80088f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80088f4:	fb00 5505 	mla	r5, r0, r5, r5
 80088f8:	1ac7      	subs	r7, r0, r3
 80088fa:	4415      	add	r5, r2
 80088fc:	eb0a 0e03 	add.w	lr, sl, r3
 8008900:	ae1a      	add	r6, sp, #104	; 0x68
 8008902:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
 8008906:	2200      	movs	r2, #0
 8008908:	4572      	cmp	r2, lr
 800890a:	dd0f      	ble.n	800892c <__kernel_rem_pio2+0x6c>
 800890c:	f50d 7ed4 	add.w	lr, sp, #424	; 0x1a8
 8008910:	2600      	movs	r6, #0
 8008912:	4556      	cmp	r6, sl
 8008914:	dc27      	bgt.n	8008966 <__kernel_rem_pio2+0xa6>
 8008916:	9a01      	ldr	r2, [sp, #4]
 8008918:	9f02      	ldr	r7, [sp, #8]
 800891a:	4432      	add	r2, r6
 800891c:	a91a      	add	r1, sp, #104	; 0x68
 800891e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008922:	ed9f 7bb5 	vldr	d7, [pc, #724]	; 8008bf8 <__kernel_rem_pio2+0x338>
 8008926:	f04f 0c00 	mov.w	ip, #0
 800892a:	e016      	b.n	800895a <__kernel_rem_pio2+0x9a>
 800892c:	42d7      	cmn	r7, r2
 800892e:	d409      	bmi.n	8008944 <__kernel_rem_pio2+0x84>
 8008930:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8008934:	ee07 1a90 	vmov	s15, r1
 8008938:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800893c:	eca6 7b02 	vstmia	r6!, {d7}
 8008940:	3201      	adds	r2, #1
 8008942:	e7e1      	b.n	8008908 <__kernel_rem_pio2+0x48>
 8008944:	eeb0 7b46 	vmov.f64	d7, d6
 8008948:	e7f8      	b.n	800893c <__kernel_rem_pio2+0x7c>
 800894a:	ecb7 5b02 	vldmia	r7!, {d5}
 800894e:	ed32 6b02 	vldmdb	r2!, {d6}
 8008952:	f10c 0c01 	add.w	ip, ip, #1
 8008956:	eea5 7b06 	vfma.f64	d7, d5, d6
 800895a:	459c      	cmp	ip, r3
 800895c:	ddf5      	ble.n	800894a <__kernel_rem_pio2+0x8a>
 800895e:	ecae 7b02 	vstmia	lr!, {d7}
 8008962:	3601      	adds	r6, #1
 8008964:	e7d5      	b.n	8008912 <__kernel_rem_pio2+0x52>
 8008966:	aa06      	add	r2, sp, #24
 8008968:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800896c:	ed9f 9ba4 	vldr	d9, [pc, #656]	; 8008c00 <__kernel_rem_pio2+0x340>
 8008970:	ed9f aba5 	vldr	d10, [pc, #660]	; 8008c08 <__kernel_rem_pio2+0x348>
 8008974:	9204      	str	r2, [sp, #16]
 8008976:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 800897a:	9203      	str	r2, [sp, #12]
 800897c:	4657      	mov	r7, sl
 800897e:	aa92      	add	r2, sp, #584	; 0x248
 8008980:	f107 5800 	add.w	r8, r7, #536870912	; 0x20000000
 8008984:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8008988:	f108 38ff 	add.w	r8, r8, #4294967295
 800898c:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8008990:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8008994:	aa92      	add	r2, sp, #584	; 0x248
 8008996:	eb02 0008 	add.w	r0, r2, r8
 800899a:	3898      	subs	r0, #152	; 0x98
 800899c:	2200      	movs	r2, #0
 800899e:	1abc      	subs	r4, r7, r2
 80089a0:	2c00      	cmp	r4, #0
 80089a2:	dc4c      	bgt.n	8008a3e <__kernel_rem_pio2+0x17e>
 80089a4:	4628      	mov	r0, r5
 80089a6:	9305      	str	r3, [sp, #20]
 80089a8:	f000 fb76 	bl	8009098 <scalbn>
 80089ac:	eeb0 8b40 	vmov.f64	d8, d0
 80089b0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80089b4:	ee28 0b00 	vmul.f64	d0, d8, d0
 80089b8:	f000 fa5e 	bl	8008e78 <floor>
 80089bc:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80089c0:	eea0 8b47 	vfms.f64	d8, d0, d7
 80089c4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80089c8:	2d00      	cmp	r5, #0
 80089ca:	ee17 9a90 	vmov	r9, s15
 80089ce:	9b05      	ldr	r3, [sp, #20]
 80089d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80089d4:	ee38 8b47 	vsub.f64	d8, d8, d7
 80089d8:	dd46      	ble.n	8008a68 <__kernel_rem_pio2+0x1a8>
 80089da:	1e78      	subs	r0, r7, #1
 80089dc:	aa06      	add	r2, sp, #24
 80089de:	f1c5 0418 	rsb	r4, r5, #24
 80089e2:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80089e6:	fa46 f204 	asr.w	r2, r6, r4
 80089ea:	4491      	add	r9, r2
 80089ec:	40a2      	lsls	r2, r4
 80089ee:	1ab6      	subs	r6, r6, r2
 80089f0:	aa06      	add	r2, sp, #24
 80089f2:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 80089f6:	f1c5 0217 	rsb	r2, r5, #23
 80089fa:	4116      	asrs	r6, r2
 80089fc:	2e00      	cmp	r6, #0
 80089fe:	dd42      	ble.n	8008a86 <__kernel_rem_pio2+0x1c6>
 8008a00:	2400      	movs	r4, #0
 8008a02:	f109 0901 	add.w	r9, r9, #1
 8008a06:	4620      	mov	r0, r4
 8008a08:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8008a0c:	42a7      	cmp	r7, r4
 8008a0e:	dc75      	bgt.n	8008afc <__kernel_rem_pio2+0x23c>
 8008a10:	2d00      	cmp	r5, #0
 8008a12:	dd05      	ble.n	8008a20 <__kernel_rem_pio2+0x160>
 8008a14:	2d01      	cmp	r5, #1
 8008a16:	f000 8086 	beq.w	8008b26 <__kernel_rem_pio2+0x266>
 8008a1a:	2d02      	cmp	r5, #2
 8008a1c:	f000 808d 	beq.w	8008b3a <__kernel_rem_pio2+0x27a>
 8008a20:	2e02      	cmp	r6, #2
 8008a22:	d130      	bne.n	8008a86 <__kernel_rem_pio2+0x1c6>
 8008a24:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008a28:	ee30 8b48 	vsub.f64	d8, d0, d8
 8008a2c:	b358      	cbz	r0, 8008a86 <__kernel_rem_pio2+0x1c6>
 8008a2e:	4628      	mov	r0, r5
 8008a30:	9305      	str	r3, [sp, #20]
 8008a32:	f000 fb31 	bl	8009098 <scalbn>
 8008a36:	9b05      	ldr	r3, [sp, #20]
 8008a38:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008a3c:	e023      	b.n	8008a86 <__kernel_rem_pio2+0x1c6>
 8008a3e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8008a42:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008a46:	ac06      	add	r4, sp, #24
 8008a48:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8008a4c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8008a50:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008a54:	ee10 1a10 	vmov	r1, s0
 8008a58:	ed30 0b02 	vldmdb	r0!, {d0}
 8008a5c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8008a60:	ee37 0b00 	vadd.f64	d0, d7, d0
 8008a64:	3201      	adds	r2, #1
 8008a66:	e79a      	b.n	800899e <__kernel_rem_pio2+0xde>
 8008a68:	d105      	bne.n	8008a76 <__kernel_rem_pio2+0x1b6>
 8008a6a:	1e7a      	subs	r2, r7, #1
 8008a6c:	a906      	add	r1, sp, #24
 8008a6e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8008a72:	15f6      	asrs	r6, r6, #23
 8008a74:	e7c2      	b.n	80089fc <__kernel_rem_pio2+0x13c>
 8008a76:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008a7a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a82:	da39      	bge.n	8008af8 <__kernel_rem_pio2+0x238>
 8008a84:	2600      	movs	r6, #0
 8008a86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a8e:	f040 808e 	bne.w	8008bae <__kernel_rem_pio2+0x2ee>
 8008a92:	1e7c      	subs	r4, r7, #1
 8008a94:	4620      	mov	r0, r4
 8008a96:	2200      	movs	r2, #0
 8008a98:	4550      	cmp	r0, sl
 8008a9a:	da55      	bge.n	8008b48 <__kernel_rem_pio2+0x288>
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	d164      	bne.n	8008b6a <__kernel_rem_pio2+0x2aa>
 8008aa0:	2401      	movs	r4, #1
 8008aa2:	f06f 0003 	mvn.w	r0, #3
 8008aa6:	fb00 f204 	mul.w	r2, r0, r4
 8008aaa:	9904      	ldr	r1, [sp, #16]
 8008aac:	588a      	ldr	r2, [r1, r2]
 8008aae:	2a00      	cmp	r2, #0
 8008ab0:	d050      	beq.n	8008b54 <__kernel_rem_pio2+0x294>
 8008ab2:	aa92      	add	r2, sp, #584	; 0x248
 8008ab4:	4490      	add	r8, r2
 8008ab6:	9a01      	ldr	r2, [sp, #4]
 8008ab8:	a91a      	add	r1, sp, #104	; 0x68
 8008aba:	443a      	add	r2, r7
 8008abc:	1c78      	adds	r0, r7, #1
 8008abe:	f1a8 0890 	sub.w	r8, r8, #144	; 0x90
 8008ac2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008ac6:	4427      	add	r7, r4
 8008ac8:	42b8      	cmp	r0, r7
 8008aca:	f73f af58 	bgt.w	800897e <__kernel_rem_pio2+0xbe>
 8008ace:	9903      	ldr	r1, [sp, #12]
 8008ad0:	9e02      	ldr	r6, [sp, #8]
 8008ad2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008ad6:	9105      	str	r1, [sp, #20]
 8008ad8:	ee07 1a90 	vmov	s15, r1
 8008adc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008ae0:	2400      	movs	r4, #0
 8008ae2:	eca2 7b02 	vstmia	r2!, {d7}
 8008ae6:	ed9f 7b44 	vldr	d7, [pc, #272]	; 8008bf8 <__kernel_rem_pio2+0x338>
 8008aea:	4696      	mov	lr, r2
 8008aec:	429c      	cmp	r4, r3
 8008aee:	dd33      	ble.n	8008b58 <__kernel_rem_pio2+0x298>
 8008af0:	eca8 7b02 	vstmia	r8!, {d7}
 8008af4:	3001      	adds	r0, #1
 8008af6:	e7e7      	b.n	8008ac8 <__kernel_rem_pio2+0x208>
 8008af8:	2602      	movs	r6, #2
 8008afa:	e781      	b.n	8008a00 <__kernel_rem_pio2+0x140>
 8008afc:	aa06      	add	r2, sp, #24
 8008afe:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8008b02:	b948      	cbnz	r0, 8008b18 <__kernel_rem_pio2+0x258>
 8008b04:	b12a      	cbz	r2, 8008b12 <__kernel_rem_pio2+0x252>
 8008b06:	a906      	add	r1, sp, #24
 8008b08:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8008b0c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8008b10:	2201      	movs	r2, #1
 8008b12:	3401      	adds	r4, #1
 8008b14:	4610      	mov	r0, r2
 8008b16:	e779      	b.n	8008a0c <__kernel_rem_pio2+0x14c>
 8008b18:	a906      	add	r1, sp, #24
 8008b1a:	ebae 0202 	sub.w	r2, lr, r2
 8008b1e:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8008b22:	4602      	mov	r2, r0
 8008b24:	e7f5      	b.n	8008b12 <__kernel_rem_pio2+0x252>
 8008b26:	1e7c      	subs	r4, r7, #1
 8008b28:	aa06      	add	r2, sp, #24
 8008b2a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8008b2e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8008b32:	a906      	add	r1, sp, #24
 8008b34:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8008b38:	e772      	b.n	8008a20 <__kernel_rem_pio2+0x160>
 8008b3a:	1e7c      	subs	r4, r7, #1
 8008b3c:	aa06      	add	r2, sp, #24
 8008b3e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8008b42:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8008b46:	e7f4      	b.n	8008b32 <__kernel_rem_pio2+0x272>
 8008b48:	a906      	add	r1, sp, #24
 8008b4a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008b4e:	3801      	subs	r0, #1
 8008b50:	430a      	orrs	r2, r1
 8008b52:	e7a1      	b.n	8008a98 <__kernel_rem_pio2+0x1d8>
 8008b54:	3401      	adds	r4, #1
 8008b56:	e7a6      	b.n	8008aa6 <__kernel_rem_pio2+0x1e6>
 8008b58:	ecb6 5b02 	vldmia	r6!, {d5}
 8008b5c:	ed3e 6b02 	vldmdb	lr!, {d6}
 8008b60:	3401      	adds	r4, #1
 8008b62:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008b66:	e7c1      	b.n	8008aec <__kernel_rem_pio2+0x22c>
 8008b68:	3c01      	subs	r4, #1
 8008b6a:	ab06      	add	r3, sp, #24
 8008b6c:	3d18      	subs	r5, #24
 8008b6e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0f8      	beq.n	8008b68 <__kernel_rem_pio2+0x2a8>
 8008b76:	4628      	mov	r0, r5
 8008b78:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008b7c:	f000 fa8c 	bl	8009098 <scalbn>
 8008b80:	00e3      	lsls	r3, r4, #3
 8008b82:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8008c00 <__kernel_rem_pio2+0x340>
 8008b86:	aa6a      	add	r2, sp, #424	; 0x1a8
 8008b88:	3308      	adds	r3, #8
 8008b8a:	18d0      	adds	r0, r2, r3
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	da4b      	bge.n	8008c2a <__kernel_rem_pio2+0x36a>
 8008b92:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 8008b96:	2200      	movs	r2, #0
 8008b98:	4677      	mov	r7, lr
 8008b9a:	1aa5      	subs	r5, r4, r2
 8008b9c:	d464      	bmi.n	8008c68 <__kernel_rem_pio2+0x3a8>
 8008b9e:	a86a      	add	r0, sp, #424	; 0x1a8
 8008ba0:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8008ba4:	491b      	ldr	r1, [pc, #108]	; (8008c14 <__kernel_rem_pio2+0x354>)
 8008ba6:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008bf8 <__kernel_rem_pio2+0x338>
 8008baa:	2000      	movs	r0, #0
 8008bac:	e054      	b.n	8008c58 <__kernel_rem_pio2+0x398>
 8008bae:	4268      	negs	r0, r5
 8008bb0:	eeb0 0b48 	vmov.f64	d0, d8
 8008bb4:	f000 fa70 	bl	8009098 <scalbn>
 8008bb8:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8008c08 <__kernel_rem_pio2+0x348>
 8008bbc:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc4:	db28      	blt.n	8008c18 <__kernel_rem_pio2+0x358>
 8008bc6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8008c00 <__kernel_rem_pio2+0x340>
 8008bca:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008bce:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008bd2:	aa06      	add	r2, sp, #24
 8008bd4:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8008bd8:	eea5 0b46 	vfms.f64	d0, d5, d6
 8008bdc:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008be0:	1c7c      	adds	r4, r7, #1
 8008be2:	ee10 3a10 	vmov	r3, s0
 8008be6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8008bea:	ee17 3a10 	vmov	r3, s14
 8008bee:	3518      	adds	r5, #24
 8008bf0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008bf4:	e7bf      	b.n	8008b76 <__kernel_rem_pio2+0x2b6>
 8008bf6:	bf00      	nop
	...
 8008c04:	3e700000 	.word	0x3e700000
 8008c08:	00000000 	.word	0x00000000
 8008c0c:	41700000 	.word	0x41700000
 8008c10:	08009b30 	.word	0x08009b30
 8008c14:	08009af0 	.word	0x08009af0
 8008c18:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008c1c:	aa06      	add	r2, sp, #24
 8008c1e:	ee10 3a10 	vmov	r3, s0
 8008c22:	463c      	mov	r4, r7
 8008c24:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8008c28:	e7a5      	b.n	8008b76 <__kernel_rem_pio2+0x2b6>
 8008c2a:	a906      	add	r1, sp, #24
 8008c2c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8008c30:	9101      	str	r1, [sp, #4]
 8008c32:	ee07 1a90 	vmov	s15, r1
 8008c36:	3a01      	subs	r2, #1
 8008c38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008c3c:	ee27 7b00 	vmul.f64	d7, d7, d0
 8008c40:	ee20 0b06 	vmul.f64	d0, d0, d6
 8008c44:	ed20 7b02 	vstmdb	r0!, {d7}
 8008c48:	e7a1      	b.n	8008b8e <__kernel_rem_pio2+0x2ce>
 8008c4a:	ecb1 5b02 	vldmia	r1!, {d5}
 8008c4e:	ecb5 6b02 	vldmia	r5!, {d6}
 8008c52:	3001      	adds	r0, #1
 8008c54:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008c58:	4550      	cmp	r0, sl
 8008c5a:	dc01      	bgt.n	8008c60 <__kernel_rem_pio2+0x3a0>
 8008c5c:	4290      	cmp	r0, r2
 8008c5e:	ddf4      	ble.n	8008c4a <__kernel_rem_pio2+0x38a>
 8008c60:	ecae 7b02 	vstmia	lr!, {d7}
 8008c64:	3201      	adds	r2, #1
 8008c66:	e798      	b.n	8008b9a <__kernel_rem_pio2+0x2da>
 8008c68:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8008c6a:	2a03      	cmp	r2, #3
 8008c6c:	d843      	bhi.n	8008cf6 <__kernel_rem_pio2+0x436>
 8008c6e:	e8df f002 	tbb	[pc, r2]
 8008c72:	1d37      	.short	0x1d37
 8008c74:	021d      	.short	0x021d
 8008c76:	aa42      	add	r2, sp, #264	; 0x108
 8008c78:	4413      	add	r3, r2
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	dc56      	bgt.n	8008d30 <__kernel_rem_pio2+0x470>
 8008c82:	461a      	mov	r2, r3
 8008c84:	4620      	mov	r0, r4
 8008c86:	2801      	cmp	r0, #1
 8008c88:	dc62      	bgt.n	8008d50 <__kernel_rem_pio2+0x490>
 8008c8a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8008da0 <__kernel_rem_pio2+0x4e0>
 8008c8e:	2c01      	cmp	r4, #1
 8008c90:	dc6e      	bgt.n	8008d70 <__kernel_rem_pio2+0x4b0>
 8008c92:	2e00      	cmp	r6, #0
 8008c94:	d172      	bne.n	8008d7c <__kernel_rem_pio2+0x4bc>
 8008c96:	e9dd 2342 	ldrd	r2, r3, [sp, #264]	; 0x108
 8008c9a:	e9cb 2300 	strd	r2, r3, [fp]
 8008c9e:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 8008ca2:	e9cb 2302 	strd	r2, r3, [fp, #8]
 8008ca6:	ed8b 7b04 	vstr	d7, [fp, #16]
 8008caa:	e024      	b.n	8008cf6 <__kernel_rem_pio2+0x436>
 8008cac:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008da0 <__kernel_rem_pio2+0x4e0>
 8008cb0:	aa42      	add	r2, sp, #264	; 0x108
 8008cb2:	4413      	add	r3, r2
 8008cb4:	4622      	mov	r2, r4
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	da2b      	bge.n	8008d12 <__kernel_rem_pio2+0x452>
 8008cba:	b386      	cbz	r6, 8008d1e <__kernel_rem_pio2+0x45e>
 8008cbc:	eeb1 7b46 	vneg.f64	d7, d6
 8008cc0:	ed8b 7b00 	vstr	d7, [fp]
 8008cc4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8008cc8:	aa44      	add	r2, sp, #272	; 0x110
 8008cca:	2301      	movs	r3, #1
 8008ccc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008cd0:	429c      	cmp	r4, r3
 8008cd2:	da27      	bge.n	8008d24 <__kernel_rem_pio2+0x464>
 8008cd4:	b10e      	cbz	r6, 8008cda <__kernel_rem_pio2+0x41a>
 8008cd6:	eeb1 7b47 	vneg.f64	d7, d7
 8008cda:	ed8b 7b02 	vstr	d7, [fp, #8]
 8008cde:	e00a      	b.n	8008cf6 <__kernel_rem_pio2+0x436>
 8008ce0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008da0 <__kernel_rem_pio2+0x4e0>
 8008ce4:	aa42      	add	r2, sp, #264	; 0x108
 8008ce6:	4413      	add	r3, r2
 8008ce8:	2c00      	cmp	r4, #0
 8008cea:	da0c      	bge.n	8008d06 <__kernel_rem_pio2+0x446>
 8008cec:	b10e      	cbz	r6, 8008cf2 <__kernel_rem_pio2+0x432>
 8008cee:	eeb1 7b47 	vneg.f64	d7, d7
 8008cf2:	ed8b 7b00 	vstr	d7, [fp]
 8008cf6:	f009 0007 	and.w	r0, r9, #7
 8008cfa:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8008cfe:	ecbd 8b06 	vpop	{d8-d10}
 8008d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d06:	ed33 6b02 	vldmdb	r3!, {d6}
 8008d0a:	3c01      	subs	r4, #1
 8008d0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008d10:	e7ea      	b.n	8008ce8 <__kernel_rem_pio2+0x428>
 8008d12:	ed33 7b02 	vldmdb	r3!, {d7}
 8008d16:	3a01      	subs	r2, #1
 8008d18:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008d1c:	e7cb      	b.n	8008cb6 <__kernel_rem_pio2+0x3f6>
 8008d1e:	eeb0 7b46 	vmov.f64	d7, d6
 8008d22:	e7cd      	b.n	8008cc0 <__kernel_rem_pio2+0x400>
 8008d24:	ecb2 6b02 	vldmia	r2!, {d6}
 8008d28:	3301      	adds	r3, #1
 8008d2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008d2e:	e7cf      	b.n	8008cd0 <__kernel_rem_pio2+0x410>
 8008d30:	ed12 5b02 	vldr	d5, [r2, #-8]
 8008d34:	ed12 7b04 	vldr	d7, [r2, #-16]
 8008d38:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008d3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d40:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008d44:	ed22 7b02 	vstmdb	r2!, {d7}
 8008d48:	3801      	subs	r0, #1
 8008d4a:	ed02 6b02 	vstr	d6, [r2, #-8]
 8008d4e:	e796      	b.n	8008c7e <__kernel_rem_pio2+0x3be>
 8008d50:	ed12 5b02 	vldr	d5, [r2, #-8]
 8008d54:	ed12 7b04 	vldr	d7, [r2, #-16]
 8008d58:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008d5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d60:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008d64:	ed22 7b02 	vstmdb	r2!, {d7}
 8008d68:	3801      	subs	r0, #1
 8008d6a:	ed02 6b02 	vstr	d6, [r2, #-8]
 8008d6e:	e78a      	b.n	8008c86 <__kernel_rem_pio2+0x3c6>
 8008d70:	ed33 6b02 	vldmdb	r3!, {d6}
 8008d74:	3c01      	subs	r4, #1
 8008d76:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008d7a:	e788      	b.n	8008c8e <__kernel_rem_pio2+0x3ce>
 8008d7c:	ed97 6b00 	vldr	d6, [r7]
 8008d80:	eeb1 7b47 	vneg.f64	d7, d7
 8008d84:	eeb1 6b46 	vneg.f64	d6, d6
 8008d88:	ed8b 6b00 	vstr	d6, [fp]
 8008d8c:	ed97 6b02 	vldr	d6, [r7, #8]
 8008d90:	eeb1 6b46 	vneg.f64	d6, d6
 8008d94:	ed8b 6b02 	vstr	d6, [fp, #8]
 8008d98:	e785      	b.n	8008ca6 <__kernel_rem_pio2+0x3e6>
 8008d9a:	bf00      	nop
 8008d9c:	f3af 8000 	nop.w
	...

08008da8 <__kernel_sin>:
 8008da8:	ee10 3a90 	vmov	r3, s1
 8008dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008db0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008db4:	da04      	bge.n	8008dc0 <__kernel_sin+0x18>
 8008db6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008dba:	ee17 3a90 	vmov	r3, s15
 8008dbe:	b35b      	cbz	r3, 8008e18 <__kernel_sin+0x70>
 8008dc0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8008dc4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008dc8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008e20 <__kernel_sin+0x78>
 8008dcc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008e28 <__kernel_sin+0x80>
 8008dd0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008dd4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008e30 <__kernel_sin+0x88>
 8008dd8:	eea6 7b04 	vfma.f64	d7, d6, d4
 8008ddc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008e38 <__kernel_sin+0x90>
 8008de0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008de4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008e40 <__kernel_sin+0x98>
 8008de8:	eea6 7b04 	vfma.f64	d7, d6, d4
 8008dec:	b930      	cbnz	r0, 8008dfc <__kernel_sin+0x54>
 8008dee:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008e48 <__kernel_sin+0xa0>
 8008df2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008df6:	eea5 0b04 	vfma.f64	d0, d5, d4
 8008dfa:	4770      	bx	lr
 8008dfc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008e00:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008e04:	eea1 7b04 	vfma.f64	d7, d1, d4
 8008e08:	ee96 1b07 	vfnms.f64	d1, d6, d7
 8008e0c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008e50 <__kernel_sin+0xa8>
 8008e10:	eea5 1b07 	vfma.f64	d1, d5, d7
 8008e14:	ee30 0b41 	vsub.f64	d0, d0, d1
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	f3af 8000 	nop.w
 8008e20:	5acfd57c 	.word	0x5acfd57c
 8008e24:	3de5d93a 	.word	0x3de5d93a
 8008e28:	8a2b9ceb 	.word	0x8a2b9ceb
 8008e2c:	be5ae5e6 	.word	0xbe5ae5e6
 8008e30:	57b1fe7d 	.word	0x57b1fe7d
 8008e34:	3ec71de3 	.word	0x3ec71de3
 8008e38:	19c161d5 	.word	0x19c161d5
 8008e3c:	bf2a01a0 	.word	0xbf2a01a0
 8008e40:	1110f8a6 	.word	0x1110f8a6
 8008e44:	3f811111 	.word	0x3f811111
 8008e48:	55555549 	.word	0x55555549
 8008e4c:	bfc55555 	.word	0xbfc55555
 8008e50:	55555549 	.word	0x55555549
 8008e54:	3fc55555 	.word	0x3fc55555

08008e58 <fabs>:
 8008e58:	ec53 2b10 	vmov	r2, r3, d0
 8008e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e60:	ec43 2b10 	vmov	d0, r2, r3
 8008e64:	4770      	bx	lr

08008e66 <finite>:
 8008e66:	ee10 3a90 	vmov	r3, s1
 8008e6a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008e6e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008e72:	0fc0      	lsrs	r0, r0, #31
 8008e74:	4770      	bx	lr
	...

08008e78 <floor>:
 8008e78:	ee10 1a90 	vmov	r1, s1
 8008e7c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e80:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008e84:	2b13      	cmp	r3, #19
 8008e86:	b530      	push	{r4, r5, lr}
 8008e88:	ee10 0a10 	vmov	r0, s0
 8008e8c:	ee10 5a10 	vmov	r5, s0
 8008e90:	dc33      	bgt.n	8008efa <floor+0x82>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	da17      	bge.n	8008ec6 <floor+0x4e>
 8008e96:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8008f58 <floor+0xe0>
 8008e9a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008e9e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea6:	dd09      	ble.n	8008ebc <floor+0x44>
 8008ea8:	2900      	cmp	r1, #0
 8008eaa:	da50      	bge.n	8008f4e <floor+0xd6>
 8008eac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008eb0:	432b      	orrs	r3, r5
 8008eb2:	4b2b      	ldr	r3, [pc, #172]	; (8008f60 <floor+0xe8>)
 8008eb4:	f04f 0000 	mov.w	r0, #0
 8008eb8:	bf18      	it	ne
 8008eba:	4619      	movne	r1, r3
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	ec43 2b10 	vmov	d0, r2, r3
 8008ec4:	bd30      	pop	{r4, r5, pc}
 8008ec6:	4a27      	ldr	r2, [pc, #156]	; (8008f64 <floor+0xec>)
 8008ec8:	411a      	asrs	r2, r3
 8008eca:	ea01 0402 	and.w	r4, r1, r2
 8008ece:	432c      	orrs	r4, r5
 8008ed0:	d0f8      	beq.n	8008ec4 <floor+0x4c>
 8008ed2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008f58 <floor+0xe0>
 8008ed6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008eda:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee2:	ddeb      	ble.n	8008ebc <floor+0x44>
 8008ee4:	2900      	cmp	r1, #0
 8008ee6:	bfbe      	ittt	lt
 8008ee8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8008eec:	fa40 f303 	asrlt.w	r3, r0, r3
 8008ef0:	18c9      	addlt	r1, r1, r3
 8008ef2:	ea21 0102 	bic.w	r1, r1, r2
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e7e0      	b.n	8008ebc <floor+0x44>
 8008efa:	2b33      	cmp	r3, #51	; 0x33
 8008efc:	dd05      	ble.n	8008f0a <floor+0x92>
 8008efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f02:	d1df      	bne.n	8008ec4 <floor+0x4c>
 8008f04:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008f08:	bd30      	pop	{r4, r5, pc}
 8008f0a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8008f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f12:	40e2      	lsrs	r2, r4
 8008f14:	4215      	tst	r5, r2
 8008f16:	d0d5      	beq.n	8008ec4 <floor+0x4c>
 8008f18:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8008f58 <floor+0xe0>
 8008f1c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008f20:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f28:	ddc8      	ble.n	8008ebc <floor+0x44>
 8008f2a:	2900      	cmp	r1, #0
 8008f2c:	da02      	bge.n	8008f34 <floor+0xbc>
 8008f2e:	2b14      	cmp	r3, #20
 8008f30:	d103      	bne.n	8008f3a <floor+0xc2>
 8008f32:	3101      	adds	r1, #1
 8008f34:	ea20 0002 	bic.w	r0, r0, r2
 8008f38:	e7c0      	b.n	8008ebc <floor+0x44>
 8008f3a:	2401      	movs	r4, #1
 8008f3c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008f40:	fa04 f303 	lsl.w	r3, r4, r3
 8008f44:	4418      	add	r0, r3
 8008f46:	4285      	cmp	r5, r0
 8008f48:	bf88      	it	hi
 8008f4a:	1909      	addhi	r1, r1, r4
 8008f4c:	e7f2      	b.n	8008f34 <floor+0xbc>
 8008f4e:	2000      	movs	r0, #0
 8008f50:	4601      	mov	r1, r0
 8008f52:	e7b3      	b.n	8008ebc <floor+0x44>
 8008f54:	f3af 8000 	nop.w
 8008f58:	8800759c 	.word	0x8800759c
 8008f5c:	7e37e43c 	.word	0x7e37e43c
 8008f60:	bff00000 	.word	0xbff00000
 8008f64:	000fffff 	.word	0x000fffff

08008f68 <matherr>:
 8008f68:	2000      	movs	r0, #0
 8008f6a:	4770      	bx	lr
 8008f6c:	0000      	movs	r0, r0
	...

08008f70 <nan>:
 8008f70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f78 <nan+0x8>
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	00000000 	.word	0x00000000
 8008f7c:	7ff80000 	.word	0x7ff80000

08008f80 <rint>:
 8008f80:	b530      	push	{r4, r5, lr}
 8008f82:	b085      	sub	sp, #20
 8008f84:	ed8d 0b00 	vstr	d0, [sp]
 8008f88:	9b01      	ldr	r3, [sp, #4]
 8008f8a:	9d00      	ldr	r5, [sp, #0]
 8008f8c:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8008f90:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 8008f94:	2813      	cmp	r0, #19
 8008f96:	462a      	mov	r2, r5
 8008f98:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8008f9c:	dc5a      	bgt.n	8009054 <rint+0xd4>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	da2f      	bge.n	8009002 <rint+0x82>
 8008fa2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008fa6:	432a      	orrs	r2, r5
 8008fa8:	d027      	beq.n	8008ffa <rint+0x7a>
 8008faa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008fae:	4315      	orrs	r5, r2
 8008fb0:	426a      	negs	r2, r5
 8008fb2:	432a      	orrs	r2, r5
 8008fb4:	0b12      	lsrs	r2, r2, #12
 8008fb6:	0c5b      	lsrs	r3, r3, #17
 8008fb8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8008fbc:	045b      	lsls	r3, r3, #17
 8008fbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fc2:	ea42 0103 	orr.w	r1, r2, r3
 8008fc6:	4b32      	ldr	r3, [pc, #200]	; (8009090 <rint+0x110>)
 8008fc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fcc:	ed93 6b00 	vldr	d6, [r3]
 8008fd0:	ec41 0b17 	vmov	d7, r0, r1
 8008fd4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008fd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008fdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fe0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008fe4:	ed8d 7b00 	vstr	d7, [sp]
 8008fe8:	9901      	ldr	r1, [sp, #4]
 8008fea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fee:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ff2:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 8008ff6:	e9cd 2300 	strd	r2, r3, [sp]
 8008ffa:	ed9d 0b00 	vldr	d0, [sp]
 8008ffe:	b005      	add	sp, #20
 8009000:	bd30      	pop	{r4, r5, pc}
 8009002:	4924      	ldr	r1, [pc, #144]	; (8009094 <rint+0x114>)
 8009004:	4101      	asrs	r1, r0
 8009006:	ea03 0501 	and.w	r5, r3, r1
 800900a:	4315      	orrs	r5, r2
 800900c:	d0f5      	beq.n	8008ffa <rint+0x7a>
 800900e:	0849      	lsrs	r1, r1, #1
 8009010:	ea03 0501 	and.w	r5, r3, r1
 8009014:	432a      	orrs	r2, r5
 8009016:	d00b      	beq.n	8009030 <rint+0xb0>
 8009018:	ea23 0101 	bic.w	r1, r3, r1
 800901c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009020:	2813      	cmp	r0, #19
 8009022:	fa43 f300 	asr.w	r3, r3, r0
 8009026:	bf0c      	ite	eq
 8009028:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800902c:	2200      	movne	r2, #0
 800902e:	430b      	orrs	r3, r1
 8009030:	4619      	mov	r1, r3
 8009032:	4b17      	ldr	r3, [pc, #92]	; (8009090 <rint+0x110>)
 8009034:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009038:	ed94 6b00 	vldr	d6, [r4]
 800903c:	4610      	mov	r0, r2
 800903e:	ec41 0b17 	vmov	d7, r0, r1
 8009042:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009046:	ed8d 7b02 	vstr	d7, [sp, #8]
 800904a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800904e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009052:	e008      	b.n	8009066 <rint+0xe6>
 8009054:	2833      	cmp	r0, #51	; 0x33
 8009056:	dd09      	ble.n	800906c <rint+0xec>
 8009058:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800905c:	d1cd      	bne.n	8008ffa <rint+0x7a>
 800905e:	ed9d 7b00 	vldr	d7, [sp]
 8009062:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009066:	ed8d 7b00 	vstr	d7, [sp]
 800906a:	e7c6      	b.n	8008ffa <rint+0x7a>
 800906c:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 8009070:	f04f 31ff 	mov.w	r1, #4294967295
 8009074:	40c1      	lsrs	r1, r0
 8009076:	420d      	tst	r5, r1
 8009078:	d0bf      	beq.n	8008ffa <rint+0x7a>
 800907a:	0849      	lsrs	r1, r1, #1
 800907c:	420d      	tst	r5, r1
 800907e:	bf1f      	itttt	ne
 8009080:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8009084:	ea25 0101 	bicne.w	r1, r5, r1
 8009088:	4102      	asrne	r2, r0
 800908a:	430a      	orrne	r2, r1
 800908c:	e7d0      	b.n	8009030 <rint+0xb0>
 800908e:	bf00      	nop
 8009090:	08009b40 	.word	0x08009b40
 8009094:	000fffff 	.word	0x000fffff

08009098 <scalbn>:
 8009098:	b500      	push	{lr}
 800909a:	ed2d 8b02 	vpush	{d8}
 800909e:	b083      	sub	sp, #12
 80090a0:	ed8d 0b00 	vstr	d0, [sp]
 80090a4:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80090a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80090ac:	b9a2      	cbnz	r2, 80090d8 <scalbn+0x40>
 80090ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090b2:	430b      	orrs	r3, r1
 80090b4:	d03a      	beq.n	800912c <scalbn+0x94>
 80090b6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009170 <scalbn+0xd8>
 80090ba:	4a35      	ldr	r2, [pc, #212]	; (8009190 <scalbn+0xf8>)
 80090bc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80090c0:	4290      	cmp	r0, r2
 80090c2:	ed8d 7b00 	vstr	d7, [sp]
 80090c6:	9b01      	ldr	r3, [sp, #4]
 80090c8:	da11      	bge.n	80090ee <scalbn+0x56>
 80090ca:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8009178 <scalbn+0xe0>
 80090ce:	ed9d 6b00 	vldr	d6, [sp]
 80090d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80090d6:	e007      	b.n	80090e8 <scalbn+0x50>
 80090d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80090dc:	428a      	cmp	r2, r1
 80090de:	d109      	bne.n	80090f4 <scalbn+0x5c>
 80090e0:	ed9d 7b00 	vldr	d7, [sp]
 80090e4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80090e8:	ed8d 7b00 	vstr	d7, [sp]
 80090ec:	e01e      	b.n	800912c <scalbn+0x94>
 80090ee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80090f2:	3a36      	subs	r2, #54	; 0x36
 80090f4:	4402      	add	r2, r0
 80090f6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80090fa:	428a      	cmp	r2, r1
 80090fc:	dd0a      	ble.n	8009114 <scalbn+0x7c>
 80090fe:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8009180 <scalbn+0xe8>
 8009102:	eeb0 0b48 	vmov.f64	d0, d8
 8009106:	ed9d 1b00 	vldr	d1, [sp]
 800910a:	f000 f843 	bl	8009194 <copysign>
 800910e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8009112:	e7e9      	b.n	80090e8 <scalbn+0x50>
 8009114:	2a00      	cmp	r2, #0
 8009116:	dd10      	ble.n	800913a <scalbn+0xa2>
 8009118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800911c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009120:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009124:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009128:	e9cd 0100 	strd	r0, r1, [sp]
 800912c:	ed9d 0b00 	vldr	d0, [sp]
 8009130:	b003      	add	sp, #12
 8009132:	ecbd 8b02 	vpop	{d8}
 8009136:	f85d fb04 	ldr.w	pc, [sp], #4
 800913a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800913e:	da06      	bge.n	800914e <scalbn+0xb6>
 8009140:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009144:	4298      	cmp	r0, r3
 8009146:	dcda      	bgt.n	80090fe <scalbn+0x66>
 8009148:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8009178 <scalbn+0xe0>
 800914c:	e7d9      	b.n	8009102 <scalbn+0x6a>
 800914e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009152:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009156:	3236      	adds	r2, #54	; 0x36
 8009158:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800915c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009160:	ec41 0b17 	vmov	d7, r0, r1
 8009164:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8009188 <scalbn+0xf0>
 8009168:	e7b3      	b.n	80090d2 <scalbn+0x3a>
 800916a:	bf00      	nop
 800916c:	f3af 8000 	nop.w
 8009170:	00000000 	.word	0x00000000
 8009174:	43500000 	.word	0x43500000
 8009178:	c2f8f359 	.word	0xc2f8f359
 800917c:	01a56e1f 	.word	0x01a56e1f
 8009180:	8800759c 	.word	0x8800759c
 8009184:	7e37e43c 	.word	0x7e37e43c
 8009188:	00000000 	.word	0x00000000
 800918c:	3c900000 	.word	0x3c900000
 8009190:	ffff3cb0 	.word	0xffff3cb0

08009194 <copysign>:
 8009194:	ec53 2b10 	vmov	r2, r3, d0
 8009198:	ee11 0a90 	vmov	r0, s3
 800919c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80091a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80091a4:	ea41 0300 	orr.w	r3, r1, r0
 80091a8:	ec43 2b10 	vmov	d0, r2, r3
 80091ac:	4770      	bx	lr
	...

080091b0 <__errno>:
 80091b0:	4b01      	ldr	r3, [pc, #4]	; (80091b8 <__errno+0x8>)
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	20000054 	.word	0x20000054

080091bc <_init>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	bf00      	nop
 80091c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c2:	bc08      	pop	{r3}
 80091c4:	469e      	mov	lr, r3
 80091c6:	4770      	bx	lr

080091c8 <_fini>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	bf00      	nop
 80091cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ce:	bc08      	pop	{r3}
 80091d0:	469e      	mov	lr, r3
 80091d2:	4770      	bx	lr
